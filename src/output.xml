<root>




<fdecl type="void" id="_openssl_ebcdic2ascii" text="void *_openssl_ebcdic2ascii(void *dest, const void *srce, size_t count)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ebcdic.h">
  <args>
    <arg type="void" id="dest" text="void *dest" mod=""/>
    <arg type="const void" id="srce" text="const void *srce" mod=""/>
    <arg type="size_t" id="count" text="size_t count" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="_openssl_ascii2ebcdic" text="void *_openssl_ascii2ebcdic(void *dest, const void *srce, size_t count)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ebcdic.h">
  <args>
    <arg type="void" id="dest" text="void *dest" mod=""/>
    <arg type="const void" id="srce" text="const void *srce" mod=""/>
    <arg type="size_t" id="count" text="size_t count" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="CRYPTO_EX_new" text="typedef int CRYPTO_EX_new (void *parent, void *ptr, CRYPTO_EX_DATA *ad,&#10;                           int idx, long argl, void *argp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ossl_typ.h">
  <args>
    <arg type="void" id="parent" text="void *parent" mod=""/>
    <arg type="void" id="ptr" text="void *ptr" mod=""/>
    <arg type="CRYPTO_EX_DATA" id="ad" text="CRYPTO_EX_DATA *ad" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_EX_free" text="typedef void CRYPTO_EX_free (void *parent, void *ptr, CRYPTO_EX_DATA *ad,&#10;                             int idx, long argl, void *argp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ossl_typ.h">
  <args>
    <arg type="void" id="parent" text="void *parent" mod=""/>
    <arg type="void" id="ptr" text="void *ptr" mod=""/>
    <arg type="CRYPTO_EX_DATA" id="ad" text="CRYPTO_EX_DATA *ad" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_EX_dup" text="typedef int CRYPTO_EX_dup (CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from,&#10;                           void *from_d, int idx, long argl, void *argp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ossl_typ.h">
  <args>
    <arg type="CRYPTO_EX_DATA" id="to" text="CRYPTO_EX_DATA *to" mod=""/>
    <arg type="CRYPTO_EX_DATA" id="from" text="CRYPTO_EX_DATA *from" mod=""/>
    <arg type="void" id="from_d" text="void *from_d" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
  </args>
</fdecl>


<fdecl type="int" id="MD4_Init" text="int MD4_Init(MD4_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/md4.h">
  <args>
    <arg type="MD4_CTX" id="c" text="MD4_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="MD4_Update" text="int MD4_Update(MD4_CTX *c, const void *data, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/md4.h">
  <args>
    <arg type="MD4_CTX" id="c" text="MD4_CTX *c" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="MD4_Final" text="int MD4_Final(unsigned char *md, MD4_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/md4.h">
  <args>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="MD4_CTX" id="c" text="MD4_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="MD4" text="unsigned char *MD4(const unsigned char *d, size_t n, unsigned char *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/md4.h">
  <args>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="MD4_Transform" text="void MD4_Transform(MD4_CTX *c, const unsigned char *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/md4.h">
  <args>
    <arg type="MD4_CTX" id="c" text="MD4_CTX *c" mod=""/>
    <arg type="const unsigned char" id="b" text="const unsigned char *b" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="MD5_Init" text="int MD5_Init(MD5_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/md5.h">
  <args>
    <arg type="MD5_CTX" id="c" text="MD5_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="MD5_Update" text="int MD5_Update(MD5_CTX *c, const void *data, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/md5.h">
  <args>
    <arg type="MD5_CTX" id="c" text="MD5_CTX *c" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="MD5_Final" text="int MD5_Final(unsigned char *md, MD5_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/md5.h">
  <args>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="MD5_CTX" id="c" text="MD5_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="MD5" text="unsigned char *MD5(const unsigned char *d, size_t n, unsigned char *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/md5.h">
  <args>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="MD5_Transform" text="void MD5_Transform(MD5_CTX *c, const unsigned char *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/md5.h">
  <args>
    <arg type="MD5_CTX" id="c" text="MD5_CTX *c" mod=""/>
    <arg type="const unsigned char" id="b" text="const unsigned char *b" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="CRYPTO_mem_ctrl" text="int CRYPTO_mem_ctrl(int mode)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="mode" text="int mode" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_is_mem_check_on" text="int CRYPTO_is_mem_check_on(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSLeay_version" text="const char *SSLeay_version(int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="SSLeay" text="unsigned long SSLeay(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OPENSSL_issetugid" text="int OPENSSL_issetugid(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const CRYPTO_EX_DATA_IMPL" id="CRYPTO_get_ex_data_implementation" text="const CRYPTO_EX_DATA_IMPL *CRYPTO_get_ex_data_implementation(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_set_ex_data_implementation" text="int CRYPTO_set_ex_data_implementation(const CRYPTO_EX_DATA_IMPL *i)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="const CRYPTO_EX_DATA_IMPL" id="i" text="const CRYPTO_EX_DATA_IMPL *i" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_ex_data_new_class" text="int CRYPTO_ex_data_new_class(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_get_ex_new_index" text="int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,&#10;                            CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func,&#10;                            CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="class_index" text="int class_index" mod=""/>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_new_ex_data" text="int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="class_index" text="int class_index" mod=""/>
    <arg type="void" id="obj" text="void *obj" mod=""/>
    <arg type="CRYPTO_EX_DATA" id="ad" text="CRYPTO_EX_DATA *ad" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_dup_ex_data" text="int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,&#10;                       CRYPTO_EX_DATA *from)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="class_index" text="int class_index" mod=""/>
    <arg type="CRYPTO_EX_DATA" id="to" text="CRYPTO_EX_DATA *to" mod=""/>
    <arg type="CRYPTO_EX_DATA" id="from" text="CRYPTO_EX_DATA *from" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_free_ex_data" text="void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="class_index" text="int class_index" mod=""/>
    <arg type="void" id="obj" text="void *obj" mod=""/>
    <arg type="CRYPTO_EX_DATA" id="ad" text="CRYPTO_EX_DATA *ad" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_set_ex_data" text="int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="CRYPTO_EX_DATA" id="ad" text="CRYPTO_EX_DATA *ad" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="val" text="void *val" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_get_ex_data" text="void *CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="const CRYPTO_EX_DATA" id="ad" text="const CRYPTO_EX_DATA *ad" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_cleanup_all_ex_data" text="void CRYPTO_cleanup_all_ex_data(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_get_new_lockid" text="int CRYPTO_get_new_lockid(char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="char" id="name" text="char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_num_locks" text="int CRYPTO_num_locks(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_lock" text="void CRYPTO_lock(int mode, int type, const char *file, int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="mode" text="int mode" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_set_locking_callback" text="void CRYPTO_set_locking_callback(void (*func) (int mode, int type,&#10;                                               const char *file, int line))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="func" text="void (*func) (int mode, int type,&#10;                                               const char *file, int line)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_get_locking_callback" text="void (*CRYPTO_get_locking_callback(void)) (int mode, int type,&#10;                                           const char *file, int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
    <arg type="int" id="mode" text="int mode" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_set_add_lock_callback" text="void CRYPTO_set_add_lock_callback(int (*func)&#10;                                   (int *num, int mount, int type,&#10;                                    const char *file, int line))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="func" text="int (*func)&#10;                                   (int *num, int mount, int type,&#10;                                    const char *file, int line)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_get_add_lock_callback" text="int (*CRYPTO_get_add_lock_callback(void)) (int *num, int mount, int type,&#10;                                           const char *file, int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="int" id="mount" text="int mount" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_THREADID_set_numeric" text="void CRYPTO_THREADID_set_numeric(CRYPTO_THREADID *id, unsigned long val)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="CRYPTO_THREADID" id="id" text="CRYPTO_THREADID *id" mod=""/>
    <arg type="unsigned long" id="val" text="unsigned long val" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_THREADID_set_pointer" text="void CRYPTO_THREADID_set_pointer(CRYPTO_THREADID *id, void *ptr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="CRYPTO_THREADID" id="id" text="CRYPTO_THREADID *id" mod=""/>
    <arg type="void" id="ptr" text="void *ptr" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_THREADID_set_callback" text="int CRYPTO_THREADID_set_callback(void (*threadid_func) (CRYPTO_THREADID *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="threadid_func" text="void (*threadid_func) (CRYPTO_THREADID *)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_THREADID_get_callback" text="void (*CRYPTO_THREADID_get_callback(void)) (CRYPTO_THREADID *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON9" text="void" mod=""/>
    <arg type="CRYPTO_THREADID" id="ANON10" text="CRYPTO_THREADID *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_THREADID_current" text="void CRYPTO_THREADID_current(CRYPTO_THREADID *id)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="CRYPTO_THREADID" id="id" text="CRYPTO_THREADID *id" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_THREADID_cmp" text="int CRYPTO_THREADID_cmp(const CRYPTO_THREADID *a, const CRYPTO_THREADID *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="const CRYPTO_THREADID" id="a" text="const CRYPTO_THREADID *a" mod=""/>
    <arg type="const CRYPTO_THREADID" id="b" text="const CRYPTO_THREADID *b" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_THREADID_cpy" text="void CRYPTO_THREADID_cpy(CRYPTO_THREADID *dest, const CRYPTO_THREADID *src)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="CRYPTO_THREADID" id="dest" text="CRYPTO_THREADID *dest" mod=""/>
    <arg type="const CRYPTO_THREADID" id="src" text="const CRYPTO_THREADID *src" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="CRYPTO_THREADID_hash" text="unsigned long CRYPTO_THREADID_hash(const CRYPTO_THREADID *id)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="const CRYPTO_THREADID" id="id" text="const CRYPTO_THREADID *id" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_set_id_callback" text="void CRYPTO_set_id_callback(unsigned long (*func) (void))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="unsigned long" id="func" text="unsigned long (*func) (void)" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="CRYPTO_get_id_callback" text="unsigned long (*CRYPTO_get_id_callback(void)) (void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON11" text="void" mod=""/>
    <arg type="void" id="ANON12" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="CRYPTO_thread_id" text="unsigned long CRYPTO_thread_id(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON13" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="CRYPTO_get_lock_name" text="const char *CRYPTO_get_lock_name(int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_add_lock" text="int CRYPTO_add_lock(int *pointer, int amount, int type, const char *file,&#10;                    int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="pointer" text="int *pointer" mod=""/>
    <arg type="int" id="amount" text="int amount" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_get_new_dynlockid" text="int CRYPTO_get_new_dynlockid(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON14" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_destroy_dynlockid" text="void CRYPTO_destroy_dynlockid(int i)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="i" text="int i" mod=""/>
  </args>
</fdecl>
<fdecl type="struct CRYPTO_dynlock_value" id="CRYPTO_get_dynlock_value" text="struct CRYPTO_dynlock_value *CRYPTO_get_dynlock_value(int i)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="i" text="int i" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_set_dynlock_create_callback" text="void CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value&#10;                                        *(*dyn_create_function) (const char&#10;                                                                 *file,&#10;                                                                 int line))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="struct CRYPTO_dynlock_value" id="dyn_create_function" text="struct CRYPTO_dynlock_value&#10;                                        *(*dyn_create_function) (const char&#10;                                                                 *file,&#10;                                                                 int line)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_set_dynlock_lock_callback" text="void CRYPTO_set_dynlock_lock_callback(void (*dyn_lock_function)&#10;                                       (int mode,&#10;                                        struct CRYPTO_dynlock_value *l,&#10;                                        const char *file, int line))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="dyn_lock_function" text="void (*dyn_lock_function)&#10;                                       (int mode,&#10;                                        struct CRYPTO_dynlock_value *l,&#10;                                        const char *file, int line)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_set_dynlock_destroy_callback" text="void CRYPTO_set_dynlock_destroy_callback(void (*dyn_destroy_function)&#10;                                          (struct CRYPTO_dynlock_value *l,&#10;                                           const char *file, int line))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="dyn_destroy_function" text="void (*dyn_destroy_function)&#10;                                          (struct CRYPTO_dynlock_value *l,&#10;                                           const char *file, int line)" mod=""/>
  </args>
</fdecl>
<fdecl type="struct CRYPTO_dynlock_value" id="CRYPTO_get_dynlock_create_callback" text="struct CRYPTO_dynlock_value&#10;*(*CRYPTO_get_dynlock_create_callback(void)) (const char *file, int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON15" text="void" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_get_dynlock_lock_callback" text="void (*CRYPTO_get_dynlock_lock_callback(void)) (int mode,&#10;                                                struct CRYPTO_dynlock_value&#10;                                                *l, const char *file,&#10;                                                int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON16" text="void" mod=""/>
    <arg type="int" id="mode" text="int mode" mod=""/>
    <arg type="struct CRYPTO_dynlock_value" id="l" text="struct CRYPTO_dynlock_value&#10;                                                *l" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_get_dynlock_destroy_callback" text="void (*CRYPTO_get_dynlock_destroy_callback(void)) (struct CRYPTO_dynlock_value&#10;                                                   *l, const char *file,&#10;                                                   int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON17" text="void" mod=""/>
    <arg type="struct CRYPTO_dynlock_value" id="l" text="struct CRYPTO_dynlock_value&#10;                                                   *l" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_set_mem_functions" text="int CRYPTO_set_mem_functions(void *(*m) (size_t), void *(*r) (void *, size_t),&#10;                             void (*f) (void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="m" text="void *(*m) (size_t)" mod=""/>
    <arg type="void" id="r" text="void *(*r) (void *, size_t)" mod=""/>
    <arg type="void" id="f" text="void (*f) (void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_set_locked_mem_functions" text="int CRYPTO_set_locked_mem_functions(void *(*m) (size_t),&#10;                                    void (*free_func) (void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="m" text="void *(*m) (size_t)" mod=""/>
    <arg type="void" id="free_func" text="void (*free_func) (void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_set_mem_ex_functions" text="int CRYPTO_set_mem_ex_functions(void *(*m) (size_t, const char *, int),&#10;                                void *(*r) (void *, size_t, const char *,&#10;                                            int), void (*f) (void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="m" text="void *(*m) (size_t, const char *, int)" mod=""/>
    <arg type="void" id="r" text="void *(*r) (void *, size_t, const char *,&#10;                                            int)" mod=""/>
    <arg type="void" id="f" text="void (*f) (void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_set_locked_mem_ex_functions" text="int CRYPTO_set_locked_mem_ex_functions(void *(*m) (size_t, const char *, int),&#10;                                       void (*free_func) (void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="m" text="void *(*m) (size_t, const char *, int)" mod=""/>
    <arg type="void" id="free_func" text="void (*free_func) (void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_set_mem_debug_functions" text="int CRYPTO_set_mem_debug_functions(void (*m)&#10;                                    (void *, int, const char *, int, int),&#10;                                   void (*r) (void *, void *, int,&#10;                                              const char *, int, int),&#10;                                   void (*f) (void *, int), void (*so) (long),&#10;                                   long (*go) (void))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="m" text="void (*m)&#10;                                    (void *, int, const char *, int, int)" mod=""/>
    <arg type="void" id="r" text="void (*r) (void *, void *, int,&#10;                                              const char *, int, int)" mod=""/>
    <arg type="void" id="f" text="void (*f) (void *, int)" mod=""/>
    <arg type="void" id="so" text="void (*so) (long)" mod=""/>
    <arg type="long" id="go" text="long (*go) (void)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_get_mem_functions" text="void CRYPTO_get_mem_functions(void *(**m) (size_t),&#10;                              void *(**r) (void *, size_t),&#10;                              void (**f) (void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="m" text="void *(**m) (size_t)" mod=""/>
    <arg type="void" id="r" text="void *(**r) (void *, size_t)" mod=""/>
    <arg type="void" id="f" text="void (**f) (void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_get_locked_mem_functions" text="void CRYPTO_get_locked_mem_functions(void *(**m) (size_t),&#10;                                     void (**f) (void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="m" text="void *(**m) (size_t)" mod=""/>
    <arg type="void" id="f" text="void (**f) (void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_get_mem_ex_functions" text="void CRYPTO_get_mem_ex_functions(void *(**m) (size_t, const char *, int),&#10;                                 void *(**r) (void *, size_t, const char *,&#10;                                              int), void (**f) (void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="m" text="void *(**m) (size_t, const char *, int)" mod=""/>
    <arg type="void" id="r" text="void *(**r) (void *, size_t, const char *,&#10;                                              int)" mod=""/>
    <arg type="void" id="f" text="void (**f) (void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_get_locked_mem_ex_functions" text="void CRYPTO_get_locked_mem_ex_functions(void&#10;                                        *(**m) (size_t, const char *, int),&#10;                                        void (**f) (void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="m" text="void&#10;                                        *(**m) (size_t, const char *, int)" mod=""/>
    <arg type="void" id="f" text="void (**f) (void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_get_mem_debug_functions" text="void CRYPTO_get_mem_debug_functions(void (**m)&#10;                                     (void *, int, const char *, int, int),&#10;                                    void (**r) (void *, void *, int,&#10;                                                const char *, int, int),&#10;                                    void (**f) (void *, int),&#10;                                    void (**so) (long), long (**go) (void))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="m" text="void (**m)&#10;                                     (void *, int, const char *, int, int)" mod=""/>
    <arg type="void" id="r" text="void (**r) (void *, void *, int,&#10;                                                const char *, int, int)" mod=""/>
    <arg type="void" id="f" text="void (**f) (void *, int)" mod=""/>
    <arg type="void" id="so" text="void (**so) (long)" mod=""/>
    <arg type="long" id="go" text="long (**go) (void)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_malloc_locked" text="void *CRYPTO_malloc_locked(int num, const char *file, int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_free_locked" text="void CRYPTO_free_locked(void *ptr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ptr" text="void *ptr" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_malloc" text="void *CRYPTO_malloc(int num, const char *file, int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="CRYPTO_strdup" text="char *CRYPTO_strdup(const char *str, const char *file, int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_free" text="void CRYPTO_free(void *ptr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ptr" text="void *ptr" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_realloc" text="void *CRYPTO_realloc(void *addr, int num, const char *file, int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="addr" text="void *addr" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_realloc_clean" text="void *CRYPTO_realloc_clean(void *addr, int old_num, int num, const char *file,&#10;                           int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="addr" text="void *addr" mod=""/>
    <arg type="int" id="old_num" text="int old_num" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_remalloc" text="void *CRYPTO_remalloc(void *addr, int num, const char *file, int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="addr" text="void *addr" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OPENSSL_cleanse" text="void OPENSSL_cleanse(void *ptr, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ptr" text="void *ptr" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_set_mem_debug_options" text="void CRYPTO_set_mem_debug_options(long bits)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="long" id="bits" text="long bits" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="CRYPTO_get_mem_debug_options" text="long CRYPTO_get_mem_debug_options(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON18" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_push_info_" text="int CRYPTO_push_info_(const char *info, const char *file, int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="const char" id="info" text="const char *info" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_pop_info" text="int CRYPTO_pop_info(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON19" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_remove_all_info" text="int CRYPTO_remove_all_info(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON20" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_dbg_malloc" text="void CRYPTO_dbg_malloc(void *addr, int num, const char *file, int line,&#10;                       int before_p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="addr" text="void *addr" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
    <arg type="int" id="before_p" text="int before_p" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_dbg_realloc" text="void CRYPTO_dbg_realloc(void *addr1, void *addr2, int num, const char *file,&#10;                        int line, int before_p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="addr1" text="void *addr1" mod=""/>
    <arg type="void" id="addr2" text="void *addr2" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
    <arg type="int" id="before_p" text="int before_p" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_dbg_free" text="void CRYPTO_dbg_free(void *addr, int before_p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="addr" text="void *addr" mod=""/>
    <arg type="int" id="before_p" text="int before_p" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_dbg_set_options" text="void CRYPTO_dbg_set_options(long bits)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="long" id="bits" text="long bits" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="CRYPTO_dbg_get_options" text="long CRYPTO_dbg_get_options(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON21" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_mem_leaks_fp" text="void CRYPTO_mem_leaks_fp(FILE *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="FILE" id="ANON22" text="FILE *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_mem_leaks" text="void CRYPTO_mem_leaks(struct bio_st *bio)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="struct bio_st" id="bio" text="struct bio_st *bio" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_MEM_LEAK_CB" text="typedef void *CRYPTO_MEM_LEAK_CB (unsigned long, const char *, int, int,&#10;                                  void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="unsigned long" id="ANON23" text="unsigned long" mod=""/>
    <arg type="const char" id="ANON24" text="const char *" mod=""/>
    <arg type="int" id="ANON25" text="int" mod=""/>
    <arg type="int" id="ANON26" text="int" mod=""/>
    <arg type="void" id="ANON27" text="void *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_mem_leaks_cb" text="void CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB *cb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="CRYPTO_MEM_LEAK_CB" id="cb" text="CRYPTO_MEM_LEAK_CB *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OpenSSLDie" text="void OpenSSLDie(const char *file, int line, const char *assertion)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
    <arg type="const char" id="assertion" text="const char *assertion" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="OPENSSL_ia32cap_loc" text="unsigned long *OPENSSL_ia32cap_loc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON28" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OPENSSL_isservice" text="int OPENSSL_isservice(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON29" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="FIPS_mode" text="int FIPS_mode(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON30" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="FIPS_mode_set" text="int FIPS_mode_set(int r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="int" id="r" text="int r" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OPENSSL_init" text="void OPENSSL_init(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON31" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_memcmp" text="int CRYPTO_memcmp(const volatile void *a, const volatile void *b, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="const volatile void" id="a" text="const volatile void *a" mod=""/>
    <arg type="const volatile void" id="b" text="const volatile void *b" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_CRYPTO_strings" text="void ERR_load_CRYPTO_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/crypto.h">
  <args>
    <arg type="void" id="ANON32" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="SHA_Init" text="int SHA_Init(SHA_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA_CTX" id="c" text="SHA_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA_Update" text="int SHA_Update(SHA_CTX *c, const void *data, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA_CTX" id="c" text="SHA_CTX *c" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA_Final" text="int SHA_Final(unsigned char *md, SHA_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="SHA_CTX" id="c" text="SHA_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="SHA" text="unsigned char *SHA(const unsigned char *d, size_t n, unsigned char *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SHA_Transform" text="void SHA_Transform(SHA_CTX *c, const unsigned char *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA_CTX" id="c" text="SHA_CTX *c" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA1_Init" text="int SHA1_Init(SHA_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA_CTX" id="c" text="SHA_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA1_Update" text="int SHA1_Update(SHA_CTX *c, const void *data, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA_CTX" id="c" text="SHA_CTX *c" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA1_Final" text="int SHA1_Final(unsigned char *md, SHA_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="SHA_CTX" id="c" text="SHA_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="SHA1" text="unsigned char *SHA1(const unsigned char *d, size_t n, unsigned char *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SHA1_Transform" text="void SHA1_Transform(SHA_CTX *c, const unsigned char *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA_CTX" id="c" text="SHA_CTX *c" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA224_Init" text="int SHA224_Init(SHA256_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA256_CTX" id="c" text="SHA256_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA224_Update" text="int SHA224_Update(SHA256_CTX *c, const void *data, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA256_CTX" id="c" text="SHA256_CTX *c" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA224_Final" text="int SHA224_Final(unsigned char *md, SHA256_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="SHA256_CTX" id="c" text="SHA256_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="SHA224" text="unsigned char *SHA224(const unsigned char *d, size_t n, unsigned char *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA256_Init" text="int SHA256_Init(SHA256_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA256_CTX" id="c" text="SHA256_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA256_Update" text="int SHA256_Update(SHA256_CTX *c, const void *data, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA256_CTX" id="c" text="SHA256_CTX *c" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA256_Final" text="int SHA256_Final(unsigned char *md, SHA256_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="SHA256_CTX" id="c" text="SHA256_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="SHA256" text="unsigned char *SHA256(const unsigned char *d, size_t n, unsigned char *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SHA256_Transform" text="void SHA256_Transform(SHA256_CTX *c, const unsigned char *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA256_CTX" id="c" text="SHA256_CTX *c" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA384_Init" text="int SHA384_Init(SHA512_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA512_CTX" id="c" text="SHA512_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA384_Update" text="int SHA384_Update(SHA512_CTX *c, const void *data, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA512_CTX" id="c" text="SHA512_CTX *c" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA384_Final" text="int SHA384_Final(unsigned char *md, SHA512_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="SHA512_CTX" id="c" text="SHA512_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="SHA384" text="unsigned char *SHA384(const unsigned char *d, size_t n, unsigned char *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA512_Init" text="int SHA512_Init(SHA512_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA512_CTX" id="c" text="SHA512_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA512_Update" text="int SHA512_Update(SHA512_CTX *c, const void *data, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA512_CTX" id="c" text="SHA512_CTX *c" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SHA512_Final" text="int SHA512_Final(unsigned char *md, SHA512_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="SHA512_CTX" id="c" text="SHA512_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="SHA512" text="unsigned char *SHA512(const unsigned char *d, size_t n, unsigned char *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SHA512_Transform" text="void SHA512_Transform(SHA512_CTX *c, const unsigned char *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/sha.h">
  <args>
    <arg type="SHA512_CTX" id="c" text="SHA512_CTX *c" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="RIPEMD160_Init" text="int RIPEMD160_Init(RIPEMD160_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ripemd.h">
  <args>
    <arg type="RIPEMD160_CTX" id="c" text="RIPEMD160_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RIPEMD160_Update" text="int RIPEMD160_Update(RIPEMD160_CTX *c, const void *data, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ripemd.h">
  <args>
    <arg type="RIPEMD160_CTX" id="c" text="RIPEMD160_CTX *c" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RIPEMD160_Final" text="int RIPEMD160_Final(unsigned char *md, RIPEMD160_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ripemd.h">
  <args>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="RIPEMD160_CTX" id="c" text="RIPEMD160_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="RIPEMD160" text="unsigned char *RIPEMD160(const unsigned char *d, size_t n, unsigned char *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ripemd.h">
  <args>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RIPEMD160_Transform" text="void RIPEMD160_Transform(RIPEMD160_CTX *c, const unsigned char *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ripemd.h">
  <args>
    <arg type="RIPEMD160_CTX" id="c" text="RIPEMD160_CTX *c" mod=""/>
    <arg type="const unsigned char" id="b" text="const unsigned char *b" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="WHIRLPOOL_Init" text="int WHIRLPOOL_Init(WHIRLPOOL_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/whrlpool.h">
  <args>
    <arg type="WHIRLPOOL_CTX" id="c" text="WHIRLPOOL_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="WHIRLPOOL_Update" text="int WHIRLPOOL_Update(WHIRLPOOL_CTX *c, const void *inp, size_t bytes)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/whrlpool.h">
  <args>
    <arg type="WHIRLPOOL_CTX" id="c" text="WHIRLPOOL_CTX *c" mod=""/>
    <arg type="const void" id="inp" text="const void *inp" mod=""/>
    <arg type="size_t" id="bytes" text="size_t bytes" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="WHIRLPOOL_BitUpdate" text="void WHIRLPOOL_BitUpdate(WHIRLPOOL_CTX *c, const void *inp, size_t bits)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/whrlpool.h">
  <args>
    <arg type="WHIRLPOOL_CTX" id="c" text="WHIRLPOOL_CTX *c" mod=""/>
    <arg type="const void" id="inp" text="const void *inp" mod=""/>
    <arg type="size_t" id="bits" text="size_t bits" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="WHIRLPOOL_Final" text="int WHIRLPOOL_Final(unsigned char *md, WHIRLPOOL_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/whrlpool.h">
  <args>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="WHIRLPOOL_CTX" id="c" text="WHIRLPOOL_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="WHIRLPOOL" text="unsigned char *WHIRLPOOL(const void *inp, size_t bytes, unsigned char *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/whrlpool.h">
  <args>
    <arg type="const void" id="inp" text="const void *inp" mod=""/>
    <arg type="size_t" id="bytes" text="size_t bytes" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="OBJ_NAME_init" text="int OBJ_NAME_init(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_NAME_new_index" text="int OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),&#10;                       int (*cmp_func) (const char *, const char *),&#10;                       void (*free_func) (const char *, int, const char *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="unsigned long" id="hash_func" text="unsigned long (*hash_func) (const char *)" mod=""/>
    <arg type="int" id="cmp_func" text="int (*cmp_func) (const char *, const char *)" mod=""/>
    <arg type="void" id="free_func" text="void (*free_func) (const char *, int, const char *)" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="OBJ_NAME_get" text="const char *OBJ_NAME_get(const char *name, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_NAME_add" text="int OBJ_NAME_add(const char *name, int type, const char *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const char" id="data" text="const char *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_NAME_remove" text="int OBJ_NAME_remove(const char *name, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OBJ_NAME_cleanup" text="void OBJ_NAME_cleanup(int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OBJ_NAME_do_all" text="void OBJ_NAME_do_all(int type, void (*fn) (const OBJ_NAME *, void *arg),&#10;                     void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="void" id="fn" text="void (*fn) (const OBJ_NAME *, void *arg)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OBJ_NAME_do_all_sorted" text="void OBJ_NAME_do_all_sorted(int type,&#10;                            void (*fn) (const OBJ_NAME *, void *arg),&#10;                            void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="void" id="fn" text="void (*fn) (const OBJ_NAME *, void *arg)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="OBJ_dup" text="ASN1_OBJECT *OBJ_dup(const ASN1_OBJECT *o)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const ASN1_OBJECT" id="o" text="const ASN1_OBJECT *o" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="OBJ_nid2obj" text="ASN1_OBJECT *OBJ_nid2obj(int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="OBJ_nid2ln" text="const char *OBJ_nid2ln(int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="OBJ_nid2sn" text="const char *OBJ_nid2sn(int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_obj2nid" text="int OBJ_obj2nid(const ASN1_OBJECT *o)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const ASN1_OBJECT" id="o" text="const ASN1_OBJECT *o" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="OBJ_txt2obj" text="ASN1_OBJECT *OBJ_txt2obj(const char *s, int no_name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const char" id="s" text="const char *s" mod=""/>
    <arg type="int" id="no_name" text="int no_name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_obj2txt" text="int OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="buf_len" text="int buf_len" mod=""/>
    <arg type="const ASN1_OBJECT" id="a" text="const ASN1_OBJECT *a" mod=""/>
    <arg type="int" id="no_name" text="int no_name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_txt2nid" text="int OBJ_txt2nid(const char *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const char" id="s" text="const char *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_ln2nid" text="int OBJ_ln2nid(const char *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const char" id="s" text="const char *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_sn2nid" text="int OBJ_sn2nid(const char *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const char" id="s" text="const char *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_cmp" text="int OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const ASN1_OBJECT" id="a" text="const ASN1_OBJECT *a" mod=""/>
    <arg type="const ASN1_OBJECT" id="b" text="const ASN1_OBJECT *b" mod=""/>
  </args>
</fdecl>
<fdecl type="const void" id="OBJ_bsearch_" text="const void *OBJ_bsearch_(const void *key, const void *base, int num, int size,&#10;                         int (*cmp) (const void *, const void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="const void" id="base" text="const void *base" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
    <arg type="int" id="cmp" text="int (*cmp) (const void *, const void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="const void" id="OBJ_bsearch_ex_" text="const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,&#10;                            int size,&#10;                            int (*cmp) (const void *, const void *),&#10;                            int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="const void" id="base" text="const void *base" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
    <arg type="int" id="cmp" text="int (*cmp) (const void *, const void *)" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_new_nid" text="int OBJ_new_nid(int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_add_object" text="int OBJ_add_object(const ASN1_OBJECT *obj)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const ASN1_OBJECT" id="obj" text="const ASN1_OBJECT *obj" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_create" text="int OBJ_create(const char *oid, const char *sn, const char *ln)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="const char" id="oid" text="const char *oid" mod=""/>
    <arg type="const char" id="sn" text="const char *sn" mod=""/>
    <arg type="const char" id="ln" text="const char *ln" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OBJ_cleanup" text="void OBJ_cleanup(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_create_objects" text="int OBJ_create_objects(BIO *in)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_find_sigid_algs" text="int OBJ_find_sigid_algs(int signid, int *pdig_nid, int *ppkey_nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="int" id="signid" text="int signid" mod=""/>
    <arg type="int" id="pdig_nid" text="int *pdig_nid" mod=""/>
    <arg type="int" id="ppkey_nid" text="int *ppkey_nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_find_sigid_by_algs" text="int OBJ_find_sigid_by_algs(int *psignid, int dig_nid, int pkey_nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="int" id="psignid" text="int *psignid" mod=""/>
    <arg type="int" id="dig_nid" text="int dig_nid" mod=""/>
    <arg type="int" id="pkey_nid" text="int pkey_nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_add_sigid" text="int OBJ_add_sigid(int signid, int dig_id, int pkey_id)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="int" id="signid" text="int signid" mod=""/>
    <arg type="int" id="dig_id" text="int dig_id" mod=""/>
    <arg type="int" id="pkey_id" text="int pkey_id" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OBJ_sigid_free" text="void OBJ_sigid_free(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="check_defer" text="void check_defer(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_OBJ_strings" text="void ERR_load_OBJ_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/objects.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="const char" id="DES_options" text="const char *DES_options(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_ecb3_encrypt" text="void DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,&#10;                      DES_key_schedule *ks1, DES_key_schedule *ks2,&#10;                      DES_key_schedule *ks3, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const_DES_cblock" id="input" text="const_DES_cblock *input" mod=""/>
    <arg type="DES_cblock" id="output" text="DES_cblock *output" mod=""/>
    <arg type="DES_key_schedule" id="ks1" text="DES_key_schedule *ks1" mod=""/>
    <arg type="DES_key_schedule" id="ks2" text="DES_key_schedule *ks2" mod=""/>
    <arg type="DES_key_schedule" id="ks3" text="DES_key_schedule *ks3" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned int" id="DES_cbc_cksum" text="unsigned int &#10;# 135 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot;&#10;        DES_cbc_cksum(const unsigned char *input, DES_cblock *output,&#10;                       long length, DES_key_schedule *schedule,&#10;                       const_DES_cblock *ivec)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="input" text="const unsigned char *input" mod=""/>
    <arg type="DES_cblock" id="output" text="DES_cblock *output" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
    <arg type="const_DES_cblock" id="ivec" text="const_DES_cblock *ivec" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_cbc_encrypt" text="void DES_cbc_encrypt(const unsigned char *input, unsigned char *output,&#10;                     long length, DES_key_schedule *schedule,&#10;                     DES_cblock *ivec, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="input" text="const unsigned char *input" mod=""/>
    <arg type="unsigned char" id="output" text="unsigned char *output" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_ncbc_encrypt" text="void DES_ncbc_encrypt(const unsigned char *input, unsigned char *output,&#10;                      long length, DES_key_schedule *schedule,&#10;                      DES_cblock *ivec, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="input" text="const unsigned char *input" mod=""/>
    <arg type="unsigned char" id="output" text="unsigned char *output" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_xcbc_encrypt" text="void DES_xcbc_encrypt(const unsigned char *input, unsigned char *output,&#10;                      long length, DES_key_schedule *schedule,&#10;                      DES_cblock *ivec, const_DES_cblock *inw,&#10;                      const_DES_cblock *outw, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="input" text="const unsigned char *input" mod=""/>
    <arg type="unsigned char" id="output" text="unsigned char *output" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
    <arg type="const_DES_cblock" id="inw" text="const_DES_cblock *inw" mod=""/>
    <arg type="const_DES_cblock" id="outw" text="const_DES_cblock *outw" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_cfb_encrypt" text="void DES_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,&#10;                     long length, DES_key_schedule *schedule,&#10;                     DES_cblock *ivec, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="numbits" text="int numbits" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_ecb_encrypt" text="void DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,&#10;                     DES_key_schedule *ks, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const_DES_cblock" id="input" text="const_DES_cblock *input" mod=""/>
    <arg type="DES_cblock" id="output" text="DES_cblock *output" mod=""/>
    <arg type="DES_key_schedule" id="ks" text="DES_key_schedule *ks" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_encrypt1" text="void DES_encrypt1(&#10;# 165 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot; 3 4&#10;                 unsigned int &#10;# 165 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot;&#10;                          *data, DES_key_schedule *ks, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="unsigned int" id="data" text="unsigned int &#10;# 165 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot;&#10;                          *data" mod=""/>
    <arg type="DES_key_schedule" id="ks" text="DES_key_schedule *ks" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_encrypt2" text="void DES_encrypt2(&#10;# 175 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot; 3 4&#10;                 unsigned int &#10;# 175 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot;&#10;                          *data, DES_key_schedule *ks, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="unsigned int" id="data" text="unsigned int &#10;# 175 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot;&#10;                          *data" mod=""/>
    <arg type="DES_key_schedule" id="ks" text="DES_key_schedule *ks" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_encrypt3" text="void DES_encrypt3(&#10;# 177 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot; 3 4&#10;                 unsigned int &#10;# 177 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot;&#10;                          *data, DES_key_schedule *ks1,&#10;                  DES_key_schedule *ks2, DES_key_schedule *ks3)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="unsigned int" id="data" text="unsigned int &#10;# 177 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot;&#10;                          *data" mod=""/>
    <arg type="DES_key_schedule" id="ks1" text="DES_key_schedule *ks1" mod=""/>
    <arg type="DES_key_schedule" id="ks2" text="DES_key_schedule *ks2" mod=""/>
    <arg type="DES_key_schedule" id="ks3" text="DES_key_schedule *ks3" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_decrypt3" text="void DES_decrypt3(&#10;# 179 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot; 3 4&#10;                 unsigned int &#10;# 179 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot;&#10;                          *data, DES_key_schedule *ks1,&#10;                  DES_key_schedule *ks2, DES_key_schedule *ks3)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="unsigned int" id="data" text="unsigned int &#10;# 179 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot;&#10;                          *data" mod=""/>
    <arg type="DES_key_schedule" id="ks1" text="DES_key_schedule *ks1" mod=""/>
    <arg type="DES_key_schedule" id="ks2" text="DES_key_schedule *ks2" mod=""/>
    <arg type="DES_key_schedule" id="ks3" text="DES_key_schedule *ks3" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_ede3_cbc_encrypt" text="void DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,&#10;                          long length,&#10;                          DES_key_schedule *ks1, DES_key_schedule *ks2,&#10;                          DES_key_schedule *ks3, DES_cblock *ivec, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="input" text="const unsigned char *input" mod=""/>
    <arg type="unsigned char" id="output" text="unsigned char *output" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="ks1" text="DES_key_schedule *ks1" mod=""/>
    <arg type="DES_key_schedule" id="ks2" text="DES_key_schedule *ks2" mod=""/>
    <arg type="DES_key_schedule" id="ks3" text="DES_key_schedule *ks3" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_ede3_cbcm_encrypt" text="void DES_ede3_cbcm_encrypt(const unsigned char *in, unsigned char *out,&#10;                           long length,&#10;                           DES_key_schedule *ks1, DES_key_schedule *ks2,&#10;                           DES_key_schedule *ks3,&#10;                           DES_cblock *ivec1, DES_cblock *ivec2, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="ks1" text="DES_key_schedule *ks1" mod=""/>
    <arg type="DES_key_schedule" id="ks2" text="DES_key_schedule *ks2" mod=""/>
    <arg type="DES_key_schedule" id="ks3" text="DES_key_schedule *ks3" mod=""/>
    <arg type="DES_cblock" id="ivec1" text="DES_cblock *ivec1" mod=""/>
    <arg type="DES_cblock" id="ivec2" text="DES_cblock *ivec2" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_ede3_cfb64_encrypt" text="void DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,&#10;                            long length, DES_key_schedule *ks1,&#10;                            DES_key_schedule *ks2, DES_key_schedule *ks3,&#10;                            DES_cblock *ivec, int *num, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="ks1" text="DES_key_schedule *ks1" mod=""/>
    <arg type="DES_key_schedule" id="ks2" text="DES_key_schedule *ks2" mod=""/>
    <arg type="DES_key_schedule" id="ks3" text="DES_key_schedule *ks3" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_ede3_cfb_encrypt" text="void DES_ede3_cfb_encrypt(const unsigned char *in, unsigned char *out,&#10;                          int numbits, long length, DES_key_schedule *ks1,&#10;                          DES_key_schedule *ks2, DES_key_schedule *ks3,&#10;                          DES_cblock *ivec, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="numbits" text="int numbits" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="ks1" text="DES_key_schedule *ks1" mod=""/>
    <arg type="DES_key_schedule" id="ks2" text="DES_key_schedule *ks2" mod=""/>
    <arg type="DES_key_schedule" id="ks3" text="DES_key_schedule *ks3" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_ede3_ofb64_encrypt" text="void DES_ede3_ofb64_encrypt(const unsigned char *in, unsigned char *out,&#10;                            long length, DES_key_schedule *ks1,&#10;                            DES_key_schedule *ks2, DES_key_schedule *ks3,&#10;                            DES_cblock *ivec, int *num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="ks1" text="DES_key_schedule *ks1" mod=""/>
    <arg type="DES_key_schedule" id="ks2" text="DES_key_schedule *ks2" mod=""/>
    <arg type="DES_key_schedule" id="ks3" text="DES_key_schedule *ks3" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DES_enc_read" text="int DES_enc_read(int fd, void *buf, int len, DES_key_schedule *sched,&#10;                 DES_cblock *iv)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="int" id="fd" text="int fd" mod=""/>
    <arg type="void" id="buf" text="void *buf" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="DES_key_schedule" id="sched" text="DES_key_schedule *sched" mod=""/>
    <arg type="DES_cblock" id="iv" text="DES_cblock *iv" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DES_enc_write" text="int DES_enc_write(int fd, const void *buf, int len, DES_key_schedule *sched,&#10;                  DES_cblock *iv)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="int" id="fd" text="int fd" mod=""/>
    <arg type="const void" id="buf" text="const void *buf" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="DES_key_schedule" id="sched" text="DES_key_schedule *sched" mod=""/>
    <arg type="DES_cblock" id="iv" text="DES_cblock *iv" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="DES_fcrypt" text="char *DES_fcrypt(const char *buf, const char *salt, char *ret)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const char" id="buf" text="const char *buf" mod=""/>
    <arg type="const char" id="salt" text="const char *salt" mod=""/>
    <arg type="char" id="ret" text="char *ret" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="DES_crypt" text="char *DES_crypt(const char *buf, const char *salt)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const char" id="buf" text="const char *buf" mod=""/>
    <arg type="const char" id="salt" text="const char *salt" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_ofb_encrypt" text="void DES_ofb_encrypt(const unsigned char *in, unsigned char *out, int numbits,&#10;                     long length, DES_key_schedule *schedule,&#10;                     DES_cblock *ivec)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="numbits" text="int numbits" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_pcbc_encrypt" text="void DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,&#10;                      long length, DES_key_schedule *schedule,&#10;                      DES_cblock *ivec, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="input" text="const unsigned char *input" mod=""/>
    <arg type="unsigned char" id="output" text="unsigned char *output" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned int" id="DES_quad_cksum" text="unsigned int &#10;# 219 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h&quot;&#10;        DES_quad_cksum(const unsigned char *input, DES_cblock output[],&#10;                        long length, int out_count, DES_cblock *seed)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="input" text="const unsigned char *input" mod=""/>
    <arg type="DES_cblock" id="output" text="DES_cblock output[]" mod="output[]"/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="int" id="out_count" text="int out_count" mod=""/>
    <arg type="DES_cblock" id="seed" text="DES_cblock *seed" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DES_random_key" text="int DES_random_key(DES_cblock *ret)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="DES_cblock" id="ret" text="DES_cblock *ret" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_set_odd_parity" text="void DES_set_odd_parity(DES_cblock *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="DES_cblock" id="key" text="DES_cblock *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DES_check_key_parity" text="int DES_check_key_parity(const_DES_cblock *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const_DES_cblock" id="key" text="const_DES_cblock *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DES_is_weak_key" text="int DES_is_weak_key(const_DES_cblock *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const_DES_cblock" id="key" text="const_DES_cblock *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DES_set_key" text="int DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const_DES_cblock" id="key" text="const_DES_cblock *key" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DES_key_sched" text="int DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const_DES_cblock" id="key" text="const_DES_cblock *key" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DES_set_key_checked" text="int DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const_DES_cblock" id="key" text="const_DES_cblock *key" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_set_key_unchecked" text="void DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const_DES_cblock" id="key" text="const_DES_cblock *key" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_string_to_key" text="void DES_string_to_key(const char *str, DES_cblock *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="DES_cblock" id="key" text="DES_cblock *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_string_to_2keys" text="void DES_string_to_2keys(const char *str, DES_cblock *key1, DES_cblock *key2)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="DES_cblock" id="key1" text="DES_cblock *key1" mod=""/>
    <arg type="DES_cblock" id="key2" text="DES_cblock *key2" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_cfb64_encrypt" text="void DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,&#10;                       long length, DES_key_schedule *schedule,&#10;                       DES_cblock *ivec, int *num, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DES_ofb64_encrypt" text="void DES_ofb64_encrypt(const unsigned char *in, unsigned char *out,&#10;                       long length, DES_key_schedule *schedule,&#10;                       DES_cblock *ivec, int *num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="DES_key_schedule" id="schedule" text="DES_key_schedule *schedule" mod=""/>
    <arg type="DES_cblock" id="ivec" text="DES_cblock *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DES_read_password" text="int DES_read_password(DES_cblock *key, const char *prompt, int verify)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="DES_cblock" id="key" text="DES_cblock *key" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="verify" text="int verify" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DES_read_2passwords" text="int DES_read_2passwords(DES_cblock *key1, DES_cblock *key2,&#10;                        const char *prompt, int verify)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/des.h">
  <args>
    <arg type="DES_cblock" id="key1" text="DES_cblock *key1" mod=""/>
    <arg type="DES_cblock" id="key2" text="DES_cblock *key2" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="verify" text="int verify" mod=""/>
  </args>
</fdecl>

<fdecl type="const char" id="AES_options" text="const char *AES_options(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="AES_set_encrypt_key" text="int AES_set_encrypt_key(const unsigned char *userKey, const int bits,&#10;                        AES_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="userKey" text="const unsigned char *userKey" mod=""/>
    <arg type="const int" id="bits" text="const int bits" mod=""/>
    <arg type="AES_KEY" id="key" text="AES_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="AES_set_decrypt_key" text="int AES_set_decrypt_key(const unsigned char *userKey, const int bits,&#10;                        AES_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="userKey" text="const unsigned char *userKey" mod=""/>
    <arg type="const int" id="bits" text="const int bits" mod=""/>
    <arg type="AES_KEY" id="key" text="AES_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="private_AES_set_encrypt_key" text="int private_AES_set_encrypt_key(const unsigned char *userKey, const int bits,&#10;                                AES_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="userKey" text="const unsigned char *userKey" mod=""/>
    <arg type="const int" id="bits" text="const int bits" mod=""/>
    <arg type="AES_KEY" id="key" text="AES_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="private_AES_set_decrypt_key" text="int private_AES_set_decrypt_key(const unsigned char *userKey, const int bits,&#10;                                AES_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="userKey" text="const unsigned char *userKey" mod=""/>
    <arg type="const int" id="bits" text="const int bits" mod=""/>
    <arg type="AES_KEY" id="key" text="AES_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AES_encrypt" text="void AES_encrypt(const unsigned char *in, unsigned char *out,&#10;                 const AES_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const AES_KEY" id="key" text="const AES_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AES_decrypt" text="void AES_decrypt(const unsigned char *in, unsigned char *out,&#10;                 const AES_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const AES_KEY" id="key" text="const AES_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AES_ecb_encrypt" text="void AES_ecb_encrypt(const unsigned char *in, unsigned char *out,&#10;                     const AES_KEY *key, const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const AES_KEY" id="key" text="const AES_KEY *key" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AES_cbc_encrypt" text="void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,&#10;                     size_t length, const AES_KEY *key,&#10;                     unsigned char *ivec, const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const AES_KEY" id="key" text="const AES_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AES_cfb128_encrypt" text="void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,&#10;                        size_t length, const AES_KEY *key,&#10;                        unsigned char *ivec, int *num, const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const AES_KEY" id="key" text="const AES_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AES_cfb1_encrypt" text="void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,&#10;                      size_t length, const AES_KEY *key,&#10;                      unsigned char *ivec, int *num, const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const AES_KEY" id="key" text="const AES_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AES_cfb8_encrypt" text="void AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,&#10;                      size_t length, const AES_KEY *key,&#10;                      unsigned char *ivec, int *num, const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const AES_KEY" id="key" text="const AES_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AES_ofb128_encrypt" text="void AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,&#10;                        size_t length, const AES_KEY *key,&#10;                        unsigned char *ivec, int *num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const AES_KEY" id="key" text="const AES_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AES_ctr128_encrypt" text="void AES_ctr128_encrypt(const unsigned char *in, unsigned char *out,&#10;                        size_t length, const AES_KEY *key,&#10;                        unsigned char ivec[16],&#10;                        unsigned char ecount_buf[16],&#10;                        unsigned int *num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const AES_KEY" id="key" text="const AES_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="unsigned char" id="ecount_buf" text="unsigned char ecount_buf[16]" mod="ecount_buf[16]"/>
    <arg type="unsigned int" id="num" text="unsigned int *num" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AES_ige_encrypt" text="void AES_ige_encrypt(const unsigned char *in, unsigned char *out,&#10;                     size_t length, const AES_KEY *key,&#10;                     unsigned char *ivec, const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const AES_KEY" id="key" text="const AES_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AES_bi_ige_encrypt" text="void AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,&#10;                        size_t length, const AES_KEY *key,&#10;                        const AES_KEY *key2, const unsigned char *ivec,&#10;                        const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const AES_KEY" id="key" text="const AES_KEY *key" mod=""/>
    <arg type="const AES_KEY" id="key2" text="const AES_KEY *key2" mod=""/>
    <arg type="const unsigned char" id="ivec" text="const unsigned char *ivec" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="AES_wrap_key" text="int AES_wrap_key(AES_KEY *key, const unsigned char *iv,&#10;                 unsigned char *out,&#10;                 const unsigned char *in, unsigned int inlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="AES_KEY" id="key" text="AES_KEY *key" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned int" id="inlen" text="unsigned int inlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="AES_unwrap_key" text="int AES_unwrap_key(AES_KEY *key, const unsigned char *iv,&#10;                   unsigned char *out,&#10;                   const unsigned char *in, unsigned int inlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/aes.h">
  <args>
    <arg type="AES_KEY" id="key" text="AES_KEY *key" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned int" id="inlen" text="unsigned int inlen" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="RC2_set_key" text="void RC2_set_key(RC2_KEY *key, int len, const unsigned char *data, int bits)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rc2.h">
  <args>
    <arg type="RC2_KEY" id="key" text="RC2_KEY *key" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
    <arg type="int" id="bits" text="int bits" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RC2_ecb_encrypt" text="void RC2_ecb_encrypt(const unsigned char *in, unsigned char *out,&#10;                     RC2_KEY *key, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rc2.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="RC2_KEY" id="key" text="RC2_KEY *key" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RC2_encrypt" text="void RC2_encrypt(unsigned long *data, RC2_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rc2.h">
  <args>
    <arg type="unsigned long" id="data" text="unsigned long *data" mod=""/>
    <arg type="RC2_KEY" id="key" text="RC2_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RC2_decrypt" text="void RC2_decrypt(unsigned long *data, RC2_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rc2.h">
  <args>
    <arg type="unsigned long" id="data" text="unsigned long *data" mod=""/>
    <arg type="RC2_KEY" id="key" text="RC2_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RC2_cbc_encrypt" text="void RC2_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,&#10;                     RC2_KEY *ks, unsigned char *iv, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rc2.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="RC2_KEY" id="ks" text="RC2_KEY *ks" mod=""/>
    <arg type="unsigned char" id="iv" text="unsigned char *iv" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RC2_cfb64_encrypt" text="void RC2_cfb64_encrypt(const unsigned char *in, unsigned char *out,&#10;                       long length, RC2_KEY *schedule, unsigned char *ivec,&#10;                       int *num, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rc2.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="RC2_KEY" id="schedule" text="RC2_KEY *schedule" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RC2_ofb64_encrypt" text="void RC2_ofb64_encrypt(const unsigned char *in, unsigned char *out,&#10;                       long length, RC2_KEY *schedule, unsigned char *ivec,&#10;                       int *num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rc2.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="RC2_KEY" id="schedule" text="RC2_KEY *schedule" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
  </args>
</fdecl>

<fdecl type="const char" id="RC4_options" text="const char *RC4_options(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rc4.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RC4_set_key" text="void RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rc4.h">
  <args>
    <arg type="RC4_KEY" id="key" text="RC4_KEY *key" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="private_RC4_set_key" text="void private_RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rc4.h">
  <args>
    <arg type="RC4_KEY" id="key" text="RC4_KEY *key" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RC4" text="void RC4(RC4_KEY *key, size_t len, const unsigned char *indata,&#10;         unsigned char *outdata)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rc4.h">
  <args>
    <arg type="RC4_KEY" id="key" text="RC4_KEY *key" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const unsigned char" id="indata" text="const unsigned char *indata" mod=""/>
    <arg type="unsigned char" id="outdata" text="unsigned char *outdata" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="BF_set_key" text="void BF_set_key(BF_KEY *key, int len, const unsigned char *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/blowfish.h">
  <args>
    <arg type="BF_KEY" id="key" text="BF_KEY *key" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BF_encrypt" text="void BF_encrypt(unsigned int *data, const BF_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/blowfish.h">
  <args>
    <arg type="unsigned int" id="data" text="unsigned int *data" mod=""/>
    <arg type="const BF_KEY" id="key" text="const BF_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BF_decrypt" text="void BF_decrypt(unsigned int *data, const BF_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/blowfish.h">
  <args>
    <arg type="unsigned int" id="data" text="unsigned int *data" mod=""/>
    <arg type="const BF_KEY" id="key" text="const BF_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BF_ecb_encrypt" text="void BF_ecb_encrypt(const unsigned char *in, unsigned char *out,&#10;                    const BF_KEY *key, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/blowfish.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const BF_KEY" id="key" text="const BF_KEY *key" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BF_cbc_encrypt" text="void BF_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,&#10;                    const BF_KEY *schedule, unsigned char *ivec, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/blowfish.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="const BF_KEY" id="schedule" text="const BF_KEY *schedule" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BF_cfb64_encrypt" text="void BF_cfb64_encrypt(const unsigned char *in, unsigned char *out,&#10;                      long length, const BF_KEY *schedule,&#10;                      unsigned char *ivec, int *num, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/blowfish.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="const BF_KEY" id="schedule" text="const BF_KEY *schedule" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BF_ofb64_encrypt" text="void BF_ofb64_encrypt(const unsigned char *in, unsigned char *out,&#10;                      long length, const BF_KEY *schedule,&#10;                      unsigned char *ivec, int *num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/blowfish.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="const BF_KEY" id="schedule" text="const BF_KEY *schedule" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="BF_options" text="const char *BF_options(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/blowfish.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="CAST_set_key" text="void CAST_set_key(CAST_KEY *key, int len, const unsigned char *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cast.h">
  <args>
    <arg type="CAST_KEY" id="key" text="CAST_KEY *key" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CAST_ecb_encrypt" text="void CAST_ecb_encrypt(const unsigned char *in, unsigned char *out,&#10;                      const CAST_KEY *key, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cast.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const CAST_KEY" id="key" text="const CAST_KEY *key" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CAST_encrypt" text="void CAST_encrypt(unsigned int *data, const CAST_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cast.h">
  <args>
    <arg type="unsigned int" id="data" text="unsigned int *data" mod=""/>
    <arg type="const CAST_KEY" id="key" text="const CAST_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CAST_decrypt" text="void CAST_decrypt(unsigned int *data, const CAST_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cast.h">
  <args>
    <arg type="unsigned int" id="data" text="unsigned int *data" mod=""/>
    <arg type="const CAST_KEY" id="key" text="const CAST_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CAST_cbc_encrypt" text="void CAST_cbc_encrypt(const unsigned char *in, unsigned char *out,&#10;                      long length, const CAST_KEY *ks, unsigned char *iv,&#10;                      int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cast.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="const CAST_KEY" id="ks" text="const CAST_KEY *ks" mod=""/>
    <arg type="unsigned char" id="iv" text="unsigned char *iv" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CAST_cfb64_encrypt" text="void CAST_cfb64_encrypt(const unsigned char *in, unsigned char *out,&#10;                        long length, const CAST_KEY *schedule,&#10;                        unsigned char *ivec, int *num, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cast.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="const CAST_KEY" id="schedule" text="const CAST_KEY *schedule" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CAST_ofb64_encrypt" text="void CAST_ofb64_encrypt(const unsigned char *in, unsigned char *out,&#10;                        long length, const CAST_KEY *schedule,&#10;                        unsigned char *ivec, int *num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cast.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="const CAST_KEY" id="schedule" text="const CAST_KEY *schedule" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="Camellia_set_key" text="int Camellia_set_key(const unsigned char *userKey, const int bits,&#10;                     CAMELLIA_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/camellia.h">
  <args>
    <arg type="const unsigned char" id="userKey" text="const unsigned char *userKey" mod=""/>
    <arg type="const int" id="bits" text="const int bits" mod=""/>
    <arg type="CAMELLIA_KEY" id="key" text="CAMELLIA_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="Camellia_encrypt" text="void Camellia_encrypt(const unsigned char *in, unsigned char *out,&#10;                      const CAMELLIA_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/camellia.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const CAMELLIA_KEY" id="key" text="const CAMELLIA_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="Camellia_decrypt" text="void Camellia_decrypt(const unsigned char *in, unsigned char *out,&#10;                      const CAMELLIA_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/camellia.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const CAMELLIA_KEY" id="key" text="const CAMELLIA_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="Camellia_ecb_encrypt" text="void Camellia_ecb_encrypt(const unsigned char *in, unsigned char *out,&#10;                          const CAMELLIA_KEY *key, const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/camellia.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const CAMELLIA_KEY" id="key" text="const CAMELLIA_KEY *key" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="Camellia_cbc_encrypt" text="void Camellia_cbc_encrypt(const unsigned char *in, unsigned char *out,&#10;                          size_t length, const CAMELLIA_KEY *key,&#10;                          unsigned char *ivec, const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/camellia.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const CAMELLIA_KEY" id="key" text="const CAMELLIA_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="Camellia_cfb128_encrypt" text="void Camellia_cfb128_encrypt(const unsigned char *in, unsigned char *out,&#10;                             size_t length, const CAMELLIA_KEY *key,&#10;                             unsigned char *ivec, int *num, const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/camellia.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const CAMELLIA_KEY" id="key" text="const CAMELLIA_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="Camellia_cfb1_encrypt" text="void Camellia_cfb1_encrypt(const unsigned char *in, unsigned char *out,&#10;                           size_t length, const CAMELLIA_KEY *key,&#10;                           unsigned char *ivec, int *num, const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/camellia.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const CAMELLIA_KEY" id="key" text="const CAMELLIA_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="Camellia_cfb8_encrypt" text="void Camellia_cfb8_encrypt(const unsigned char *in, unsigned char *out,&#10;                           size_t length, const CAMELLIA_KEY *key,&#10;                           unsigned char *ivec, int *num, const int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/camellia.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const CAMELLIA_KEY" id="key" text="const CAMELLIA_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="const int" id="enc" text="const int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="Camellia_ofb128_encrypt" text="void Camellia_ofb128_encrypt(const unsigned char *in, unsigned char *out,&#10;                             size_t length, const CAMELLIA_KEY *key,&#10;                             unsigned char *ivec, int *num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/camellia.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const CAMELLIA_KEY" id="key" text="const CAMELLIA_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char *ivec" mod=""/>
    <arg type="int" id="num" text="int *num" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="Camellia_ctr128_encrypt" text="void Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,&#10;                             size_t length, const CAMELLIA_KEY *key,&#10;                             unsigned char ivec[16],&#10;                             unsigned char ecount_buf[16],&#10;                             unsigned int *num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/camellia.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const CAMELLIA_KEY" id="key" text="const CAMELLIA_KEY *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="unsigned char" id="ecount_buf" text="unsigned char ecount_buf[16]" mod="ecount_buf[16]"/>
    <arg type="unsigned int" id="num" text="unsigned int *num" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="block128_f" text="typedef void (*block128_f) (const unsigned char in[16],&#10;                            unsigned char out[16], const void *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char in[16]" mod="in[16]"/>
    <arg type="unsigned char" id="out" text="unsigned char out[16]" mod="out[16]"/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="cbc128_f" text="typedef void (*cbc128_f) (const unsigned char *in, unsigned char *out,&#10;                          size_t len, const void *key,&#10;                          unsigned char ivec[16], int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ctr128_f" text="typedef void (*ctr128_f) (const unsigned char *in, unsigned char *out,&#10;                          size_t blocks, const void *key,&#10;                          const unsigned char ivec[16])" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="blocks" text="size_t blocks" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="const unsigned char" id="ivec" text="const unsigned char ivec[16]" mod="ivec[16]"/>
  </args>
</fdecl>
<fdecl type="void" id="ccm128_f" text="typedef void (*ccm128_f) (const unsigned char *in, unsigned char *out,&#10;                          size_t blocks, const void *key,&#10;                          const unsigned char ivec[16],&#10;                          unsigned char cmac[16])" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="blocks" text="size_t blocks" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="const unsigned char" id="ivec" text="const unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="unsigned char" id="cmac" text="unsigned char cmac[16]" mod="cmac[16]"/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_cbc128_encrypt" text="void CRYPTO_cbc128_encrypt(const unsigned char *in, unsigned char *out,&#10;                           size_t len, const void *key,&#10;                           unsigned char ivec[16], block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_cbc128_decrypt" text="void CRYPTO_cbc128_decrypt(const unsigned char *in, unsigned char *out,&#10;                           size_t len, const void *key,&#10;                           unsigned char ivec[16], block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_ctr128_encrypt" text="void CRYPTO_ctr128_encrypt(const unsigned char *in, unsigned char *out,&#10;                           size_t len, const void *key,&#10;                           unsigned char ivec[16],&#10;                           unsigned char ecount_buf[16], unsigned int *num,&#10;                           block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="unsigned char" id="ecount_buf" text="unsigned char ecount_buf[16]" mod="ecount_buf[16]"/>
    <arg type="unsigned int" id="num" text="unsigned int *num" mod=""/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_ctr128_encrypt_ctr32" text="void CRYPTO_ctr128_encrypt_ctr32(const unsigned char *in, unsigned char *out,&#10;                                 size_t len, const void *key,&#10;                                 unsigned char ivec[16],&#10;                                 unsigned char ecount_buf[16],&#10;                                 unsigned int *num, ctr128_f ctr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="unsigned char" id="ecount_buf" text="unsigned char ecount_buf[16]" mod="ecount_buf[16]"/>
    <arg type="unsigned int" id="num" text="unsigned int *num" mod=""/>
    <arg type="ctr128_f" id="ctr" text="ctr128_f ctr" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_ofb128_encrypt" text="void CRYPTO_ofb128_encrypt(const unsigned char *in, unsigned char *out,&#10;                           size_t len, const void *key,&#10;                           unsigned char ivec[16], int *num,&#10;                           block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_cfb128_encrypt" text="void CRYPTO_cfb128_encrypt(const unsigned char *in, unsigned char *out,&#10;                           size_t len, const void *key,&#10;                           unsigned char ivec[16], int *num,&#10;                           int enc, block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_cfb128_8_encrypt" text="void CRYPTO_cfb128_8_encrypt(const unsigned char *in, unsigned char *out,&#10;                             size_t length, const void *key,&#10;                             unsigned char ivec[16], int *num,&#10;                             int enc, block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="length" text="size_t length" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_cfb128_1_encrypt" text="void CRYPTO_cfb128_1_encrypt(const unsigned char *in, unsigned char *out,&#10;                             size_t bits, const void *key,&#10;                             unsigned char ivec[16], int *num,&#10;                             int enc, block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="bits" text="size_t bits" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="CRYPTO_cts128_encrypt_block" text="size_t CRYPTO_cts128_encrypt_block(const unsigned char *in,&#10;                                   unsigned char *out, size_t len,&#10;                                   const void *key, unsigned char ivec[16],&#10;                                   block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="CRYPTO_cts128_encrypt" text="size_t CRYPTO_cts128_encrypt(const unsigned char *in, unsigned char *out,&#10;                             size_t len, const void *key,&#10;                             unsigned char ivec[16], cbc128_f cbc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="cbc128_f" id="cbc" text="cbc128_f cbc" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="CRYPTO_cts128_decrypt_block" text="size_t CRYPTO_cts128_decrypt_block(const unsigned char *in,&#10;                                   unsigned char *out, size_t len,&#10;                                   const void *key, unsigned char ivec[16],&#10;                                   block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="CRYPTO_cts128_decrypt" text="size_t CRYPTO_cts128_decrypt(const unsigned char *in, unsigned char *out,&#10;                             size_t len, const void *key,&#10;                             unsigned char ivec[16], cbc128_f cbc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="cbc128_f" id="cbc" text="cbc128_f cbc" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="CRYPTO_nistcts128_encrypt_block" text="size_t CRYPTO_nistcts128_encrypt_block(const unsigned char *in,&#10;                                       unsigned char *out, size_t len,&#10;                                       const void *key,&#10;                                       unsigned char ivec[16],&#10;                                       block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="CRYPTO_nistcts128_encrypt" text="size_t CRYPTO_nistcts128_encrypt(const unsigned char *in, unsigned char *out,&#10;                                 size_t len, const void *key,&#10;                                 unsigned char ivec[16], cbc128_f cbc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="cbc128_f" id="cbc" text="cbc128_f cbc" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="CRYPTO_nistcts128_decrypt_block" text="size_t CRYPTO_nistcts128_decrypt_block(const unsigned char *in,&#10;                                       unsigned char *out, size_t len,&#10;                                       const void *key,&#10;                                       unsigned char ivec[16],&#10;                                       block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="CRYPTO_nistcts128_decrypt" text="size_t CRYPTO_nistcts128_decrypt(const unsigned char *in, unsigned char *out,&#10;                                 size_t len, const void *key,&#10;                                 unsigned char ivec[16], cbc128_f cbc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="cbc128_f" id="cbc" text="cbc128_f cbc" mod=""/>
  </args>
</fdecl>
<fdecl type="GCM128_CONTEXT" id="CRYPTO_gcm128_new" text="GCM128_CONTEXT *CRYPTO_gcm128_new(void *key, block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="void" id="key" text="void *key" mod=""/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_gcm128_init" text="void CRYPTO_gcm128_init(GCM128_CONTEXT *ctx, void *key, block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="GCM128_CONTEXT" id="ctx" text="GCM128_CONTEXT *ctx" mod=""/>
    <arg type="void" id="key" text="void *key" mod=""/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_gcm128_setiv" text="void CRYPTO_gcm128_setiv(GCM128_CONTEXT *ctx, const unsigned char *iv,&#10;                         size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="GCM128_CONTEXT" id="ctx" text="GCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_gcm128_aad" text="int CRYPTO_gcm128_aad(GCM128_CONTEXT *ctx, const unsigned char *aad,&#10;                      size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="GCM128_CONTEXT" id="ctx" text="GCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="aad" text="const unsigned char *aad" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_gcm128_encrypt" text="int CRYPTO_gcm128_encrypt(GCM128_CONTEXT *ctx,&#10;                          const unsigned char *in, unsigned char *out,&#10;                          size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="GCM128_CONTEXT" id="ctx" text="GCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_gcm128_decrypt" text="int CRYPTO_gcm128_decrypt(GCM128_CONTEXT *ctx,&#10;                          const unsigned char *in, unsigned char *out,&#10;                          size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="GCM128_CONTEXT" id="ctx" text="GCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_gcm128_encrypt_ctr32" text="int CRYPTO_gcm128_encrypt_ctr32(GCM128_CONTEXT *ctx,&#10;                                const unsigned char *in, unsigned char *out,&#10;                                size_t len, ctr128_f stream)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="GCM128_CONTEXT" id="ctx" text="GCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="ctr128_f" id="stream" text="ctr128_f stream" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_gcm128_decrypt_ctr32" text="int CRYPTO_gcm128_decrypt_ctr32(GCM128_CONTEXT *ctx,&#10;                                const unsigned char *in, unsigned char *out,&#10;                                size_t len, ctr128_f stream)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="GCM128_CONTEXT" id="ctx" text="GCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="ctr128_f" id="stream" text="ctr128_f stream" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_gcm128_finish" text="int CRYPTO_gcm128_finish(GCM128_CONTEXT *ctx, const unsigned char *tag,&#10;                         size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="GCM128_CONTEXT" id="ctx" text="GCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="tag" text="const unsigned char *tag" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_gcm128_tag" text="void CRYPTO_gcm128_tag(GCM128_CONTEXT *ctx, unsigned char *tag, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="GCM128_CONTEXT" id="ctx" text="GCM128_CONTEXT *ctx" mod=""/>
    <arg type="unsigned char" id="tag" text="unsigned char *tag" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_gcm128_release" text="void CRYPTO_gcm128_release(GCM128_CONTEXT *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="GCM128_CONTEXT" id="ctx" text="GCM128_CONTEXT *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_ccm128_init" text="void CRYPTO_ccm128_init(CCM128_CONTEXT *ctx,&#10;                        unsigned int M, unsigned int L, void *key,&#10;                        block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="CCM128_CONTEXT" id="ctx" text="CCM128_CONTEXT *ctx" mod=""/>
    <arg type="unsigned int" id="M" text="unsigned int M" mod=""/>
    <arg type="unsigned int" id="L" text="unsigned int L" mod=""/>
    <arg type="void" id="key" text="void *key" mod=""/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_ccm128_setiv" text="int CRYPTO_ccm128_setiv(CCM128_CONTEXT *ctx, const unsigned char *nonce,&#10;                        size_t nlen, size_t mlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="CCM128_CONTEXT" id="ctx" text="CCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="nonce" text="const unsigned char *nonce" mod=""/>
    <arg type="size_t" id="nlen" text="size_t nlen" mod=""/>
    <arg type="size_t" id="mlen" text="size_t mlen" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRYPTO_ccm128_aad" text="void CRYPTO_ccm128_aad(CCM128_CONTEXT *ctx, const unsigned char *aad,&#10;                       size_t alen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="CCM128_CONTEXT" id="ctx" text="CCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="aad" text="const unsigned char *aad" mod=""/>
    <arg type="size_t" id="alen" text="size_t alen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_ccm128_encrypt" text="int CRYPTO_ccm128_encrypt(CCM128_CONTEXT *ctx, const unsigned char *inp,&#10;                          unsigned char *out, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="CCM128_CONTEXT" id="ctx" text="CCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="inp" text="const unsigned char *inp" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_ccm128_decrypt" text="int CRYPTO_ccm128_decrypt(CCM128_CONTEXT *ctx, const unsigned char *inp,&#10;                          unsigned char *out, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="CCM128_CONTEXT" id="ctx" text="CCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="inp" text="const unsigned char *inp" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_ccm128_encrypt_ccm64" text="int CRYPTO_ccm128_encrypt_ccm64(CCM128_CONTEXT *ctx, const unsigned char *inp,&#10;                                unsigned char *out, size_t len,&#10;                                ccm128_f stream)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="CCM128_CONTEXT" id="ctx" text="CCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="inp" text="const unsigned char *inp" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="ccm128_f" id="stream" text="ccm128_f stream" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_ccm128_decrypt_ccm64" text="int CRYPTO_ccm128_decrypt_ccm64(CCM128_CONTEXT *ctx, const unsigned char *inp,&#10;                                unsigned char *out, size_t len,&#10;                                ccm128_f stream)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="CCM128_CONTEXT" id="ctx" text="CCM128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="inp" text="const unsigned char *inp" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="ccm128_f" id="stream" text="ccm128_f stream" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="CRYPTO_ccm128_tag" text="size_t CRYPTO_ccm128_tag(CCM128_CONTEXT *ctx, unsigned char *tag, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="CCM128_CONTEXT" id="ctx" text="CCM128_CONTEXT *ctx" mod=""/>
    <arg type="unsigned char" id="tag" text="unsigned char *tag" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CRYPTO_xts128_encrypt" text="int CRYPTO_xts128_encrypt(const XTS128_CONTEXT *ctx,&#10;                          const unsigned char iv[16],&#10;                          const unsigned char *inp, unsigned char *out,&#10;                          size_t len, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="const XTS128_CONTEXT" id="ctx" text="const XTS128_CONTEXT *ctx" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char iv[16]" mod="iv[16]"/>
    <arg type="const unsigned char" id="inp" text="const unsigned char *inp" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="CRYPTO_128_wrap" text="size_t CRYPTO_128_wrap(void *key, const unsigned char *iv,&#10;                       unsigned char *out,&#10;                       const unsigned char *in, size_t inlen,&#10;                       block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="void" id="key" text="void *key" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="size_t" id="inlen" text="size_t inlen" mod=""/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="CRYPTO_128_unwrap" text="size_t CRYPTO_128_unwrap(void *key, const unsigned char *iv,&#10;                         unsigned char *out,&#10;                         const unsigned char *in, size_t inlen,&#10;                         block128_f block)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/modes.h">
  <args>
    <arg type="void" id="key" text="void *key" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="size_t" id="inlen" text="size_t inlen" mod=""/>
    <arg type="block128_f" id="block" text="block128_f block" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="HMAC_CTX_init" text="void HMAC_CTX_init(HMAC_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/hmac.h">
  <args>
    <arg type="HMAC_CTX" id="ctx" text="HMAC_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="HMAC_CTX_cleanup" text="void HMAC_CTX_cleanup(HMAC_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/hmac.h">
  <args>
    <arg type="HMAC_CTX" id="ctx" text="HMAC_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="HMAC_Init" text="int HMAC_Init(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/hmac.h">
  <args>
    <arg type="HMAC_CTX" id="ctx" text="HMAC_CTX *ctx" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="HMAC_Init_ex" text="int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,&#10;                 const EVP_MD *md, ENGINE *impl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/hmac.h">
  <args>
    <arg type="HMAC_CTX" id="ctx" text="HMAC_CTX *ctx" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="ENGINE" id="impl" text="ENGINE *impl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="HMAC_Update" text="int HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/hmac.h">
  <args>
    <arg type="HMAC_CTX" id="ctx" text="HMAC_CTX *ctx" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="HMAC_Final" text="int HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/hmac.h">
  <args>
    <arg type="HMAC_CTX" id="ctx" text="HMAC_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="len" text="unsigned int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="HMAC" text="unsigned char *HMAC(const EVP_MD *evp_md, const void *key, int key_len,&#10;                    const unsigned char *d, size_t n, unsigned char *md,&#10;                    unsigned int *md_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/hmac.h">
  <args>
    <arg type="const EVP_MD" id="evp_md" text="const EVP_MD *evp_md" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="int" id="key_len" text="int key_len" mod=""/>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="md_len" text="unsigned int *md_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="HMAC_CTX_copy" text="int HMAC_CTX_copy(HMAC_CTX *dctx, HMAC_CTX *sctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/hmac.h">
  <args>
    <arg type="HMAC_CTX" id="dctx" text="HMAC_CTX *dctx" mod=""/>
    <arg type="HMAC_CTX" id="sctx" text="HMAC_CTX *sctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="HMAC_CTX_set_flags" text="void HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/hmac.h">
  <args>
    <arg type="HMAC_CTX" id="ctx" text="HMAC_CTX *ctx" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="SEED_set_key" text="void SEED_set_key(const unsigned char rawkey[16],&#10;                  SEED_KEY_SCHEDULE *ks)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/seed.h">
  <args>
    <arg type="const unsigned char" id="rawkey" text="const unsigned char rawkey[16]" mod="rawkey[16]"/>
    <arg type="SEED_KEY_SCHEDULE" id="ks" text="SEED_KEY_SCHEDULE *ks" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SEED_encrypt" text="void SEED_encrypt(const unsigned char s[16],&#10;                  unsigned char d[16],&#10;                  const SEED_KEY_SCHEDULE *ks)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/seed.h">
  <args>
    <arg type="const unsigned char" id="s" text="const unsigned char s[16]" mod="s[16]"/>
    <arg type="unsigned char" id="d" text="unsigned char d[16]" mod="d[16]"/>
    <arg type="const SEED_KEY_SCHEDULE" id="ks" text="const SEED_KEY_SCHEDULE *ks" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SEED_decrypt" text="void SEED_decrypt(const unsigned char s[16],&#10;                  unsigned char d[16],&#10;                  const SEED_KEY_SCHEDULE *ks)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/seed.h">
  <args>
    <arg type="const unsigned char" id="s" text="const unsigned char s[16]" mod="s[16]"/>
    <arg type="unsigned char" id="d" text="unsigned char d[16]" mod="d[16]"/>
    <arg type="const SEED_KEY_SCHEDULE" id="ks" text="const SEED_KEY_SCHEDULE *ks" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SEED_ecb_encrypt" text="void SEED_ecb_encrypt(const unsigned char *in, unsigned char *out,&#10;                      const SEED_KEY_SCHEDULE *ks, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/seed.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const SEED_KEY_SCHEDULE" id="ks" text="const SEED_KEY_SCHEDULE *ks" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SEED_cbc_encrypt" text="void SEED_cbc_encrypt(const unsigned char *in, unsigned char *out, size_t len,&#10;                      const SEED_KEY_SCHEDULE *ks,&#10;                      unsigned char ivec[16], int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/seed.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const SEED_KEY_SCHEDULE" id="ks" text="const SEED_KEY_SCHEDULE *ks" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SEED_cfb128_encrypt" text="void SEED_cfb128_encrypt(const unsigned char *in, unsigned char *out,&#10;                         size_t len, const SEED_KEY_SCHEDULE *ks,&#10;                         unsigned char ivec[16], int *num,&#10;                         int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/seed.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const SEED_KEY_SCHEDULE" id="ks" text="const SEED_KEY_SCHEDULE *ks" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="int" id="num" text="int *num" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SEED_ofb128_encrypt" text="void SEED_ofb128_encrypt(const unsigned char *in, unsigned char *out,&#10;                         size_t len, const SEED_KEY_SCHEDULE *ks,&#10;                         unsigned char ivec[16], int *num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/seed.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="const SEED_KEY_SCHEDULE" id="ks" text="const SEED_KEY_SCHEDULE *ks" mod=""/>
    <arg type="unsigned char" id="ivec" text="unsigned char ivec[16]" mod="ivec[16]"/>
    <arg type="int" id="num" text="int *num" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="ANON0" text="struct bn_gencb_st {&#10;    unsigned int ver;&#10;    void *arg;&#10;    union {&#10;&#10;        void (*cb_1) (int, int, void *);&#10;&#10;        int (*cb_2) (int, int, BN_GENCB *);&#10;    } cb;&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="int" id="ANON1" text="int" mod=""/>
    <arg type="int" id="ANON2" text="int" mod=""/>
    <arg type="void" id="ANON3" text="void *" mod=""/>
    <arg type="int" id="ANON4" text="int" mod=""/>
    <arg type="int" id="ANON5" text="int" mod=""/>
    <arg type="BN_GENCB" id="ANON6" text="BN_GENCB *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GENCB_call" text="int BN_GENCB_call(BN_GENCB *cb, int a, int b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
    <arg type="int" id="a" text="int a" mod=""/>
    <arg type="int" id="b" text="int b" mod=""/>
  </args>
</fdecl>
<fdecl type="const BIGNUM" id="BN_value_one" text="const BIGNUM *BN_value_one(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="BN_options" text="char *BN_options(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BN_CTX" id="BN_CTX_new" text="BN_CTX *BN_CTX_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON9" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_CTX_init" text="void BN_CTX_init(BN_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_CTX" id="c" text="BN_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_CTX_free" text="void BN_CTX_free(BN_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_CTX" id="c" text="BN_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_CTX_start" text="void BN_CTX_start(BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="BN_CTX_get" text="BIGNUM *BN_CTX_get(BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_CTX_end" text="void BN_CTX_end(BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_rand" text="int BN_rand(BIGNUM *rnd, int bits, int top, int bottom)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="rnd" text="BIGNUM *rnd" mod=""/>
    <arg type="int" id="bits" text="int bits" mod=""/>
    <arg type="int" id="top" text="int top" mod=""/>
    <arg type="int" id="bottom" text="int bottom" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_pseudo_rand" text="int BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="rnd" text="BIGNUM *rnd" mod=""/>
    <arg type="int" id="bits" text="int bits" mod=""/>
    <arg type="int" id="top" text="int top" mod=""/>
    <arg type="int" id="bottom" text="int bottom" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_rand_range" text="int BN_rand_range(BIGNUM *rnd, const BIGNUM *range)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="rnd" text="BIGNUM *rnd" mod=""/>
    <arg type="const BIGNUM" id="range" text="const BIGNUM *range" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_pseudo_rand_range" text="int BN_pseudo_rand_range(BIGNUM *rnd, const BIGNUM *range)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="rnd" text="BIGNUM *rnd" mod=""/>
    <arg type="const BIGNUM" id="range" text="const BIGNUM *range" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_num_bits" text="int BN_num_bits(const BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_num_bits_word" text="int BN_num_bits_word(unsigned long)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="unsigned long" id="ANON10" text="unsigned long" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="BN_new" text="BIGNUM *BN_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON11" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_init" text="void BN_init(BIGNUM *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="ANON12" text="BIGNUM *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_clear_free" text="void BN_clear_free(BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="BN_copy" text="BIGNUM *BN_copy(BIGNUM *a, const BIGNUM *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_swap" text="void BN_swap(BIGNUM *a, BIGNUM *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="BIGNUM" id="b" text="BIGNUM *b" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="BN_bin2bn" text="BIGNUM *BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const unsigned char" id="s" text="const unsigned char *s" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="BIGNUM" id="ret" text="BIGNUM *ret" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_bn2bin" text="int BN_bn2bin(const BIGNUM *a, unsigned char *to)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="BN_mpi2bn" text="BIGNUM *BN_mpi2bn(const unsigned char *s, int len, BIGNUM *ret)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const unsigned char" id="s" text="const unsigned char *s" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="BIGNUM" id="ret" text="BIGNUM *ret" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_bn2mpi" text="int BN_bn2mpi(const BIGNUM *a, unsigned char *to)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_sub" text="int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_usub" text="int BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_uadd" text="int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_add" text="int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mul" text="int BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_sqr" text="int BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_set_negative" text="void BN_set_negative(BIGNUM *b, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="b" text="BIGNUM *b" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_div" text="int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d,&#10;           BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="dv" text="BIGNUM *dv" mod=""/>
    <arg type="BIGNUM" id="rem" text="BIGNUM *rem" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="const BIGNUM" id="d" text="const BIGNUM *d" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_nnmod" text="int BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="const BIGNUM" id="d" text="const BIGNUM *d" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_add" text="int BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,&#10;               BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_add_quick" text="int BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,&#10;                     const BIGNUM *m)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_sub" text="int BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,&#10;               BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_sub_quick" text="int BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,&#10;                     const BIGNUM *m)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_mul" text="int BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,&#10;               BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_sqr" text="int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_lshift1" text="int BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_lshift1_quick" text="int BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_lshift" text="int BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,&#10;                  BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_lshift_quick" text="int BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="BN_mod_word" text="unsigned long BN_mod_word(const BIGNUM *a, unsigned long w)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="unsigned long" id="w" text="unsigned long w" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="BN_div_word" text="unsigned long BN_div_word(BIGNUM *a, unsigned long w)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="unsigned long" id="w" text="unsigned long w" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mul_word" text="int BN_mul_word(BIGNUM *a, unsigned long w)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="unsigned long" id="w" text="unsigned long w" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_add_word" text="int BN_add_word(BIGNUM *a, unsigned long w)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="unsigned long" id="w" text="unsigned long w" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_sub_word" text="int BN_sub_word(BIGNUM *a, unsigned long w)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="unsigned long" id="w" text="unsigned long w" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_set_word" text="int BN_set_word(BIGNUM *a, unsigned long w)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="unsigned long" id="w" text="unsigned long w" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="BN_get_word" text="unsigned long BN_get_word(const BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_cmp" text="int BN_cmp(const BIGNUM *a, const BIGNUM *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_free" text="void BN_free(BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_is_bit_set" text="int BN_is_bit_set(const BIGNUM *a, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_lshift" text="int BN_lshift(BIGNUM *r, const BIGNUM *a, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_lshift1" text="int BN_lshift1(BIGNUM *r, const BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_exp" text="int BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_exp" text="int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,&#10;               const BIGNUM *m, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_exp_mont" text="int BN_mod_exp_mont(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,&#10;                    const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BN_MONT_CTX" id="m_ctx" text="BN_MONT_CTX *m_ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_exp_mont_consttime" text="int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,&#10;                              const BIGNUM *m, BN_CTX *ctx,&#10;                              BN_MONT_CTX *in_mont)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="rr" text="BIGNUM *rr" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BN_MONT_CTX" id="in_mont" text="BN_MONT_CTX *in_mont" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_exp_mont_word" text="int BN_mod_exp_mont_word(BIGNUM *r, unsigned long a, const BIGNUM *p,&#10;                         const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="unsigned long" id="a" text="unsigned long a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BN_MONT_CTX" id="m_ctx" text="BN_MONT_CTX *m_ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_exp2_mont" text="int BN_mod_exp2_mont(BIGNUM *r, const BIGNUM *a1, const BIGNUM *p1,&#10;                     const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m,&#10;                     BN_CTX *ctx, BN_MONT_CTX *m_ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a1" text="const BIGNUM *a1" mod=""/>
    <arg type="const BIGNUM" id="p1" text="const BIGNUM *p1" mod=""/>
    <arg type="const BIGNUM" id="a2" text="const BIGNUM *a2" mod=""/>
    <arg type="const BIGNUM" id="p2" text="const BIGNUM *p2" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BN_MONT_CTX" id="m_ctx" text="BN_MONT_CTX *m_ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_exp_simple" text="int BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,&#10;                      const BIGNUM *m, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mask_bits" text="int BN_mask_bits(BIGNUM *a, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_print_fp" text="int BN_print_fp(FILE *fp, const BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_print" text="int BN_print(void *fp, const BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="fp" text="void *fp" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_reciprocal" text="int BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_rshift" text="int BN_rshift(BIGNUM *r, const BIGNUM *a, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_rshift1" text="int BN_rshift1(BIGNUM *r, const BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_clear" text="void BN_clear(BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="BN_dup" text="BIGNUM *BN_dup(const BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_ucmp" text="int BN_ucmp(const BIGNUM *a, const BIGNUM *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_set_bit" text="int BN_set_bit(BIGNUM *a, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_clear_bit" text="int BN_clear_bit(BIGNUM *a, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="BN_bn2hex" text="char *BN_bn2hex(const BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="BN_bn2dec" text="char *BN_bn2dec(const BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_hex2bn" text="int BN_hex2bn(BIGNUM **a, const char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM **a" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_dec2bn" text="int BN_dec2bn(BIGNUM **a, const char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM **a" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_asc2bn" text="int BN_asc2bn(BIGNUM **a, const char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM **a" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_gcd" text="int BN_gcd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_kronecker" text="int BN_kronecker(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="BN_mod_inverse" text="BIGNUM *BN_mod_inverse(BIGNUM *ret,&#10;                       const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="ret" text="BIGNUM *ret" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="n" text="const BIGNUM *n" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="BN_mod_sqrt" text="BIGNUM *BN_mod_sqrt(BIGNUM *ret,&#10;                    const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="ret" text="BIGNUM *ret" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="n" text="const BIGNUM *n" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_consttime_swap" text="void BN_consttime_swap(unsigned long swap, BIGNUM *a, BIGNUM *b, int nwords)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="unsigned long" id="swap" text="unsigned long swap" mod=""/>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="BIGNUM" id="b" text="BIGNUM *b" mod=""/>
    <arg type="int" id="nwords" text="int nwords" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="BN_generate_prime" text="BIGNUM *BN_generate_prime(BIGNUM *ret, int bits, int safe,&#10;                          const BIGNUM *add, const BIGNUM *rem,&#10;                          void (*callback) (int, int, void *), void *cb_arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="ret" text="BIGNUM *ret" mod=""/>
    <arg type="int" id="bits" text="int bits" mod=""/>
    <arg type="int" id="safe" text="int safe" mod=""/>
    <arg type="const BIGNUM" id="add" text="const BIGNUM *add" mod=""/>
    <arg type="const BIGNUM" id="rem" text="const BIGNUM *rem" mod=""/>
    <arg type="void" id="callback" text="void (*callback) (int, int, void *)" mod=""/>
    <arg type="void" id="cb_arg" text="void *cb_arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_is_prime" text="int BN_is_prime(const BIGNUM *p, int nchecks,&#10;                void (*callback) (int, int, void *),&#10;                BN_CTX *ctx, void *cb_arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="int" id="nchecks" text="int nchecks" mod=""/>
    <arg type="void" id="callback" text="void (*callback) (int, int, void *)" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="void" id="cb_arg" text="void *cb_arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_is_prime_fasttest" text="int BN_is_prime_fasttest(const BIGNUM *p, int nchecks,&#10;                         void (*callback) (int, int, void *), BN_CTX *ctx,&#10;                         void *cb_arg, int do_trial_division)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="int" id="nchecks" text="int nchecks" mod=""/>
    <arg type="void" id="callback" text="void (*callback) (int, int, void *)" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="void" id="cb_arg" text="void *cb_arg" mod=""/>
    <arg type="int" id="do_trial_division" text="int do_trial_division" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_generate_prime_ex" text="int BN_generate_prime_ex(BIGNUM *ret, int bits, int safe, const BIGNUM *add,&#10;                         const BIGNUM *rem, BN_GENCB *cb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="ret" text="BIGNUM *ret" mod=""/>
    <arg type="int" id="bits" text="int bits" mod=""/>
    <arg type="int" id="safe" text="int safe" mod=""/>
    <arg type="const BIGNUM" id="add" text="const BIGNUM *add" mod=""/>
    <arg type="const BIGNUM" id="rem" text="const BIGNUM *rem" mod=""/>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_is_prime_ex" text="int BN_is_prime_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx, BN_GENCB *cb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="int" id="nchecks" text="int nchecks" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_is_prime_fasttest_ex" text="int BN_is_prime_fasttest_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx,&#10;                            int do_trial_division, BN_GENCB *cb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="int" id="nchecks" text="int nchecks" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="int" id="do_trial_division" text="int do_trial_division" mod=""/>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_X931_generate_Xpq" text="int BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="Xp" text="BIGNUM *Xp" mod=""/>
    <arg type="BIGNUM" id="Xq" text="BIGNUM *Xq" mod=""/>
    <arg type="int" id="nbits" text="int nbits" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_X931_derive_prime_ex" text="int BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,&#10;                            const BIGNUM *Xp, const BIGNUM *Xp1,&#10;                            const BIGNUM *Xp2, const BIGNUM *e, BN_CTX *ctx,&#10;                            BN_GENCB *cb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="p" text="BIGNUM *p" mod=""/>
    <arg type="BIGNUM" id="p1" text="BIGNUM *p1" mod=""/>
    <arg type="BIGNUM" id="p2" text="BIGNUM *p2" mod=""/>
    <arg type="const BIGNUM" id="Xp" text="const BIGNUM *Xp" mod=""/>
    <arg type="const BIGNUM" id="Xp1" text="const BIGNUM *Xp1" mod=""/>
    <arg type="const BIGNUM" id="Xp2" text="const BIGNUM *Xp2" mod=""/>
    <arg type="const BIGNUM" id="e" text="const BIGNUM *e" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_X931_generate_prime_ex" text="int BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp1,&#10;                              BIGNUM *Xp2, const BIGNUM *Xp, const BIGNUM *e,&#10;                              BN_CTX *ctx, BN_GENCB *cb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="p" text="BIGNUM *p" mod=""/>
    <arg type="BIGNUM" id="p1" text="BIGNUM *p1" mod=""/>
    <arg type="BIGNUM" id="p2" text="BIGNUM *p2" mod=""/>
    <arg type="BIGNUM" id="Xp1" text="BIGNUM *Xp1" mod=""/>
    <arg type="BIGNUM" id="Xp2" text="BIGNUM *Xp2" mod=""/>
    <arg type="const BIGNUM" id="Xp" text="const BIGNUM *Xp" mod=""/>
    <arg type="const BIGNUM" id="e" text="const BIGNUM *e" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="BN_MONT_CTX" id="BN_MONT_CTX_new" text="BN_MONT_CTX *BN_MONT_CTX_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON13" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_MONT_CTX_init" text="void BN_MONT_CTX_init(BN_MONT_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_MONT_CTX" id="ctx" text="BN_MONT_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_mul_montgomery" text="int BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,&#10;                          BN_MONT_CTX *mont, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="BN_MONT_CTX" id="mont" text="BN_MONT_CTX *mont" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_from_montgomery" text="int BN_from_montgomery(BIGNUM *r, const BIGNUM *a,&#10;                       BN_MONT_CTX *mont, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="BN_MONT_CTX" id="mont" text="BN_MONT_CTX *mont" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_MONT_CTX_free" text="void BN_MONT_CTX_free(BN_MONT_CTX *mont)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_MONT_CTX" id="mont" text="BN_MONT_CTX *mont" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_MONT_CTX_set" text="int BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_MONT_CTX" id="mont" text="BN_MONT_CTX *mont" mod=""/>
    <arg type="const BIGNUM" id="mod" text="const BIGNUM *mod" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="BN_MONT_CTX" id="BN_MONT_CTX_copy" text="BN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_MONT_CTX" id="to" text="BN_MONT_CTX *to" mod=""/>
    <arg type="BN_MONT_CTX" id="from" text="BN_MONT_CTX *from" mod=""/>
  </args>
</fdecl>
<fdecl type="BN_MONT_CTX" id="BN_MONT_CTX_set_locked" text="BN_MONT_CTX *BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, int lock,&#10;                                    const BIGNUM *mod, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_MONT_CTX" id="pmont" text="BN_MONT_CTX **pmont" mod=""/>
    <arg type="int" id="lock" text="int lock" mod=""/>
    <arg type="const BIGNUM" id="mod" text="const BIGNUM *mod" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="BN_BLINDING" id="BN_BLINDING_new" text="BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="A" text="const BIGNUM *A" mod=""/>
    <arg type="const BIGNUM" id="Ai" text="const BIGNUM *Ai" mod=""/>
    <arg type="BIGNUM" id="mod" text="BIGNUM *mod" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_BLINDING_free" text="void BN_BLINDING_free(BN_BLINDING *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_BLINDING" id="b" text="BN_BLINDING *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_BLINDING_update" text="int BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_BLINDING" id="b" text="BN_BLINDING *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_BLINDING_convert" text="int BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="n" text="BIGNUM *n" mod=""/>
    <arg type="BN_BLINDING" id="b" text="BN_BLINDING *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_BLINDING_invert" text="int BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="n" text="BIGNUM *n" mod=""/>
    <arg type="BN_BLINDING" id="b" text="BN_BLINDING *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_BLINDING_convert_ex" text="int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="n" text="BIGNUM *n" mod=""/>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="BN_BLINDING" id="b" text="BN_BLINDING *b" mod=""/>
    <arg type="BN_CTX" id="ANON14" text="BN_CTX *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_BLINDING_invert_ex" text="int BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,&#10;                          BN_CTX *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="n" text="BIGNUM *n" mod=""/>
    <arg type="const BIGNUM" id="r" text="const BIGNUM *r" mod=""/>
    <arg type="BN_BLINDING" id="b" text="BN_BLINDING *b" mod=""/>
    <arg type="BN_CTX" id="ANON15" text="BN_CTX *" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="BN_BLINDING_get_thread_id" text="unsigned long BN_BLINDING_get_thread_id(const BN_BLINDING *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BN_BLINDING" id="ANON16" text="const BN_BLINDING *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_BLINDING_set_thread_id" text="void BN_BLINDING_set_thread_id(BN_BLINDING *, unsigned long)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_BLINDING" id="ANON17" text="BN_BLINDING *" mod=""/>
    <arg type="unsigned long" id="ANON18" text="unsigned long" mod=""/>
  </args>
</fdecl>
<fdecl type="CRYPTO_THREADID" id="BN_BLINDING_thread_id" text="CRYPTO_THREADID *BN_BLINDING_thread_id(BN_BLINDING *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_BLINDING" id="ANON19" text="BN_BLINDING *" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="BN_BLINDING_get_flags" text="unsigned long BN_BLINDING_get_flags(const BN_BLINDING *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BN_BLINDING" id="ANON20" text="const BN_BLINDING *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_BLINDING_set_flags" text="void BN_BLINDING_set_flags(BN_BLINDING *, unsigned long)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_BLINDING" id="ANON21" text="BN_BLINDING *" mod=""/>
    <arg type="unsigned long" id="ANON22" text="unsigned long" mod=""/>
  </args>
</fdecl>
<fdecl type="BN_BLINDING" id="BN_BLINDING_create_param" text="BN_BLINDING *BN_BLINDING_create_param(BN_BLINDING *b,&#10;                                      const BIGNUM *e, BIGNUM *m, BN_CTX *ctx,&#10;                                      int (*bn_mod_exp) (BIGNUM *r,&#10;                                                         const BIGNUM *a,&#10;                                                         const BIGNUM *p,&#10;                                                         const BIGNUM *m,&#10;                                                         BN_CTX *ctx,&#10;                                                         BN_MONT_CTX *m_ctx),&#10;                                      BN_MONT_CTX *m_ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_BLINDING" id="b" text="BN_BLINDING *b" mod=""/>
    <arg type="const BIGNUM" id="e" text="const BIGNUM *e" mod=""/>
    <arg type="BIGNUM" id="m" text="BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="int" id="bn_mod_exp" text="int (*bn_mod_exp) (BIGNUM *r,&#10;                                                         const BIGNUM *a,&#10;                                                         const BIGNUM *p,&#10;                                                         const BIGNUM *m,&#10;                                                         BN_CTX *ctx,&#10;                                                         BN_MONT_CTX *m_ctx)" mod=""/>
    <arg type="BN_MONT_CTX" id="m_ctx" text="BN_MONT_CTX *m_ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_set_params" text="void BN_set_params(int mul, int high, int low, int mont)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="int" id="mul" text="int mul" mod=""/>
    <arg type="int" id="high" text="int high" mod=""/>
    <arg type="int" id="low" text="int low" mod=""/>
    <arg type="int" id="mont" text="int mont" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_get_params" text="int BN_get_params(int which)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="int" id="which" text="int which" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_RECP_CTX_init" text="void BN_RECP_CTX_init(BN_RECP_CTX *recp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_RECP_CTX" id="recp" text="BN_RECP_CTX *recp" mod=""/>
  </args>
</fdecl>
<fdecl type="BN_RECP_CTX" id="BN_RECP_CTX_new" text="BN_RECP_CTX *BN_RECP_CTX_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON23" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BN_RECP_CTX_free" text="void BN_RECP_CTX_free(BN_RECP_CTX *recp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_RECP_CTX" id="recp" text="BN_RECP_CTX *recp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_RECP_CTX_set" text="int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *rdiv, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BN_RECP_CTX" id="recp" text="BN_RECP_CTX *recp" mod=""/>
    <arg type="const BIGNUM" id="rdiv" text="const BIGNUM *rdiv" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_mul_reciprocal" text="int BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,&#10;                          BN_RECP_CTX *recp, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="x" text="const BIGNUM *x" mod=""/>
    <arg type="const BIGNUM" id="y" text="const BIGNUM *y" mod=""/>
    <arg type="BN_RECP_CTX" id="recp" text="BN_RECP_CTX *recp" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_mod_exp_recp" text="int BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,&#10;                    const BIGNUM *m, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_div_recp" text="int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,&#10;                BN_RECP_CTX *recp, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="dv" text="BIGNUM *dv" mod=""/>
    <arg type="BIGNUM" id="rem" text="BIGNUM *rem" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_RECP_CTX" id="recp" text="BN_RECP_CTX *recp" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_add" text="int BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod" text="int BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_mul" text="int BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,&#10;                    const BIGNUM *p, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_sqr" text="int BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_inv" text="int BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_div" text="int BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,&#10;                    const BIGNUM *p, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_exp" text="int BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,&#10;                    const BIGNUM *p, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_sqrt" text="int BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,&#10;                     BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_solve_quad" text="int BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,&#10;                           BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_arr" text="int BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[])" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const int" id="p" text="const int p[]" mod="p[]"/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_mul_arr" text="int BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,&#10;                        const int p[], BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const int" id="p" text="const int p[]" mod="p[]"/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_sqr_arr" text="int BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],&#10;                        BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const int" id="p" text="const int p[]" mod="p[]"/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_inv_arr" text="int BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *b, const int p[],&#10;                        BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const int" id="p" text="const int p[]" mod="p[]"/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_div_arr" text="int BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,&#10;                        const int p[], BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const int" id="p" text="const int p[]" mod="p[]"/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_exp_arr" text="int BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,&#10;                        const int p[], BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="const int" id="p" text="const int p[]" mod="p[]"/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_sqrt_arr" text="int BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a,&#10;                         const int p[], BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const int" id="p" text="const int p[]" mod="p[]"/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_mod_solve_quad_arr" text="int BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a,&#10;                               const int p[], BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const int" id="p" text="const int p[]" mod="p[]"/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_poly2arr" text="int BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="int" id="p" text="int p[]" mod="p[]"/>
    <arg type="int" id="max" text="int max" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_GF2m_arr2poly" text="int BN_GF2m_arr2poly(const int p[], BIGNUM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const int" id="p" text="const int p[]" mod="p[]"/>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_nist_mod_192" text="int BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_nist_mod_224" text="int BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_nist_mod_256" text="int BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_nist_mod_384" text="int BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_nist_mod_521" text="int BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="const BIGNUM" id="BN_get0_nist_prime_192" text="const BIGNUM *BN_get0_nist_prime_192(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON24" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const BIGNUM" id="BN_get0_nist_prime_224" text="const BIGNUM *BN_get0_nist_prime_224(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON25" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const BIGNUM" id="BN_get0_nist_prime_256" text="const BIGNUM *BN_get0_nist_prime_256(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON26" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const BIGNUM" id="BN_get0_nist_prime_384" text="const BIGNUM *BN_get0_nist_prime_384(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON27" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const BIGNUM" id="BN_get0_nist_prime_521" text="const BIGNUM *BN_get0_nist_prime_521(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON28" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="bn_expand2" text="BIGNUM *bn_expand2(BIGNUM *a, int words)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="int" id="words" text="int words" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="bn_dup_expand" text="BIGNUM *bn_dup_expand(const BIGNUM *a, int words)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="int" id="words" text="int words" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="bn_mul_add_words" text="unsigned long bn_mul_add_words(unsigned long *rp, const unsigned long *ap, int num,&#10;                          unsigned long w)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="unsigned long" id="rp" text="unsigned long *rp" mod=""/>
    <arg type="const unsigned long" id="ap" text="const unsigned long *ap" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="unsigned long" id="w" text="unsigned long w" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="bn_mul_words" text="unsigned long bn_mul_words(unsigned long *rp, const unsigned long *ap, int num, unsigned long w)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="unsigned long" id="rp" text="unsigned long *rp" mod=""/>
    <arg type="const unsigned long" id="ap" text="const unsigned long *ap" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="unsigned long" id="w" text="unsigned long w" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="bn_sqr_words" text="void bn_sqr_words(unsigned long *rp, const unsigned long *ap, int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="unsigned long" id="rp" text="unsigned long *rp" mod=""/>
    <arg type="const unsigned long" id="ap" text="const unsigned long *ap" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="bn_div_words" text="unsigned long bn_div_words(unsigned long h, unsigned long l, unsigned long d)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="unsigned long" id="h" text="unsigned long h" mod=""/>
    <arg type="unsigned long" id="l" text="unsigned long l" mod=""/>
    <arg type="unsigned long" id="d" text="unsigned long d" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="bn_add_words" text="unsigned long bn_add_words(unsigned long *rp, const unsigned long *ap, const unsigned long *bp,&#10;                      int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="unsigned long" id="rp" text="unsigned long *rp" mod=""/>
    <arg type="const unsigned long" id="ap" text="const unsigned long *ap" mod=""/>
    <arg type="const unsigned long" id="bp" text="const unsigned long *bp" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="bn_sub_words" text="unsigned long bn_sub_words(unsigned long *rp, const unsigned long *ap, const unsigned long *bp,&#10;                      int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="unsigned long" id="rp" text="unsigned long *rp" mod=""/>
    <arg type="const unsigned long" id="ap" text="const unsigned long *ap" mod=""/>
    <arg type="const unsigned long" id="bp" text="const unsigned long *bp" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="get_rfc2409_prime_768" text="BIGNUM *get_rfc2409_prime_768(BIGNUM *bn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="bn" text="BIGNUM *bn" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="get_rfc2409_prime_1024" text="BIGNUM *get_rfc2409_prime_1024(BIGNUM *bn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="bn" text="BIGNUM *bn" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="get_rfc3526_prime_1536" text="BIGNUM *get_rfc3526_prime_1536(BIGNUM *bn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="bn" text="BIGNUM *bn" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="get_rfc3526_prime_2048" text="BIGNUM *get_rfc3526_prime_2048(BIGNUM *bn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="bn" text="BIGNUM *bn" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="get_rfc3526_prime_3072" text="BIGNUM *get_rfc3526_prime_3072(BIGNUM *bn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="bn" text="BIGNUM *bn" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="get_rfc3526_prime_4096" text="BIGNUM *get_rfc3526_prime_4096(BIGNUM *bn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="bn" text="BIGNUM *bn" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="get_rfc3526_prime_6144" text="BIGNUM *get_rfc3526_prime_6144(BIGNUM *bn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="bn" text="BIGNUM *bn" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="get_rfc3526_prime_8192" text="BIGNUM *get_rfc3526_prime_8192(BIGNUM *bn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="bn" text="BIGNUM *bn" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BN_bntest_rand" text="int BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="BIGNUM" id="rnd" text="BIGNUM *rnd" mod=""/>
    <arg type="int" id="bits" text="int bits" mod=""/>
    <arg type="int" id="top" text="int top" mod=""/>
    <arg type="int" id="bottom" text="int bottom" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_BN_strings" text="void ERR_load_BN_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bn.h">
  <args>
    <arg type="void" id="ANON29" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="const EC_METHOD" id="EC_GFp_simple_method" text="const EC_METHOD *EC_GFp_simple_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EC_METHOD" id="EC_GFp_mont_method" text="const EC_METHOD *EC_GFp_mont_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EC_METHOD" id="EC_GFp_nist_method" text="const EC_METHOD *EC_GFp_nist_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EC_METHOD" id="EC_GFp_nistp224_method" text="const EC_METHOD *EC_GFp_nistp224_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EC_METHOD" id="EC_GFp_nistp256_method" text="const EC_METHOD *EC_GFp_nistp256_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EC_METHOD" id="EC_GFp_nistp521_method" text="const EC_METHOD *EC_GFp_nistp521_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EC_METHOD" id="EC_GF2m_simple_method" text="const EC_METHOD *EC_GF2m_simple_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_GROUP" id="EC_GROUP_new" text="EC_GROUP *EC_GROUP_new(const EC_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_METHOD" id="meth" text="const EC_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_GROUP_free" text="void EC_GROUP_free(EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="group" text="EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_GROUP_clear_free" text="void EC_GROUP_clear_free(EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="group" text="EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_copy" text="int EC_GROUP_copy(EC_GROUP *dst, const EC_GROUP *src)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="dst" text="EC_GROUP *dst" mod=""/>
    <arg type="const EC_GROUP" id="src" text="const EC_GROUP *src" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_GROUP" id="EC_GROUP_dup" text="EC_GROUP *EC_GROUP_dup(const EC_GROUP *src)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="src" text="const EC_GROUP *src" mod=""/>
  </args>
</fdecl>
<fdecl type="const EC_METHOD" id="EC_GROUP_method_of" text="const EC_METHOD *EC_GROUP_method_of(const EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_METHOD_get_field_type" text="int EC_METHOD_get_field_type(const EC_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_METHOD" id="meth" text="const EC_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_set_generator" text="int EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,&#10;                           const BIGNUM *order, const BIGNUM *cofactor)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="group" text="EC_GROUP *group" mod=""/>
    <arg type="const EC_POINT" id="generator" text="const EC_POINT *generator" mod=""/>
    <arg type="const BIGNUM" id="order" text="const BIGNUM *order" mod=""/>
    <arg type="const BIGNUM" id="cofactor" text="const BIGNUM *cofactor" mod=""/>
  </args>
</fdecl>
<fdecl type="const EC_POINT" id="EC_GROUP_get0_generator" text="const EC_POINT *EC_GROUP_get0_generator(const EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="BN_MONT_CTX" id="EC_GROUP_get_mont_data" text="BN_MONT_CTX *EC_GROUP_get_mont_data(const EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_get_order" text="int EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="BIGNUM" id="order" text="BIGNUM *order" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_get_cofactor" text="int EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor,&#10;                          BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="BIGNUM" id="cofactor" text="BIGNUM *cofactor" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_GROUP_set_curve_name" text="void EC_GROUP_set_curve_name(EC_GROUP *group, int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="group" text="EC_GROUP *group" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_get_curve_name" text="int EC_GROUP_get_curve_name(const EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_GROUP_set_asn1_flag" text="void EC_GROUP_set_asn1_flag(EC_GROUP *group, int flag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="group" text="EC_GROUP *group" mod=""/>
    <arg type="int" id="flag" text="int flag" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_get_asn1_flag" text="int EC_GROUP_get_asn1_flag(const EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_GROUP_set_point_conversion_form" text="void EC_GROUP_set_point_conversion_form(EC_GROUP *group,&#10;                                        point_conversion_form_t form)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="group" text="EC_GROUP *group" mod=""/>
    <arg type="point_conversion_form_t" id="form" text="point_conversion_form_t form" mod=""/>
  </args>
</fdecl>
<fdecl type="point_conversion_form_t" id="EC_GROUP_get_point_conversion_form" text="point_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="ANON7" text="const EC_GROUP *" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="EC_GROUP_get0_seed" text="unsigned char *EC_GROUP_get0_seed(const EC_GROUP *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="x" text="const EC_GROUP *x" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="EC_GROUP_get_seed_len" text="size_t EC_GROUP_get_seed_len(const EC_GROUP *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="ANON8" text="const EC_GROUP *" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="EC_GROUP_set_seed" text="size_t EC_GROUP_set_seed(EC_GROUP *, const unsigned char *, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="ANON9" text="EC_GROUP *" mod=""/>
    <arg type="const unsigned char" id="ANON10" text="const unsigned char *" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_set_curve_GFp" text="int EC_GROUP_set_curve_GFp(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,&#10;                           const BIGNUM *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="group" text="EC_GROUP *group" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_get_curve_GFp" text="int EC_GROUP_get_curve_GFp(const EC_GROUP *group, BIGNUM *p, BIGNUM *a,&#10;                           BIGNUM *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="BIGNUM" id="p" text="BIGNUM *p" mod=""/>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="BIGNUM" id="b" text="BIGNUM *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_set_curve_GF2m" text="int EC_GROUP_set_curve_GF2m(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,&#10;                            const BIGNUM *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="group" text="EC_GROUP *group" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_get_curve_GF2m" text="int EC_GROUP_get_curve_GF2m(const EC_GROUP *group, BIGNUM *p, BIGNUM *a,&#10;                            BIGNUM *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="BIGNUM" id="p" text="BIGNUM *p" mod=""/>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="BIGNUM" id="b" text="BIGNUM *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_get_degree" text="int EC_GROUP_get_degree(const EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_check" text="int EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_check_discriminant" text="int EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_cmp" text="int EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="a" text="const EC_GROUP *a" mod=""/>
    <arg type="const EC_GROUP" id="b" text="const EC_GROUP *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_GROUP" id="EC_GROUP_new_curve_GFp" text="EC_GROUP *EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a,&#10;                                 const BIGNUM *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_GROUP" id="EC_GROUP_new_curve_GF2m" text="EC_GROUP *EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a,&#10;                                  const BIGNUM *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="b" text="const BIGNUM *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_GROUP" id="EC_GROUP_new_by_curve_name" text="EC_GROUP *EC_GROUP_new_by_curve_name(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="EC_get_builtin_curves" text="size_t EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_builtin_curve" id="r" text="EC_builtin_curve *r" mod=""/>
    <arg type="size_t" id="nitems" text="size_t nitems" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="EC_curve_nid2nist" text="const char *EC_curve_nid2nist(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_curve_nist2nid" text="int EC_curve_nist2nid(const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_POINT" id="EC_POINT_new" text="EC_POINT *EC_POINT_new(const EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_POINT_free" text="void EC_POINT_free(EC_POINT *point)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_POINT" id="point" text="EC_POINT *point" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_POINT_clear_free" text="void EC_POINT_clear_free(EC_POINT *point)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_POINT" id="point" text="EC_POINT *point" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_copy" text="int EC_POINT_copy(EC_POINT *dst, const EC_POINT *src)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_POINT" id="dst" text="EC_POINT *dst" mod=""/>
    <arg type="const EC_POINT" id="src" text="const EC_POINT *src" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_POINT" id="EC_POINT_dup" text="EC_POINT *EC_POINT_dup(const EC_POINT *src, const EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_POINT" id="src" text="const EC_POINT *src" mod=""/>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="const EC_METHOD" id="EC_POINT_method_of" text="const EC_METHOD *EC_POINT_method_of(const EC_POINT *point)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_POINT" id="point" text="const EC_POINT *point" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_set_to_infinity" text="int EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="point" text="EC_POINT *point" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_set_Jprojective_coordinates_GFp" text="int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group,&#10;                                             EC_POINT *p, const BIGNUM *x,&#10;                                             const BIGNUM *y, const BIGNUM *z,&#10;                                             BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="p" text="EC_POINT *p" mod=""/>
    <arg type="const BIGNUM" id="x" text="const BIGNUM *x" mod=""/>
    <arg type="const BIGNUM" id="y" text="const BIGNUM *y" mod=""/>
    <arg type="const BIGNUM" id="z" text="const BIGNUM *z" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_get_Jprojective_coordinates_GFp" text="int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group,&#10;                                             const EC_POINT *p, BIGNUM *x,&#10;                                             BIGNUM *y, BIGNUM *z,&#10;                                             BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="const EC_POINT" id="p" text="const EC_POINT *p" mod=""/>
    <arg type="BIGNUM" id="x" text="BIGNUM *x" mod=""/>
    <arg type="BIGNUM" id="y" text="BIGNUM *y" mod=""/>
    <arg type="BIGNUM" id="z" text="BIGNUM *z" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_set_affine_coordinates_GFp" text="int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *group, EC_POINT *p,&#10;                                        const BIGNUM *x, const BIGNUM *y,&#10;                                        BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="p" text="EC_POINT *p" mod=""/>
    <arg type="const BIGNUM" id="x" text="const BIGNUM *x" mod=""/>
    <arg type="const BIGNUM" id="y" text="const BIGNUM *y" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_get_affine_coordinates_GFp" text="int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *group,&#10;                                        const EC_POINT *p, BIGNUM *x,&#10;                                        BIGNUM *y, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="const EC_POINT" id="p" text="const EC_POINT *p" mod=""/>
    <arg type="BIGNUM" id="x" text="BIGNUM *x" mod=""/>
    <arg type="BIGNUM" id="y" text="BIGNUM *y" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_set_compressed_coordinates_GFp" text="int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *group,&#10;                                            EC_POINT *p, const BIGNUM *x,&#10;                                            int y_bit, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="p" text="EC_POINT *p" mod=""/>
    <arg type="const BIGNUM" id="x" text="const BIGNUM *x" mod=""/>
    <arg type="int" id="y_bit" text="int y_bit" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_set_affine_coordinates_GF2m" text="int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *group, EC_POINT *p,&#10;                                         const BIGNUM *x, const BIGNUM *y,&#10;                                         BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="p" text="EC_POINT *p" mod=""/>
    <arg type="const BIGNUM" id="x" text="const BIGNUM *x" mod=""/>
    <arg type="const BIGNUM" id="y" text="const BIGNUM *y" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_get_affine_coordinates_GF2m" text="int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *group,&#10;                                         const EC_POINT *p, BIGNUM *x,&#10;                                         BIGNUM *y, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="const EC_POINT" id="p" text="const EC_POINT *p" mod=""/>
    <arg type="BIGNUM" id="x" text="BIGNUM *x" mod=""/>
    <arg type="BIGNUM" id="y" text="BIGNUM *y" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_set_compressed_coordinates_GF2m" text="int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *group,&#10;                                             EC_POINT *p, const BIGNUM *x,&#10;                                             int y_bit, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="p" text="EC_POINT *p" mod=""/>
    <arg type="const BIGNUM" id="x" text="const BIGNUM *x" mod=""/>
    <arg type="int" id="y_bit" text="int y_bit" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="EC_POINT_point2oct" text="size_t EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *p,&#10;                          point_conversion_form_t form,&#10;                          unsigned char *buf, size_t len, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="const EC_POINT" id="p" text="const EC_POINT *p" mod=""/>
    <arg type="point_conversion_form_t" id="form" text="point_conversion_form_t form" mod=""/>
    <arg type="unsigned char" id="buf" text="unsigned char *buf" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_oct2point" text="int EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *p,&#10;                       const unsigned char *buf, size_t len, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="p" text="EC_POINT *p" mod=""/>
    <arg type="const unsigned char" id="buf" text="const unsigned char *buf" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="EC_POINT_point2bn" text="BIGNUM *EC_POINT_point2bn(const EC_GROUP *, const EC_POINT *,&#10;                          point_conversion_form_t form, BIGNUM *, BN_CTX *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="ANON11" text="const EC_GROUP *" mod=""/>
    <arg type="const EC_POINT" id="ANON12" text="const EC_POINT *" mod=""/>
    <arg type="point_conversion_form_t" id="form" text="point_conversion_form_t form" mod=""/>
    <arg type="BIGNUM" id="ANON13" text="BIGNUM *" mod=""/>
    <arg type="BN_CTX" id="ANON14" text="BN_CTX *" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_POINT" id="EC_POINT_bn2point" text="EC_POINT *EC_POINT_bn2point(const EC_GROUP *, const BIGNUM *,&#10;                            EC_POINT *, BN_CTX *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="ANON15" text="const EC_GROUP *" mod=""/>
    <arg type="const BIGNUM" id="ANON16" text="const BIGNUM *" mod=""/>
    <arg type="EC_POINT" id="ANON17" text="EC_POINT *" mod=""/>
    <arg type="BN_CTX" id="ANON18" text="BN_CTX *" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="EC_POINT_point2hex" text="char *EC_POINT_point2hex(const EC_GROUP *, const EC_POINT *,&#10;                         point_conversion_form_t form, BN_CTX *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="ANON19" text="const EC_GROUP *" mod=""/>
    <arg type="const EC_POINT" id="ANON20" text="const EC_POINT *" mod=""/>
    <arg type="point_conversion_form_t" id="form" text="point_conversion_form_t form" mod=""/>
    <arg type="BN_CTX" id="ANON21" text="BN_CTX *" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_POINT" id="EC_POINT_hex2point" text="EC_POINT *EC_POINT_hex2point(const EC_GROUP *, const char *,&#10;                             EC_POINT *, BN_CTX *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="ANON22" text="const EC_GROUP *" mod=""/>
    <arg type="const char" id="ANON23" text="const char *" mod=""/>
    <arg type="EC_POINT" id="ANON24" text="EC_POINT *" mod=""/>
    <arg type="BN_CTX" id="ANON25" text="BN_CTX *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_add" text="int EC_POINT_add(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,&#10;                 const EC_POINT *b, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="r" text="EC_POINT *r" mod=""/>
    <arg type="const EC_POINT" id="a" text="const EC_POINT *a" mod=""/>
    <arg type="const EC_POINT" id="b" text="const EC_POINT *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_dbl" text="int EC_POINT_dbl(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,&#10;                 BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="r" text="EC_POINT *r" mod=""/>
    <arg type="const EC_POINT" id="a" text="const EC_POINT *a" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_invert" text="int EC_POINT_invert(const EC_GROUP *group, EC_POINT *a, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="a" text="EC_POINT *a" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_is_at_infinity" text="int EC_POINT_is_at_infinity(const EC_GROUP *group, const EC_POINT *p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="const EC_POINT" id="p" text="const EC_POINT *p" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_is_on_curve" text="int EC_POINT_is_on_curve(const EC_GROUP *group, const EC_POINT *point,&#10;                         BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="const EC_POINT" id="point" text="const EC_POINT *point" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_cmp" text="int EC_POINT_cmp(const EC_GROUP *group, const EC_POINT *a, const EC_POINT *b,&#10;                 BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="const EC_POINT" id="a" text="const EC_POINT *a" mod=""/>
    <arg type="const EC_POINT" id="b" text="const EC_POINT *b" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_make_affine" text="int EC_POINT_make_affine(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="point" text="EC_POINT *point" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINTs_make_affine" text="int EC_POINTs_make_affine(const EC_GROUP *group, size_t num,&#10;                          EC_POINT *points[], BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="size_t" id="num" text="size_t num" mod=""/>
    <arg type="EC_POINT" id="points" text="EC_POINT *points[]" mod="points[]"/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINTs_mul" text="int EC_POINTs_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,&#10;                  size_t num, const EC_POINT *p[], const BIGNUM *m[],&#10;                  BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="r" text="EC_POINT *r" mod=""/>
    <arg type="const BIGNUM" id="n" text="const BIGNUM *n" mod=""/>
    <arg type="size_t" id="num" text="size_t num" mod=""/>
    <arg type="const EC_POINT" id="p" text="const EC_POINT *p[]" mod="p[]"/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m[]" mod="m[]"/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_POINT_mul" text="int EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,&#10;                 const EC_POINT *q, const BIGNUM *m, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
    <arg type="EC_POINT" id="r" text="EC_POINT *r" mod=""/>
    <arg type="const BIGNUM" id="n" text="const BIGNUM *n" mod=""/>
    <arg type="const EC_POINT" id="q" text="const EC_POINT *q" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_precompute_mult" text="int EC_GROUP_precompute_mult(EC_GROUP *group, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="group" text="EC_GROUP *group" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_have_precompute_mult" text="int EC_GROUP_have_precompute_mult(const EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_get_basis_type" text="int EC_GROUP_get_basis_type(const EC_GROUP *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="ANON26" text="const EC_GROUP *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_get_trinomial_basis" text="int EC_GROUP_get_trinomial_basis(const EC_GROUP *, unsigned int *k)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="ANON27" text="const EC_GROUP *" mod=""/>
    <arg type="unsigned int" id="k" text="unsigned int *k" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_GROUP_get_pentanomial_basis" text="int EC_GROUP_get_pentanomial_basis(const EC_GROUP *, unsigned int *k1,&#10;                                   unsigned int *k2, unsigned int *k3)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="ANON28" text="const EC_GROUP *" mod=""/>
    <arg type="unsigned int" id="k1" text="unsigned int *k1" mod=""/>
    <arg type="unsigned int" id="k2" text="unsigned int *k2" mod=""/>
    <arg type="unsigned int" id="k3" text="unsigned int *k3" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_GROUP" id="d2i_ECPKParameters" text="EC_GROUP *d2i_ECPKParameters(EC_GROUP **, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_GROUP" id="ANON29" text="EC_GROUP **" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ECPKParameters" text="int i2d_ECPKParameters(const EC_GROUP *, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_GROUP" id="ANON30" text="const EC_GROUP *" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECPKParameters_print" text="int ECPKParameters_print(BIO *bp, const EC_GROUP *x, int off)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const EC_GROUP" id="x" text="const EC_GROUP *x" mod=""/>
    <arg type="int" id="off" text="int off" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECPKParameters_print_fp" text="int ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const EC_GROUP" id="x" text="const EC_GROUP *x" mod=""/>
    <arg type="int" id="off" text="int off" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="EC_KEY_new" text="EC_KEY *EC_KEY_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="void" id="ANON31" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_KEY_get_flags" text="int EC_KEY_get_flags(const EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_KEY" id="key" text="const EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_KEY_set_flags" text="void EC_KEY_set_flags(EC_KEY *key, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_KEY_clear_flags" text="void EC_KEY_clear_flags(EC_KEY *key, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="EC_KEY_new_by_curve_name" text="EC_KEY *EC_KEY_new_by_curve_name(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_KEY_free" text="void EC_KEY_free(EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="EC_KEY_copy" text="EC_KEY *EC_KEY_copy(EC_KEY *dst, const EC_KEY *src)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="dst" text="EC_KEY *dst" mod=""/>
    <arg type="const EC_KEY" id="src" text="const EC_KEY *src" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="EC_KEY_dup" text="EC_KEY *EC_KEY_dup(const EC_KEY *src)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_KEY" id="src" text="const EC_KEY *src" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_KEY_up_ref" text="int EC_KEY_up_ref(EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="const EC_GROUP" id="EC_KEY_get0_group" text="const EC_GROUP *EC_KEY_get0_group(const EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_KEY" id="key" text="const EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_KEY_set_group" text="int EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="const EC_GROUP" id="group" text="const EC_GROUP *group" mod=""/>
  </args>
</fdecl>
<fdecl type="const BIGNUM" id="EC_KEY_get0_private_key" text="const BIGNUM *EC_KEY_get0_private_key(const EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_KEY" id="key" text="const EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_KEY_set_private_key" text="int EC_KEY_set_private_key(EC_KEY *key, const BIGNUM *prv)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="const BIGNUM" id="prv" text="const BIGNUM *prv" mod=""/>
  </args>
</fdecl>
<fdecl type="const EC_POINT" id="EC_KEY_get0_public_key" text="const EC_POINT *EC_KEY_get0_public_key(const EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_KEY" id="key" text="const EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_KEY_set_public_key" text="int EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="const EC_POINT" id="pub" text="const EC_POINT *pub" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned" id="EC_KEY_get_enc_flags" text="unsigned EC_KEY_get_enc_flags(const EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_KEY" id="key" text="const EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_KEY_set_enc_flags" text="void EC_KEY_set_enc_flags(EC_KEY *eckey, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="point_conversion_form_t" id="EC_KEY_get_conv_form" text="point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_KEY" id="key" text="const EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_KEY_set_conv_form" text="void EC_KEY_set_conv_form(EC_KEY *eckey, point_conversion_form_t cform)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
    <arg type="point_conversion_form_t" id="cform" text="point_conversion_form_t cform" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_KEY_get_key_method_data" text="void *EC_KEY_get_key_method_data(EC_KEY *key,&#10;                                 void *(*dup_func) (void *),&#10;                                 void (*free_func) (void *),&#10;                                 void (*clear_free_func) (void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="void" id="dup_func" text="void *(*dup_func) (void *)" mod=""/>
    <arg type="void" id="free_func" text="void (*free_func) (void *)" mod=""/>
    <arg type="void" id="clear_free_func" text="void (*clear_free_func) (void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_KEY_insert_key_method_data" text="void *EC_KEY_insert_key_method_data(EC_KEY *key, void *data,&#10;                                    void *(*dup_func) (void *),&#10;                                    void (*free_func) (void *),&#10;                                    void (*clear_free_func) (void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
    <arg type="void" id="dup_func" text="void *(*dup_func) (void *)" mod=""/>
    <arg type="void" id="free_func" text="void (*free_func) (void *)" mod=""/>
    <arg type="void" id="clear_free_func" text="void (*clear_free_func) (void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EC_KEY_set_asn1_flag" text="void EC_KEY_set_asn1_flag(EC_KEY *eckey, int asn1_flag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
    <arg type="int" id="asn1_flag" text="int asn1_flag" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_KEY_precompute_mult" text="int EC_KEY_precompute_mult(EC_KEY *key, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_KEY_generate_key" text="int EC_KEY_generate_key(EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_KEY_check_key" text="int EC_KEY_check_key(const EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="const EC_KEY" id="key" text="const EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_KEY_set_public_key_affine_coordinates" text="int EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x,&#10;                                             BIGNUM *y)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="BIGNUM" id="x" text="BIGNUM *x" mod=""/>
    <arg type="BIGNUM" id="y" text="BIGNUM *y" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="d2i_ECPrivateKey" text="EC_KEY *d2i_ECPrivateKey(EC_KEY **key, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY **key" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ECPrivateKey" text="int i2d_ECPrivateKey(EC_KEY *key, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="d2i_ECParameters" text="EC_KEY *d2i_ECParameters(EC_KEY **key, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY **key" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ECParameters" text="int i2d_ECParameters(EC_KEY *key, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="o2i_ECPublicKey" text="EC_KEY *o2i_ECPublicKey(EC_KEY **key, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY **key" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2o_ECPublicKey" text="int i2o_ECPublicKey(EC_KEY *key, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="EC_KEY" id="key" text="EC_KEY *key" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECParameters_print" text="int ECParameters_print(BIO *bp, const EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const EC_KEY" id="key" text="const EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_KEY_print" text="int EC_KEY_print(BIO *bp, const EC_KEY *key, int off)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const EC_KEY" id="key" text="const EC_KEY *key" mod=""/>
    <arg type="int" id="off" text="int off" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECParameters_print_fp" text="int ECParameters_print_fp(FILE *fp, const EC_KEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const EC_KEY" id="key" text="const EC_KEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EC_KEY_print_fp" text="int EC_KEY_print_fp(FILE *fp, const EC_KEY *key, int off)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const EC_KEY" id="key" text="const EC_KEY *key" mod=""/>
    <arg type="int" id="off" text="int off" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_EC_strings" text="void ERR_load_EC_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ec.h">
  <args>
    <arg type="void" id="ANON32" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="ANON0" text="struct rsa_meth_st {&#10;    const char *name;&#10;    int (*rsa_pub_enc) (int flen, const unsigned char *from,&#10;                        unsigned char *to, RSA *rsa, int padding);&#10;    int (*rsa_pub_dec) (int flen, const unsigned char *from,&#10;                        unsigned char *to, RSA *rsa, int padding);&#10;    int (*rsa_priv_enc) (int flen, const unsigned char *from,&#10;                         unsigned char *to, RSA *rsa, int padding);&#10;    int (*rsa_priv_dec) (int flen, const unsigned char *from,&#10;                         unsigned char *to, RSA *rsa, int padding);&#10;&#10;    int (*rsa_mod_exp) (BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx);&#10;&#10;    int (*bn_mod_exp) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,&#10;                       const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);&#10;&#10;    int (*init) (RSA *rsa);&#10;&#10;    int (*finish) (RSA *rsa);&#10;&#10;    int flags;&#10;&#10;    char *app_data;&#10;# 116 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;    int (*rsa_sign) (int type,&#10;                     const unsigned char *m, unsigned int m_length,&#10;                     unsigned char *sigret, unsigned int *siglen,&#10;                     const RSA *rsa);&#10;    int (*rsa_verify) (int dtype, const unsigned char *m,&#10;                       unsigned int m_length, const unsigned char *sigbuf,&#10;                       unsigned int siglen, const RSA *rsa);&#10;&#10;&#10;&#10;&#10;&#10;&#10;    int (*rsa_keygen) (RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="int" id="flen" text="int flen" mod=""/>
    <arg type="const unsigned char" id="from" text="const unsigned char *from" mod=""/>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="int" id="padding" text="int padding" mod=""/>
    <arg type="int" id="flen" text="int flen" mod=""/>
    <arg type="const unsigned char" id="from" text="const unsigned char *from" mod=""/>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="int" id="padding" text="int padding" mod=""/>
    <arg type="int" id="flen" text="int flen" mod=""/>
    <arg type="const unsigned char" id="from" text="const unsigned char *from" mod=""/>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="int" id="padding" text="int padding" mod=""/>
    <arg type="int" id="flen" text="int flen" mod=""/>
    <arg type="const unsigned char" id="from" text="const unsigned char *from" mod=""/>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="int" id="padding" text="int padding" mod=""/>
    <arg type="BIGNUM" id="r0" text="BIGNUM *r0" mod=""/>
    <arg type="const BIGNUM" id="I" text="const BIGNUM *I" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BN_MONT_CTX" id="m_ctx" text="BN_MONT_CTX *m_ctx" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="m" text="const unsigned char *m" mod=""/>
    <arg type="unsigned int" id="m_length" text="unsigned int m_length" mod=""/>
    <arg type="unsigned char" id="sigret" text="unsigned char *sigret" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int *siglen" mod=""/>
    <arg type="const RSA" id="rsa" text="const RSA *rsa" mod=""/>
    <arg type="int" id="dtype" text="int dtype" mod=""/>
    <arg type="const unsigned char" id="m" text="const unsigned char *m" mod=""/>
    <arg type="unsigned int" id="m_length" text="unsigned int m_length" mod=""/>
    <arg type="const unsigned char" id="sigbuf" text="const unsigned char *sigbuf" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int siglen" mod=""/>
    <arg type="const RSA" id="rsa" text="const RSA *rsa" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="int" id="bits" text="int bits" mod=""/>
    <arg type="BIGNUM" id="e" text="BIGNUM *e" mod=""/>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="RSA_new" text="RSA *RSA_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="RSA_new_method" text="RSA *RSA_new_method(ENGINE *engine)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="ENGINE" id="engine" text="ENGINE *engine" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_size" text="int RSA_size(const RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="const RSA" id="rsa" text="const RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="RSA_generate_key" text="RSA *RSA_generate_key(int bits, unsigned long e, void&#10;                       (*callback) (int, int, void *), void *cb_arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="int" id="bits" text="int bits" mod=""/>
    <arg type="unsigned long" id="e" text="unsigned long e" mod=""/>
    <arg type="void" id="callback" text="void&#10;                       (*callback) (int, int, void *)" mod=""/>
    <arg type="void" id="cb_arg" text="void *cb_arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_generate_key_ex" text="int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="int" id="bits" text="int bits" mod=""/>
    <arg type="BIGNUM" id="e" text="BIGNUM *e" mod=""/>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_check_key" text="int RSA_check_key(const RSA *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="const RSA" id="ANON2" text="const RSA *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_public_encrypt" text="int RSA_public_encrypt(int flen, const unsigned char *from,&#10;                       unsigned char *to, RSA *rsa, int padding)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="int" id="flen" text="int flen" mod=""/>
    <arg type="const unsigned char" id="from" text="const unsigned char *from" mod=""/>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="int" id="padding" text="int padding" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_private_encrypt" text="int RSA_private_encrypt(int flen, const unsigned char *from,&#10;                        unsigned char *to, RSA *rsa, int padding)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="int" id="flen" text="int flen" mod=""/>
    <arg type="const unsigned char" id="from" text="const unsigned char *from" mod=""/>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="int" id="padding" text="int padding" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_public_decrypt" text="int RSA_public_decrypt(int flen, const unsigned char *from,&#10;                       unsigned char *to, RSA *rsa, int padding)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="int" id="flen" text="int flen" mod=""/>
    <arg type="const unsigned char" id="from" text="const unsigned char *from" mod=""/>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="int" id="padding" text="int padding" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_private_decrypt" text="int RSA_private_decrypt(int flen, const unsigned char *from,&#10;                        unsigned char *to, RSA *rsa, int padding)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="int" id="flen" text="int flen" mod=""/>
    <arg type="const unsigned char" id="from" text="const unsigned char *from" mod=""/>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="int" id="padding" text="int padding" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RSA_free" text="void RSA_free(RSA *r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="r" text="RSA *r" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_up_ref" text="int RSA_up_ref(RSA *r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="r" text="RSA *r" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_flags" text="int RSA_flags(const RSA *r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="const RSA" id="r" text="const RSA *r" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RSA_set_default_method" text="void RSA_set_default_method(const RSA_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="const RSA_METHOD" id="meth" text="const RSA_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="const RSA_METHOD" id="RSA_get_default_method" text="const RSA_METHOD *RSA_get_default_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const RSA_METHOD" id="RSA_get_method" text="const RSA_METHOD *RSA_get_method(const RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="const RSA" id="rsa" text="const RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_set_method" text="int RSA_set_method(RSA *rsa, const RSA_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="const RSA_METHOD" id="meth" text="const RSA_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_memory_lock" text="int RSA_memory_lock(RSA *r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="r" text="RSA *r" mod=""/>
  </args>
</fdecl>
<fdecl type="const RSA_METHOD" id="RSA_PKCS1_SSLeay" text="const RSA_METHOD *RSA_PKCS1_SSLeay(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const RSA_METHOD" id="RSA_null_method" text="const RSA_METHOD *RSA_null_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="d2i_RSAPublicKey" text="RSA &#10;# 362 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*d2i_RSAPublicKey(&#10;# 362 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA &#10;# 362 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="a" text="RSA &#10;# 362 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSAPublicKey" text="int i2d_RSAPublicKey(const &#10;# 362 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA &#10;# 362 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="const &#10;# 362 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA" id="a" text="const &#10;# 362 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA &#10;# 362 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="d2i_RSAPrivateKey" text="RSA &#10;# 363 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*d2i_RSAPrivateKey(&#10;# 363 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA &#10;# 363 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="a" text="RSA &#10;# 363 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSAPrivateKey" text="int i2d_RSAPrivateKey(const &#10;# 363 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA &#10;# 363 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="const &#10;# 363 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA" id="a" text="const &#10;# 363 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA &#10;# 363 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA_PSS_PARAMS" id="RSA_PSS_PARAMS_new" text="RSA_PSS_PARAMS &#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*&#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA_PSS_PARAMS_new&#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RSA_PSS_PARAMS_free" text="void &#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA_PSS_PARAMS_free&#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;(&#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA_PSS_PARAMS &#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA_PSS_PARAMS" id="a" text="RSA_PSS_PARAMS &#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA_PSS_PARAMS" id="d2i_RSA_PSS_PARAMS" text="RSA_PSS_PARAMS &#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*d2i_RSA_PSS_PARAMS(&#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA_PSS_PARAMS &#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA_PSS_PARAMS" id="a" text="RSA_PSS_PARAMS &#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSA_PSS_PARAMS" text="int i2d_RSA_PSS_PARAMS(&#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA_PSS_PARAMS &#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA_PSS_PARAMS" id="a" text="RSA_PSS_PARAMS &#10;# 372 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA_OAEP_PARAMS" id="RSA_OAEP_PARAMS_new" text="RSA_OAEP_PARAMS &#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*&#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA_OAEP_PARAMS_new&#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RSA_OAEP_PARAMS_free" text="void &#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA_OAEP_PARAMS_free&#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;(&#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA_OAEP_PARAMS &#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA_OAEP_PARAMS" id="a" text="RSA_OAEP_PARAMS &#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA_OAEP_PARAMS" id="d2i_RSA_OAEP_PARAMS" text="RSA_OAEP_PARAMS &#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*d2i_RSA_OAEP_PARAMS(&#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA_OAEP_PARAMS &#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA_OAEP_PARAMS" id="a" text="RSA_OAEP_PARAMS &#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSA_OAEP_PARAMS" text="int i2d_RSA_OAEP_PARAMS(&#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot;&#10;RSA_OAEP_PARAMS &#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA_OAEP_PARAMS" id="a" text="RSA_OAEP_PARAMS &#10;# 380 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_print_fp" text="int RSA_print_fp(FILE *fp, const RSA *r, int offset)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const RSA" id="r" text="const RSA *r" mod=""/>
    <arg type="int" id="offset" text="int offset" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_print" text="int RSA_print(BIO *bp, const RSA *r, int offset)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const RSA" id="r" text="const RSA *r" mod=""/>
    <arg type="int" id="offset" text="int offset" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSA_NET" text="int i2d_RSA_NET(const RSA *a, unsigned char **pp,&#10;                int (*cb) (char *buf, int len, const char *prompt,&#10;                           int verify), int sgckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="const RSA" id="a" text="const RSA *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (char *buf, int len, const char *prompt,&#10;                           int verify)" mod=""/>
    <arg type="int" id="sgckey" text="int sgckey" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="d2i_RSA_NET" text="RSA *d2i_RSA_NET(RSA **a, const unsigned char **pp, long length,&#10;                 int (*cb) (char *buf, int len, const char *prompt,&#10;                            int verify), int sgckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="a" text="RSA **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (char *buf, int len, const char *prompt,&#10;                            int verify)" mod=""/>
    <arg type="int" id="sgckey" text="int sgckey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_Netscape_RSA" text="int i2d_Netscape_RSA(const RSA *a, unsigned char **pp,&#10;                     int (*cb) (char *buf, int len, const char *prompt,&#10;                                int verify))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="const RSA" id="a" text="const RSA *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (char *buf, int len, const char *prompt,&#10;                                int verify)" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="d2i_Netscape_RSA" text="RSA *d2i_Netscape_RSA(RSA **a, const unsigned char **pp, long length,&#10;                      int (*cb) (char *buf, int len, const char *prompt,&#10;                                 int verify))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="a" text="RSA **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (char *buf, int len, const char *prompt,&#10;                                 int verify)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_sign" text="int RSA_sign(int type, const unsigned char *m, unsigned int m_length,&#10;             unsigned char *sigret, unsigned int *siglen, RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="m" text="const unsigned char *m" mod=""/>
    <arg type="unsigned int" id="m_length" text="unsigned int m_length" mod=""/>
    <arg type="unsigned char" id="sigret" text="unsigned char *sigret" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int *siglen" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_verify" text="int RSA_verify(int type, const unsigned char *m, unsigned int m_length,&#10;               const unsigned char *sigbuf, unsigned int siglen, RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="m" text="const unsigned char *m" mod=""/>
    <arg type="unsigned int" id="m_length" text="unsigned int m_length" mod=""/>
    <arg type="const unsigned char" id="sigbuf" text="const unsigned char *sigbuf" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int siglen" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_sign_ASN1_OCTET_STRING" text="int RSA_sign_ASN1_OCTET_STRING(int type,&#10;                               const unsigned char *m, unsigned int m_length,&#10;                               unsigned char *sigret, unsigned int *siglen,&#10;                               RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="m" text="const unsigned char *m" mod=""/>
    <arg type="unsigned int" id="m_length" text="unsigned int m_length" mod=""/>
    <arg type="unsigned char" id="sigret" text="unsigned char *sigret" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int *siglen" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_verify_ASN1_OCTET_STRING" text="int RSA_verify_ASN1_OCTET_STRING(int type, const unsigned char *m,&#10;                                 unsigned int m_length, unsigned char *sigbuf,&#10;                                 unsigned int siglen, RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="m" text="const unsigned char *m" mod=""/>
    <arg type="unsigned int" id="m_length" text="unsigned int m_length" mod=""/>
    <arg type="unsigned char" id="sigbuf" text="unsigned char *sigbuf" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int siglen" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_blinding_on" text="int RSA_blinding_on(RSA *rsa, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RSA_blinding_off" text="void RSA_blinding_off(RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="BN_BLINDING" id="RSA_setup_blinding" text="BN_BLINDING *RSA_setup_blinding(RSA *rsa, BN_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_add_PKCS1_type_1" text="int RSA_padding_add_PKCS1_type_1(unsigned char *to, int tlen,&#10;                                 const unsigned char *f, int fl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_check_PKCS1_type_1" text="int RSA_padding_check_PKCS1_type_1(unsigned char *to, int tlen,&#10;                                   const unsigned char *f, int fl,&#10;                                   int rsa_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
    <arg type="int" id="rsa_len" text="int rsa_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_add_PKCS1_type_2" text="int RSA_padding_add_PKCS1_type_2(unsigned char *to, int tlen,&#10;                                 const unsigned char *f, int fl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_check_PKCS1_type_2" text="int RSA_padding_check_PKCS1_type_2(unsigned char *to, int tlen,&#10;                                   const unsigned char *f, int fl,&#10;                                   int rsa_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
    <arg type="int" id="rsa_len" text="int rsa_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS1_MGF1" text="int PKCS1_MGF1(unsigned char *mask, long len, const unsigned char *seed,&#10;               long seedlen, const EVP_MD *dgst)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="mask" text="unsigned char *mask" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
    <arg type="const unsigned char" id="seed" text="const unsigned char *seed" mod=""/>
    <arg type="long" id="seedlen" text="long seedlen" mod=""/>
    <arg type="const EVP_MD" id="dgst" text="const EVP_MD *dgst" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_add_PKCS1_OAEP" text="int RSA_padding_add_PKCS1_OAEP(unsigned char *to, int tlen,&#10;                               const unsigned char *f, int fl,&#10;                               const unsigned char *p, int pl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
    <arg type="const unsigned char" id="p" text="const unsigned char *p" mod=""/>
    <arg type="int" id="pl" text="int pl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_check_PKCS1_OAEP" text="int RSA_padding_check_PKCS1_OAEP(unsigned char *to, int tlen,&#10;                                 const unsigned char *f, int fl, int rsa_len,&#10;                                 const unsigned char *p, int pl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
    <arg type="int" id="rsa_len" text="int rsa_len" mod=""/>
    <arg type="const unsigned char" id="p" text="const unsigned char *p" mod=""/>
    <arg type="int" id="pl" text="int pl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_add_PKCS1_OAEP_mgf1" text="int RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,&#10;                                    const unsigned char *from, int flen,&#10;                                    const unsigned char *param, int plen,&#10;                                    const EVP_MD *md, const EVP_MD *mgf1md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="from" text="const unsigned char *from" mod=""/>
    <arg type="int" id="flen" text="int flen" mod=""/>
    <arg type="const unsigned char" id="param" text="const unsigned char *param" mod=""/>
    <arg type="int" id="plen" text="int plen" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="const EVP_MD" id="mgf1md" text="const EVP_MD *mgf1md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_check_PKCS1_OAEP_mgf1" text="int RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,&#10;                                      const unsigned char *from, int flen,&#10;                                      int num, const unsigned char *param,&#10;                                      int plen, const EVP_MD *md,&#10;                                      const EVP_MD *mgf1md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="from" text="const unsigned char *from" mod=""/>
    <arg type="int" id="flen" text="int flen" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="const unsigned char" id="param" text="const unsigned char *param" mod=""/>
    <arg type="int" id="plen" text="int plen" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="const EVP_MD" id="mgf1md" text="const EVP_MD *mgf1md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_add_SSLv23" text="int RSA_padding_add_SSLv23(unsigned char *to, int tlen,&#10;                           const unsigned char *f, int fl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_check_SSLv23" text="int RSA_padding_check_SSLv23(unsigned char *to, int tlen,&#10;                             const unsigned char *f, int fl, int rsa_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
    <arg type="int" id="rsa_len" text="int rsa_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_add_none" text="int RSA_padding_add_none(unsigned char *to, int tlen, const unsigned char *f,&#10;                         int fl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_check_none" text="int RSA_padding_check_none(unsigned char *to, int tlen,&#10;                           const unsigned char *f, int fl, int rsa_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
    <arg type="int" id="rsa_len" text="int rsa_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_add_X931" text="int RSA_padding_add_X931(unsigned char *to, int tlen, const unsigned char *f,&#10;                         int fl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_check_X931" text="int RSA_padding_check_X931(unsigned char *to, int tlen,&#10;                           const unsigned char *f, int fl, int rsa_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="unsigned char" id="to" text="unsigned char *to" mod=""/>
    <arg type="int" id="tlen" text="int tlen" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="fl" text="int fl" mod=""/>
    <arg type="int" id="rsa_len" text="int rsa_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_X931_hash_id" text="int RSA_X931_hash_id(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_verify_PKCS1_PSS" text="int RSA_verify_PKCS1_PSS(RSA *rsa, const unsigned char *mHash,&#10;                         const EVP_MD *Hash, const unsigned char *EM,&#10;                         int sLen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="const unsigned char" id="mHash" text="const unsigned char *mHash" mod=""/>
    <arg type="const EVP_MD" id="Hash" text="const EVP_MD *Hash" mod=""/>
    <arg type="const unsigned char" id="EM" text="const unsigned char *EM" mod=""/>
    <arg type="int" id="sLen" text="int sLen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_add_PKCS1_PSS" text="int RSA_padding_add_PKCS1_PSS(RSA *rsa, unsigned char *EM,&#10;                              const unsigned char *mHash, const EVP_MD *Hash,&#10;                              int sLen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="unsigned char" id="EM" text="unsigned char *EM" mod=""/>
    <arg type="const unsigned char" id="mHash" text="const unsigned char *mHash" mod=""/>
    <arg type="const EVP_MD" id="Hash" text="const EVP_MD *Hash" mod=""/>
    <arg type="int" id="sLen" text="int sLen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_verify_PKCS1_PSS_mgf1" text="int RSA_verify_PKCS1_PSS_mgf1(RSA *rsa, const unsigned char *mHash,&#10;                              const EVP_MD *Hash, const EVP_MD *mgf1Hash,&#10;                              const unsigned char *EM, int sLen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="const unsigned char" id="mHash" text="const unsigned char *mHash" mod=""/>
    <arg type="const EVP_MD" id="Hash" text="const EVP_MD *Hash" mod=""/>
    <arg type="const EVP_MD" id="mgf1Hash" text="const EVP_MD *mgf1Hash" mod=""/>
    <arg type="const unsigned char" id="EM" text="const unsigned char *EM" mod=""/>
    <arg type="int" id="sLen" text="int sLen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_padding_add_PKCS1_PSS_mgf1" text="int RSA_padding_add_PKCS1_PSS_mgf1(RSA *rsa, unsigned char *EM,&#10;                                   const unsigned char *mHash,&#10;                                   const EVP_MD *Hash, const EVP_MD *mgf1Hash,&#10;                                   int sLen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
    <arg type="unsigned char" id="EM" text="unsigned char *EM" mod=""/>
    <arg type="const unsigned char" id="mHash" text="const unsigned char *mHash" mod=""/>
    <arg type="const EVP_MD" id="Hash" text="const EVP_MD *Hash" mod=""/>
    <arg type="const EVP_MD" id="mgf1Hash" text="const EVP_MD *mgf1Hash" mod=""/>
    <arg type="int" id="sLen" text="int sLen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_get_ex_new_index" text="int RSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,&#10;                         CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RSA_set_ex_data" text="int RSA_set_ex_data(RSA *r, int idx, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="r" text="RSA *r" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RSA_get_ex_data" text="void *RSA_get_ex_data(const RSA *r, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="const RSA" id="r" text="const RSA *r" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="RSAPublicKey_dup" text="RSA *RSAPublicKey_dup(RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="RSAPrivateKey_dup" text="RSA *RSAPrivateKey_dup(RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_RSA_strings" text="void ERR_load_RSA_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rsa.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="const unsigned char" id="ANON0" text="struct dsa_method {&#10;    const char *name;&#10;    DSA_SIG *(*dsa_do_sign) (const unsigned char *dgst, int dlen, DSA *dsa);&#10;    int (*dsa_sign_setup) (DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,&#10;                           BIGNUM **rp);&#10;    int (*dsa_do_verify) (const unsigned char *dgst, int dgst_len,&#10;                          DSA_SIG *sig, DSA *dsa);&#10;    int (*dsa_mod_exp) (DSA *dsa, BIGNUM *rr, BIGNUM *a1, BIGNUM *p1,&#10;                        BIGNUM *a2, BIGNUM *p2, BIGNUM *m, BN_CTX *ctx,&#10;                        BN_MONT_CTX *in_mont);&#10;&#10;    int (*bn_mod_exp) (DSA *dsa, BIGNUM *r, BIGNUM *a, const BIGNUM *p,&#10;                       const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);&#10;    int (*init) (DSA *dsa);&#10;    int (*finish) (DSA *dsa);&#10;    int flags;&#10;    char *app_data;&#10;&#10;    int (*dsa_paramgen) (DSA *dsa, int bits,&#10;                         const unsigned char *seed, int seed_len,&#10;                         int *counter_ret, unsigned long *h_ret,&#10;                         BN_GENCB *cb);&#10;&#10;    int (*dsa_keygen) (DSA *dsa);&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dlen" text="int dlen" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
    <arg type="BN_CTX" id="ctx_in" text="BN_CTX *ctx_in" mod=""/>
    <arg type="BIGNUM" id="kinvp" text="BIGNUM **kinvp" mod=""/>
    <arg type="BIGNUM" id="rp" text="BIGNUM **rp" mod=""/>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dgst_len" text="int dgst_len" mod=""/>
    <arg type="DSA_SIG" id="sig" text="DSA_SIG *sig" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
    <arg type="BIGNUM" id="rr" text="BIGNUM *rr" mod=""/>
    <arg type="BIGNUM" id="a1" text="BIGNUM *a1" mod=""/>
    <arg type="BIGNUM" id="p1" text="BIGNUM *p1" mod=""/>
    <arg type="BIGNUM" id="a2" text="BIGNUM *a2" mod=""/>
    <arg type="BIGNUM" id="p2" text="BIGNUM *p2" mod=""/>
    <arg type="BIGNUM" id="m" text="BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BN_MONT_CTX" id="in_mont" text="BN_MONT_CTX *in_mont" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BN_MONT_CTX" id="m_ctx" text="BN_MONT_CTX *m_ctx" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
    <arg type="int" id="bits" text="int bits" mod=""/>
    <arg type="const unsigned char" id="seed" text="const unsigned char *seed" mod=""/>
    <arg type="int" id="seed_len" text="int seed_len" mod=""/>
    <arg type="int" id="counter_ret" text="int *counter_ret" mod=""/>
    <arg type="unsigned long" id="h_ret" text="unsigned long *h_ret" mod=""/>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="DSAparams_dup" text="DSA *DSAparams_dup(DSA *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="x" text="DSA *x" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA_SIG" id="DSA_SIG_new" text="DSA_SIG *DSA_SIG_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DSA_SIG_free" text="void DSA_SIG_free(DSA_SIG *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA_SIG" id="a" text="DSA_SIG *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DSA_SIG" text="int i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="const DSA_SIG" id="a" text="const DSA_SIG *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA_SIG" id="d2i_DSA_SIG" text="DSA_SIG *d2i_DSA_SIG(DSA_SIG **v, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA_SIG" id="v" text="DSA_SIG **v" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA_SIG" id="DSA_do_sign" text="DSA_SIG *DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dlen" text="int dlen" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_do_verify" text="int DSA_do_verify(const unsigned char *dgst, int dgst_len,&#10;                  DSA_SIG *sig, DSA *dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dgst_len" text="int dgst_len" mod=""/>
    <arg type="DSA_SIG" id="sig" text="DSA_SIG *sig" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="const DSA_METHOD" id="DSA_OpenSSL" text="const DSA_METHOD *DSA_OpenSSL(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DSA_set_default_method" text="void DSA_set_default_method(const DSA_METHOD *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="const DSA_METHOD" id="ANON3" text="const DSA_METHOD *" mod=""/>
  </args>
</fdecl>
<fdecl type="const DSA_METHOD" id="DSA_get_default_method" text="const DSA_METHOD *DSA_get_default_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_set_method" text="int DSA_set_method(DSA *dsa, const DSA_METHOD *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
    <arg type="const DSA_METHOD" id="ANON5" text="const DSA_METHOD *" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="DSA_new" text="DSA *DSA_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="DSA_new_method" text="DSA *DSA_new_method(ENGINE *engine)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="ENGINE" id="engine" text="ENGINE *engine" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DSA_free" text="void DSA_free(DSA *r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="r" text="DSA *r" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_up_ref" text="int DSA_up_ref(DSA *r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="r" text="DSA *r" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_size" text="int DSA_size(const DSA *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="const DSA" id="ANON7" text="const DSA *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_sign_setup" text="int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
    <arg type="BN_CTX" id="ctx_in" text="BN_CTX *ctx_in" mod=""/>
    <arg type="BIGNUM" id="kinvp" text="BIGNUM **kinvp" mod=""/>
    <arg type="BIGNUM" id="rp" text="BIGNUM **rp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_sign" text="int DSA_sign(int type, const unsigned char *dgst, int dlen,&#10;             unsigned char *sig, unsigned int *siglen, DSA *dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dlen" text="int dlen" mod=""/>
    <arg type="unsigned char" id="sig" text="unsigned char *sig" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int *siglen" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_verify" text="int DSA_verify(int type, const unsigned char *dgst, int dgst_len,&#10;               const unsigned char *sigbuf, int siglen, DSA *dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dgst_len" text="int dgst_len" mod=""/>
    <arg type="const unsigned char" id="sigbuf" text="const unsigned char *sigbuf" mod=""/>
    <arg type="int" id="siglen" text="int siglen" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_get_ex_new_index" text="int DSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,&#10;                         CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_set_ex_data" text="int DSA_set_ex_data(DSA *d, int idx, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="d" text="DSA *d" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DSA_get_ex_data" text="void *DSA_get_ex_data(DSA *d, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="d" text="DSA *d" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="d2i_DSAPublicKey" text="DSA *d2i_DSAPublicKey(DSA **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="a" text="DSA **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="d2i_DSAPrivateKey" text="DSA *d2i_DSAPrivateKey(DSA **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="a" text="DSA **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="d2i_DSAparams" text="DSA *d2i_DSAparams(DSA **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="a" text="DSA **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="DSA_generate_parameters" text="DSA *DSA_generate_parameters(int bits,&#10;                             unsigned char *seed, int seed_len,&#10;                             int *counter_ret, unsigned long *h_ret, void&#10;                              (*callback) (int, int, void *), void *cb_arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="int" id="bits" text="int bits" mod=""/>
    <arg type="unsigned char" id="seed" text="unsigned char *seed" mod=""/>
    <arg type="int" id="seed_len" text="int seed_len" mod=""/>
    <arg type="int" id="counter_ret" text="int *counter_ret" mod=""/>
    <arg type="unsigned long" id="h_ret" text="unsigned long *h_ret" mod=""/>
    <arg type="void" id="callback" text="void&#10;                              (*callback) (int, int, void *)" mod=""/>
    <arg type="void" id="cb_arg" text="void *cb_arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_generate_parameters_ex" text="int DSA_generate_parameters_ex(DSA *dsa, int bits,&#10;                               const unsigned char *seed, int seed_len,&#10;                               int *counter_ret, unsigned long *h_ret,&#10;                               BN_GENCB *cb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
    <arg type="int" id="bits" text="int bits" mod=""/>
    <arg type="const unsigned char" id="seed" text="const unsigned char *seed" mod=""/>
    <arg type="int" id="seed_len" text="int seed_len" mod=""/>
    <arg type="int" id="counter_ret" text="int *counter_ret" mod=""/>
    <arg type="unsigned long" id="h_ret" text="unsigned long *h_ret" mod=""/>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_generate_key" text="int DSA_generate_key(DSA *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="DSA" id="a" text="DSA *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DSAPublicKey" text="int i2d_DSAPublicKey(const DSA *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="const DSA" id="a" text="const DSA *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DSAPrivateKey" text="int i2d_DSAPrivateKey(const DSA *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="const DSA" id="a" text="const DSA *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DSAparams" text="int i2d_DSAparams(const DSA *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="const DSA" id="a" text="const DSA *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSAparams_print" text="int DSAparams_print(BIO *bp, const DSA *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const DSA" id="x" text="const DSA *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_print" text="int DSA_print(BIO *bp, const DSA *x, int off)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const DSA" id="x" text="const DSA *x" mod=""/>
    <arg type="int" id="off" text="int off" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSAparams_print_fp" text="int DSAparams_print_fp(FILE *fp, const DSA *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const DSA" id="x" text="const DSA *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSA_print_fp" text="int DSA_print_fp(FILE *bp, const DSA *x, int off)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="FILE" id="bp" text="FILE *bp" mod=""/>
    <arg type="const DSA" id="x" text="const DSA *x" mod=""/>
    <arg type="int" id="off" text="int off" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="DSA_dup_DH" text="DH *DSA_dup_DH(const DSA *r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="const DSA" id="r" text="const DSA *r" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_DSA_strings" text="void ERR_load_DSA_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dsa.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="DH" id="ANON0" text="struct dh_method {&#10;    const char *name;&#10;&#10;    int (*generate_key) (DH *dh);&#10;    int (*compute_key) (unsigned char *key, const BIGNUM *pub_key, DH *dh);&#10;&#10;    int (*bn_mod_exp) (const DH *dh, BIGNUM *r, const BIGNUM *a,&#10;                       const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx,&#10;                       BN_MONT_CTX *m_ctx);&#10;    int (*init) (DH *dh);&#10;    int (*finish) (DH *dh);&#10;    int flags;&#10;    char *app_data;&#10;&#10;    int (*generate_params) (DH *dh, int prime_len, int generator,&#10;                            BN_GENCB *cb);&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
    <arg type="unsigned char" id="key" text="unsigned char *key" mod=""/>
    <arg type="const BIGNUM" id="pub_key" text="const BIGNUM *pub_key" mod=""/>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
    <arg type="const DH" id="dh" text="const DH *dh" mod=""/>
    <arg type="BIGNUM" id="r" text="BIGNUM *r" mod=""/>
    <arg type="const BIGNUM" id="a" text="const BIGNUM *a" mod=""/>
    <arg type="const BIGNUM" id="p" text="const BIGNUM *p" mod=""/>
    <arg type="const BIGNUM" id="m" text="const BIGNUM *m" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BN_MONT_CTX" id="m_ctx" text="BN_MONT_CTX *m_ctx" mod=""/>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
    <arg type="int" id="prime_len" text="int prime_len" mod=""/>
    <arg type="int" id="generator" text="int generator" mod=""/>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="DHparams_dup" text="DH *DHparams_dup(DH *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="DH" id="ANON1" text="DH *" mod=""/>
  </args>
</fdecl>
<fdecl type="const DH_METHOD" id="DH_OpenSSL" text="const DH_METHOD *DH_OpenSSL(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DH_set_default_method" text="void DH_set_default_method(const DH_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="const DH_METHOD" id="meth" text="const DH_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="const DH_METHOD" id="DH_get_default_method" text="const DH_METHOD *DH_get_default_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_set_method" text="int DH_set_method(DH *dh, const DH_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
    <arg type="const DH_METHOD" id="meth" text="const DH_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="DH_new_method" text="DH *DH_new_method(ENGINE *engine)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="ENGINE" id="engine" text="ENGINE *engine" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="DH_new" text="DH *DH_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DH_free" text="void DH_free(DH *dh)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_up_ref" text="int DH_up_ref(DH *dh)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_size" text="int DH_size(const DH *dh)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="const DH" id="dh" text="const DH *dh" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_get_ex_new_index" text="int DH_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,&#10;                        CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_set_ex_data" text="int DH_set_ex_data(DH *d, int idx, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="DH" id="d" text="DH *d" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DH_get_ex_data" text="void *DH_get_ex_data(DH *d, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="DH" id="d" text="DH *d" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="DH_generate_parameters" text="DH *DH_generate_parameters(int prime_len, int generator,&#10;                           void (*callback) (int, int, void *), void *cb_arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="int" id="prime_len" text="int prime_len" mod=""/>
    <arg type="int" id="generator" text="int generator" mod=""/>
    <arg type="void" id="callback" text="void (*callback) (int, int, void *)" mod=""/>
    <arg type="void" id="cb_arg" text="void *cb_arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_generate_parameters_ex" text="int DH_generate_parameters_ex(DH *dh, int prime_len, int generator,&#10;                              BN_GENCB *cb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
    <arg type="int" id="prime_len" text="int prime_len" mod=""/>
    <arg type="int" id="generator" text="int generator" mod=""/>
    <arg type="BN_GENCB" id="cb" text="BN_GENCB *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_check" text="int DH_check(const DH *dh, int *codes)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="const DH" id="dh" text="const DH *dh" mod=""/>
    <arg type="int" id="codes" text="int *codes" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_check_pub_key" text="int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *codes)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="const DH" id="dh" text="const DH *dh" mod=""/>
    <arg type="const BIGNUM" id="pub_key" text="const BIGNUM *pub_key" mod=""/>
    <arg type="int" id="codes" text="int *codes" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_generate_key" text="int DH_generate_key(DH *dh)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_compute_key" text="int DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="unsigned char" id="key" text="unsigned char *key" mod=""/>
    <arg type="const BIGNUM" id="pub_key" text="const BIGNUM *pub_key" mod=""/>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_compute_key_padded" text="int DH_compute_key_padded(unsigned char *key, const BIGNUM *pub_key, DH *dh)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="unsigned char" id="key" text="unsigned char *key" mod=""/>
    <arg type="const BIGNUM" id="pub_key" text="const BIGNUM *pub_key" mod=""/>
    <arg type="DH" id="dh" text="DH *dh" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="d2i_DHparams" text="DH *d2i_DHparams(DH **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="DH" id="a" text="DH **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DHparams" text="int i2d_DHparams(const DH *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="const DH" id="a" text="const DH *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="d2i_DHxparams" text="DH *d2i_DHxparams(DH **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="DH" id="a" text="DH **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DHxparams" text="int i2d_DHxparams(const DH *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="const DH" id="a" text="const DH *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DHparams_print_fp" text="int DHparams_print_fp(FILE *fp, const DH *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const DH" id="x" text="const DH *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DHparams_print" text="int DHparams_print(BIO *bp, const DH *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const DH" id="x" text="const DH *x" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="DH_get_1024_160" text="DH *DH_get_1024_160(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="DH_get_2048_224" text="DH *DH_get_2048_224(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="DH_get_2048_256" text="DH *DH_get_2048_256(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DH_KDF_X9_42" text="int DH_KDF_X9_42(unsigned char *out, size_t outlen,&#10;                 const unsigned char *Z, size_t Zlen,&#10;                 ASN1_OBJECT *key_oid,&#10;                 const unsigned char *ukm, size_t ukmlen, const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="outlen" text="size_t outlen" mod=""/>
    <arg type="const unsigned char" id="Z" text="const unsigned char *Z" mod=""/>
    <arg type="size_t" id="Zlen" text="size_t Zlen" mod=""/>
    <arg type="ASN1_OBJECT" id="key_oid" text="ASN1_OBJECT *key_oid" mod=""/>
    <arg type="const unsigned char" id="ukm" text="const unsigned char *ukm" mod=""/>
    <arg type="size_t" id="ukmlen" text="size_t ukmlen" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_DH_strings" text="void ERR_load_DH_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dh.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="ECDSA_SIG" id="ECDSA_SIG_new" text="ECDSA_SIG *ECDSA_SIG_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDSA_SIG_free" text="void ECDSA_SIG_free(ECDSA_SIG *sig)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="ECDSA_SIG" id="sig" text="ECDSA_SIG *sig" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ECDSA_SIG" text="int i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="const ECDSA_SIG" id="sig" text="const ECDSA_SIG *sig" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="ECDSA_SIG" id="d2i_ECDSA_SIG" text="ECDSA_SIG *d2i_ECDSA_SIG(ECDSA_SIG **sig, const unsigned char **pp, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="ECDSA_SIG" id="sig" text="ECDSA_SIG **sig" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="ECDSA_SIG" id="ECDSA_do_sign" text="ECDSA_SIG *ECDSA_do_sign(const unsigned char *dgst, int dgst_len,&#10;                         EC_KEY *eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dgst_len" text="int dgst_len" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="ECDSA_SIG" id="ECDSA_do_sign_ex" text="ECDSA_SIG *ECDSA_do_sign_ex(const unsigned char *dgst, int dgstlen,&#10;                            const BIGNUM *kinv, const BIGNUM *rp,&#10;                            EC_KEY *eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dgstlen" text="int dgstlen" mod=""/>
    <arg type="const BIGNUM" id="kinv" text="const BIGNUM *kinv" mod=""/>
    <arg type="const BIGNUM" id="rp" text="const BIGNUM *rp" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDSA_do_verify" text="int ECDSA_do_verify(const unsigned char *dgst, int dgst_len,&#10;                    const ECDSA_SIG *sig, EC_KEY *eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dgst_len" text="int dgst_len" mod=""/>
    <arg type="const ECDSA_SIG" id="sig" text="const ECDSA_SIG *sig" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="const ECDSA_METHOD" id="ECDSA_OpenSSL" text="const ECDSA_METHOD *ECDSA_OpenSSL(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDSA_set_default_method" text="void ECDSA_set_default_method(const ECDSA_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="const ECDSA_METHOD" id="meth" text="const ECDSA_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="const ECDSA_METHOD" id="ECDSA_get_default_method" text="const ECDSA_METHOD *ECDSA_get_default_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDSA_set_method" text="int ECDSA_set_method(EC_KEY *eckey, const ECDSA_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
    <arg type="const ECDSA_METHOD" id="meth" text="const ECDSA_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDSA_size" text="int ECDSA_size(const EC_KEY *eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="const EC_KEY" id="eckey" text="const EC_KEY *eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDSA_sign_setup" text="int ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **rp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
    <arg type="BN_CTX" id="ctx" text="BN_CTX *ctx" mod=""/>
    <arg type="BIGNUM" id="kinv" text="BIGNUM **kinv" mod=""/>
    <arg type="BIGNUM" id="rp" text="BIGNUM **rp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDSA_sign" text="int ECDSA_sign(int type, const unsigned char *dgst, int dgstlen,&#10;               unsigned char *sig, unsigned int *siglen, EC_KEY *eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dgstlen" text="int dgstlen" mod=""/>
    <arg type="unsigned char" id="sig" text="unsigned char *sig" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int *siglen" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDSA_sign_ex" text="int ECDSA_sign_ex(int type, const unsigned char *dgst, int dgstlen,&#10;                  unsigned char *sig, unsigned int *siglen,&#10;                  const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dgstlen" text="int dgstlen" mod=""/>
    <arg type="unsigned char" id="sig" text="unsigned char *sig" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int *siglen" mod=""/>
    <arg type="const BIGNUM" id="kinv" text="const BIGNUM *kinv" mod=""/>
    <arg type="const BIGNUM" id="rp" text="const BIGNUM *rp" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDSA_verify" text="int ECDSA_verify(int type, const unsigned char *dgst, int dgstlen,&#10;                 const unsigned char *sig, int siglen, EC_KEY *eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="dgst" text="const unsigned char *dgst" mod=""/>
    <arg type="int" id="dgstlen" text="int dgstlen" mod=""/>
    <arg type="const unsigned char" id="sig" text="const unsigned char *sig" mod=""/>
    <arg type="int" id="siglen" text="int siglen" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDSA_get_ex_new_index" text="int ECDSA_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new&#10;                           *new_func, CRYPTO_EX_dup *dup_func,&#10;                           CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new&#10;                           *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDSA_set_ex_data" text="int ECDSA_set_ex_data(EC_KEY *d, int idx, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="EC_KEY" id="d" text="EC_KEY *d" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDSA_get_ex_data" text="void *ECDSA_get_ex_data(EC_KEY *d, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="EC_KEY" id="d" text="EC_KEY *d" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="ECDSA_METHOD" id="ECDSA_METHOD_new" text="ECDSA_METHOD *ECDSA_METHOD_new(const ECDSA_METHOD *ecdsa_method)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="const ECDSA_METHOD" id="ecdsa_method" text="const ECDSA_METHOD *ecdsa_method" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDSA_METHOD_free" text="void ECDSA_METHOD_free(ECDSA_METHOD *ecdsa_method)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="ECDSA_METHOD" id="ecdsa_method" text="ECDSA_METHOD *ecdsa_method" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDSA_METHOD_set_app_data" text="void ECDSA_METHOD_set_app_data(ECDSA_METHOD *ecdsa_method, void *app)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="ECDSA_METHOD" id="ecdsa_method" text="ECDSA_METHOD *ecdsa_method" mod=""/>
    <arg type="void" id="app" text="void *app" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDSA_METHOD_get_app_data" text="void *ECDSA_METHOD_get_app_data(ECDSA_METHOD *ecdsa_method)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="ECDSA_METHOD" id="ecdsa_method" text="ECDSA_METHOD *ecdsa_method" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDSA_METHOD_set_sign" text="void ECDSA_METHOD_set_sign(ECDSA_METHOD *ecdsa_method,&#10;                           ECDSA_SIG *(*ecdsa_do_sign) (const unsigned char&#10;                                                        *dgst, int dgst_len,&#10;                                                        const BIGNUM *inv,&#10;                                                        const BIGNUM *rp,&#10;                                                        EC_KEY *eckey))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="ECDSA_METHOD" id="ecdsa_method" text="ECDSA_METHOD *ecdsa_method" mod=""/>
    <arg type="ECDSA_SIG" id="ecdsa_do_sign" text="ECDSA_SIG *(*ecdsa_do_sign) (const unsigned char&#10;                                                        *dgst, int dgst_len,&#10;                                                        const BIGNUM *inv,&#10;                                                        const BIGNUM *rp,&#10;                                                        EC_KEY *eckey)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDSA_METHOD_set_sign_setup" text="void ECDSA_METHOD_set_sign_setup(ECDSA_METHOD *ecdsa_method,&#10;                                 int (*ecdsa_sign_setup) (EC_KEY *eckey,&#10;                                                          BN_CTX *ctx,&#10;                                                          BIGNUM **kinv,&#10;                                                          BIGNUM **r))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="ECDSA_METHOD" id="ecdsa_method" text="ECDSA_METHOD *ecdsa_method" mod=""/>
    <arg type="int" id="ecdsa_sign_setup" text="int (*ecdsa_sign_setup) (EC_KEY *eckey,&#10;                                                          BN_CTX *ctx,&#10;                                                          BIGNUM **kinv,&#10;                                                          BIGNUM **r)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDSA_METHOD_set_verify" text="void ECDSA_METHOD_set_verify(ECDSA_METHOD *ecdsa_method,&#10;                             int (*ecdsa_do_verify) (const unsigned char&#10;                                                     *dgst, int dgst_len,&#10;                                                     const ECDSA_SIG *sig,&#10;                                                     EC_KEY *eckey))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="ECDSA_METHOD" id="ecdsa_method" text="ECDSA_METHOD *ecdsa_method" mod=""/>
    <arg type="int" id="ecdsa_do_verify" text="int (*ecdsa_do_verify) (const unsigned char&#10;                                                     *dgst, int dgst_len,&#10;                                                     const ECDSA_SIG *sig,&#10;                                                     EC_KEY *eckey)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDSA_METHOD_set_flags" text="void ECDSA_METHOD_set_flags(ECDSA_METHOD *ecdsa_method, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="ECDSA_METHOD" id="ecdsa_method" text="ECDSA_METHOD *ecdsa_method" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDSA_METHOD_set_name" text="void ECDSA_METHOD_set_name(ECDSA_METHOD *ecdsa_method, char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="ECDSA_METHOD" id="ecdsa_method" text="ECDSA_METHOD *ecdsa_method" mod=""/>
    <arg type="char" id="name" text="char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_ECDSA_strings" text="void ERR_load_ECDSA_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdsa.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="DSO_FUNC_TYPE" text="typedef void (*DSO_FUNC_TYPE) (void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="DSO_NAME_CONVERTER_FUNC" text="typedef char *(*DSO_NAME_CONVERTER_FUNC)(DSO *, const char *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="ANON1" text="DSO *" mod=""/>
    <arg type="const char" id="ANON2" text="const char *" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="DSO_MERGER_FUNC" text="typedef char *(*DSO_MERGER_FUNC)(DSO *, const char *, const char *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="ANON3" text="DSO *" mod=""/>
    <arg type="const char" id="ANON4" text="const char *" mod=""/>
    <arg type="const char" id="ANON5" text="const char *" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO" id="DSO_METHOD" text="typedef struct dso_meth_st {&#10;    const char *name;&#10;&#10;&#10;&#10;&#10;&#10;    int (*dso_load) (DSO *dso);&#10;&#10;    int (*dso_unload) (DSO *dso);&#10;&#10;    void *(*dso_bind_var) (DSO *dso, const char *symname);&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    DSO_FUNC_TYPE (*dso_bind_func) (DSO *dso, const char *symname);&#10;# 171 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h&quot;&#10;    long (*dso_ctrl) (DSO *dso, int cmd, long larg, void *parg);&#10;&#10;&#10;&#10;&#10;    DSO_NAME_CONVERTER_FUNC dso_name_converter;&#10;&#10;&#10;&#10;&#10;    DSO_MERGER_FUNC dso_merger;&#10;&#10;    int (*init) (DSO *dso);&#10;    int (*finish) (DSO *dso);&#10;&#10;    int (*pathbyaddr) (void *addr, char *path, int sz);&#10;&#10;    void *(*globallookup) (const char *symname);&#10;} DSO_METHOD" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="const char" id="symname" text="const char *symname" mod=""/>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="const char" id="symname" text="const char *symname" mod=""/>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="larg" text="long larg" mod=""/>
    <arg type="void" id="parg" text="void *parg" mod=""/>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="void" id="addr" text="void *addr" mod=""/>
    <arg type="char" id="path" text="char *path" mod=""/>
    <arg type="int" id="sz" text="int sz" mod=""/>
    <arg type="const char" id="symname" text="const char *symname" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO" id="DSO_new" text="DSO *DSO_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO" id="DSO_new_method" text="DSO *DSO_new_method(DSO_METHOD *method)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO_METHOD" id="method" text="DSO_METHOD *method" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSO_free" text="int DSO_free(DSO *dso)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSO_flags" text="int DSO_flags(DSO *dso)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSO_up_ref" text="int DSO_up_ref(DSO *dso)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="DSO_ctrl" text="long DSO_ctrl(DSO *dso, int cmd, long larg, void *parg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="larg" text="long larg" mod=""/>
    <arg type="void" id="parg" text="void *parg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSO_set_name_converter" text="int DSO_set_name_converter(DSO *dso, DSO_NAME_CONVERTER_FUNC cb,&#10;                           DSO_NAME_CONVERTER_FUNC *oldcb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="DSO_NAME_CONVERTER_FUNC" id="cb" text="DSO_NAME_CONVERTER_FUNC cb" mod=""/>
    <arg type="DSO_NAME_CONVERTER_FUNC" id="oldcb" text="DSO_NAME_CONVERTER_FUNC *oldcb" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="DSO_get_filename" text="const char *DSO_get_filename(DSO *dso)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSO_set_filename" text="int DSO_set_filename(DSO *dso, const char *filename)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="const char" id="filename" text="const char *filename" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="DSO_convert_filename" text="char *DSO_convert_filename(DSO *dso, const char *filename)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="const char" id="filename" text="const char *filename" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="DSO_merge" text="char *DSO_merge(DSO *dso, const char *filespec1, const char *filespec2)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="const char" id="filespec1" text="const char *filespec1" mod=""/>
    <arg type="const char" id="filespec2" text="const char *filespec2" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="DSO_get_loaded_filename" text="const char *DSO_get_loaded_filename(DSO *dso)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DSO_set_default_method" text="void DSO_set_default_method(DSO_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO_METHOD" id="meth" text="DSO_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO_METHOD" id="DSO_get_default_method" text="DSO_METHOD *DSO_get_default_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO_METHOD" id="DSO_get_method" text="DSO_METHOD *DSO_get_method(DSO *dso)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO_METHOD" id="DSO_set_method" text="DSO_METHOD *DSO_set_method(DSO *dso, DSO_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="DSO_METHOD" id="meth" text="DSO_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO" id="DSO_load" text="DSO *DSO_load(DSO *dso, const char *filename, DSO_METHOD *meth, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="const char" id="filename" text="const char *filename" mod=""/>
    <arg type="DSO_METHOD" id="meth" text="DSO_METHOD *meth" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DSO_bind_var" text="void *DSO_bind_var(DSO *dso, const char *symname)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="const char" id="symname" text="const char *symname" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO_FUNC_TYPE" id="DSO_bind_func" text="DSO_FUNC_TYPE DSO_bind_func(DSO *dso, const char *symname)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="DSO" id="dso" text="DSO *dso" mod=""/>
    <arg type="const char" id="symname" text="const char *symname" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO_METHOD" id="DSO_METHOD_openssl" text="DSO_METHOD *DSO_METHOD_openssl(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO_METHOD" id="DSO_METHOD_null" text="DSO_METHOD *DSO_METHOD_null(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="ANON9" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO_METHOD" id="DSO_METHOD_dlfcn" text="DSO_METHOD *DSO_METHOD_dlfcn(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="ANON10" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO_METHOD" id="DSO_METHOD_dl" text="DSO_METHOD *DSO_METHOD_dl(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="ANON11" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO_METHOD" id="DSO_METHOD_win32" text="DSO_METHOD *DSO_METHOD_win32(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="ANON12" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO_METHOD" id="DSO_METHOD_vms" text="DSO_METHOD *DSO_METHOD_vms(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="ANON13" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DSO_pathbyaddr" text="int DSO_pathbyaddr(void *addr, char *path, int sz)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="addr" text="void *addr" mod=""/>
    <arg type="char" id="path" text="char *path" mod=""/>
    <arg type="int" id="sz" text="int sz" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DSO_global_lookup" text="void *DSO_global_lookup(const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="DSO_METHOD" id="DSO_METHOD_beos" text="DSO_METHOD *DSO_METHOD_beos(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="ANON14" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_DSO_strings" text="void ERR_load_DSO_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/dso.h">
  <args>
    <arg type="void" id="ANON15" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="const ECDH_METHOD" id="ECDH_OpenSSL" text="const ECDH_METHOD *ECDH_OpenSSL(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdh.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDH_set_default_method" text="void ECDH_set_default_method(const ECDH_METHOD *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdh.h">
  <args>
    <arg type="const ECDH_METHOD" id="ANON1" text="const ECDH_METHOD *" mod=""/>
  </args>
</fdecl>
<fdecl type="const ECDH_METHOD" id="ECDH_get_default_method" text="const ECDH_METHOD *ECDH_get_default_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdh.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDH_set_method" text="int ECDH_set_method(EC_KEY *, const ECDH_METHOD *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdh.h">
  <args>
    <arg type="EC_KEY" id="ANON3" text="EC_KEY *" mod=""/>
    <arg type="const ECDH_METHOD" id="ANON4" text="const ECDH_METHOD *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDH_compute_key" text="int ECDH_compute_key(void *out, size_t outlen, const EC_POINT *pub_key,&#10;                     EC_KEY *ecdh, void *(*KDF) (const void *in, size_t inlen,&#10;                                                 void *out, size_t *outlen))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdh.h">
  <args>
    <arg type="void" id="out" text="void *out" mod=""/>
    <arg type="size_t" id="outlen" text="size_t outlen" mod=""/>
    <arg type="const EC_POINT" id="pub_key" text="const EC_POINT *pub_key" mod=""/>
    <arg type="EC_KEY" id="ecdh" text="EC_KEY *ecdh" mod=""/>
    <arg type="void" id="KDF" text="void *(*KDF) (const void *in, size_t inlen,&#10;                                                 void *out, size_t *outlen)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDH_get_ex_new_index" text="int ECDH_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new&#10;                          *new_func, CRYPTO_EX_dup *dup_func,&#10;                          CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdh.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new&#10;                          *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDH_set_ex_data" text="int ECDH_set_ex_data(EC_KEY *d, int idx, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdh.h">
  <args>
    <arg type="EC_KEY" id="d" text="EC_KEY *d" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ECDH_get_ex_data" text="void *ECDH_get_ex_data(EC_KEY *d, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdh.h">
  <args>
    <arg type="EC_KEY" id="d" text="EC_KEY *d" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ECDH_KDF_X9_62" text="int ECDH_KDF_X9_62(unsigned char *out, size_t outlen,&#10;                   const unsigned char *Z, size_t Zlen,&#10;                   const unsigned char *sinfo, size_t sinfolen,&#10;                   const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdh.h">
  <args>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="outlen" text="size_t outlen" mod=""/>
    <arg type="const unsigned char" id="Z" text="const unsigned char *Z" mod=""/>
    <arg type="size_t" id="Zlen" text="size_t Zlen" mod=""/>
    <arg type="const unsigned char" id="sinfo" text="const unsigned char *sinfo" mod=""/>
    <arg type="size_t" id="sinfolen" text="size_t sinfolen" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_ECDH_strings" text="void ERR_load_ECDH_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ecdh.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="BUF_MEM" id="BUF_MEM_new" text="BUF_MEM *BUF_MEM_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BUF_MEM_free" text="void BUF_MEM_free(BUF_MEM *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="BUF_MEM" id="a" text="BUF_MEM *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BUF_MEM_grow" text="int BUF_MEM_grow(BUF_MEM *str, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="BUF_MEM" id="str" text="BUF_MEM *str" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BUF_MEM_grow_clean" text="int BUF_MEM_grow_clean(BUF_MEM *str, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="BUF_MEM" id="str" text="BUF_MEM *str" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="BUF_strnlen" text="size_t BUF_strnlen(const char *str, size_t maxlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="size_t" id="maxlen" text="size_t maxlen" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="BUF_strdup" text="char *BUF_strdup(const char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="const char" id="str" text="const char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="BUF_strndup" text="char *BUF_strndup(const char *str, size_t siz)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="size_t" id="siz" text="size_t siz" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BUF_memdup" text="void *BUF_memdup(const void *data, size_t siz)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="siz" text="size_t siz" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BUF_reverse" text="void BUF_reverse(unsigned char *out, const unsigned char *in, size_t siz)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="size_t" id="siz" text="size_t siz" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="BUF_strlcpy" text="size_t BUF_strlcpy(char *dst, const char *src, size_t siz)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="char" id="dst" text="char *dst" mod=""/>
    <arg type="const char" id="src" text="const char *src" mod=""/>
    <arg type="size_t" id="siz" text="size_t siz" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="BUF_strlcat" text="size_t BUF_strlcat(char *dst, const char *src, size_t siz)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="char" id="dst" text="char *dst" mod=""/>
    <arg type="const char" id="src" text="const char *src" mod=""/>
    <arg type="size_t" id="siz" text="size_t siz" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_BUF_strings" text="void ERR_load_BUF_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/buffer.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="const void" id="_STACK" text="typedef struct stack_st {&#10;    int num;&#10;    char **data;&#10;    int sorted;&#10;    int num_alloc;&#10;    int (*comp) (const void *, const void *);&#10;} _STACK" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="const void" id="ANON0" text="const void *" mod=""/>
    <arg type="const void" id="ANON1" text="const void *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="sk_num" text="int sk_num(const _STACK *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="const _STACK" id="ANON2" text="const _STACK *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="sk_value" text="void *sk_value(const _STACK *, int)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="const _STACK" id="ANON3" text="const _STACK *" mod=""/>
    <arg type="int" id="ANON4" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="sk_set" text="void *sk_set(_STACK *, int, void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="ANON5" text="_STACK *" mod=""/>
    <arg type="int" id="ANON6" text="int" mod=""/>
    <arg type="void" id="ANON7" text="void *" mod=""/>
  </args>
</fdecl>
<fdecl type="_STACK" id="sk_new" text="_STACK *sk_new(int (*cmp) (const void *, const void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="int" id="cmp" text="int (*cmp) (const void *, const void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="_STACK" id="sk_new_null" text="_STACK *sk_new_null(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="sk_free" text="void sk_free(_STACK *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="ANON9" text="_STACK *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="sk_pop_free" text="void sk_pop_free(_STACK *st, void (*func) (void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
    <arg type="void" id="func" text="void (*func) (void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="_STACK" id="sk_deep_copy" text="_STACK *sk_deep_copy(_STACK *, void *(*)(void *), void (*)(void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="ANON10" text="_STACK *" mod=""/>
    <arg type="void" id="ANON11" text="void *(*)(void *)" mod=""/>
    <arg type="void" id="ANON12" text="void (*)(void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="sk_insert" text="int sk_insert(_STACK *sk, void *data, int where)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="sk" text="_STACK *sk" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
    <arg type="int" id="where" text="int where" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="sk_delete" text="void *sk_delete(_STACK *st, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="sk_delete_ptr" text="void *sk_delete_ptr(_STACK *st, void *p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
    <arg type="void" id="p" text="void *p" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="sk_find" text="int sk_find(_STACK *st, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="sk_find_ex" text="int sk_find_ex(_STACK *st, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="sk_push" text="int sk_push(_STACK *st, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="sk_unshift" text="int sk_unshift(_STACK *st, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="sk_shift" text="void *sk_shift(_STACK *st)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="sk_pop" text="void *sk_pop(_STACK *st)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="sk_zero" text="void sk_zero(_STACK *st)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="sk_set_cmp_func" text="int (*sk_set_cmp_func(_STACK *sk, int (*c) (const void *, const void *)))&#10; (const void *, const void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="sk" text="_STACK *sk" mod=""/>
    <arg type="int" id="c" text="int (*c) (const void *, const void *)" mod=""/>
    <arg type="const void" id="ANON13" text="const void *" mod=""/>
    <arg type="const void" id="ANON14" text="const void *" mod=""/>
  </args>
</fdecl>
<fdecl type="_STACK" id="sk_dup" text="_STACK *sk_dup(_STACK *st)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="sk_sort" text="void sk_sort(_STACK *st)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="_STACK" id="st" text="_STACK *st" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="sk_is_sorted" text="int sk_is_sorted(const _STACK *st)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/stack.h">
  <args>
    <arg type="const _STACK" id="st" text="const _STACK *st" mod=""/>
  </args>
</fdecl>


<fdecl type="__ssize_t" id="__io_read_fn" text="typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes)" file="/usr/include/libio.h">
  <args>
    <arg type="void" id="__cookie" text="void *__cookie" mod=""/>
    <arg type="char" id="__buf" text="char *__buf" mod=""/>
    <arg type="size_t" id="__nbytes" text="size_t __nbytes" mod=""/>
  </args>
</fdecl>
<fdecl type="__ssize_t" id="__io_write_fn" text="typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,&#10;     size_t __n)" file="/usr/include/libio.h">
  <args>
    <arg type="void" id="__cookie" text="void *__cookie" mod=""/>
    <arg type="const char" id="__buf" text="const char *__buf" mod=""/>
    <arg type="size_t" id="__n" text="size_t __n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="__io_seek_fn" text="typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w)" file="/usr/include/libio.h">
  <args>
    <arg type="void" id="__cookie" text="void *__cookie" mod=""/>
    <arg type="__off64_t" id="__pos" text="__off64_t *__pos" mod=""/>
    <arg type="int" id="__w" text="int __w" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="__io_close_fn" text="typedef int __io_close_fn (void *__cookie)" file="/usr/include/libio.h">
  <args>
    <arg type="void" id="__cookie" text="void *__cookie" mod=""/>
  </args>
</fdecl>
<fdecl type="extern void" id="_IO_cookie_init" text="extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,&#10;        void *__cookie, _IO_cookie_io_functions_t __fns)" file="/usr/include/libio.h">
  <args>
    <arg type="struct _IO_cookie_file" id="__cfile" text="struct _IO_cookie_file *__cfile" mod=""/>
    <arg type="int" id="__read_write" text="int __read_write" mod=""/>
    <arg type="void" id="__cookie" text="void *__cookie" mod=""/>
    <arg type="_IO_cookie_io_functions_t" id="__fns" text="_IO_cookie_io_functions_t __fns" mod=""/>
  </args>
</fdecl>
<fdecl type="extern int" id="__underflow" text="extern int __underflow (_IO_FILE *)" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON0" text="_IO_FILE *" mod=""/>
  </args>
</fdecl>
<fdecl type="extern int" id="__uflow" text="extern int __uflow (_IO_FILE *)" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON1" text="_IO_FILE *" mod=""/>
  </args>
</fdecl>
<fdecl type="extern int" id="__overflow" text="extern int __overflow (_IO_FILE *, int)" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON2" text="_IO_FILE *" mod=""/>
    <arg type="int" id="ANON3" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="extern int" id="_IO_getc" text="extern int _IO_getc (_IO_FILE *__fp)" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="__fp" text="_IO_FILE *__fp" mod=""/>
  </args>
</fdecl>
<fdecl type="extern int" id="_IO_putc" text="extern int _IO_putc (int __c, _IO_FILE *__fp)" file="/usr/include/libio.h">
  <args>
    <arg type="int" id="__c" text="int __c" mod=""/>
    <arg type="_IO_FILE" id="__fp" text="_IO_FILE *__fp" mod=""/>
  </args>
</fdecl>
<fdecl type="extern int" id="_IO_feof" text="extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__))" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="__fp" text="_IO_FILE *__fp" mod=""/>
  </args>
</fdecl>
<fdecl type="extern int" id="_IO_ferror" text="extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__))" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="__fp" text="_IO_FILE *__fp" mod=""/>
  </args>
</fdecl>
<fdecl type="extern int" id="_IO_peekc_locked" text="extern int _IO_peekc_locked (_IO_FILE *__fp)" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="__fp" text="_IO_FILE *__fp" mod=""/>
  </args>
</fdecl>
<fdecl type="extern void" id="_IO_flockfile" text="extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__))" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON4" text="_IO_FILE *" mod=""/>
  </args>
</fdecl>
<fdecl type="extern void" id="_IO_funlockfile" text="extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__))" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON5" text="_IO_FILE *" mod=""/>
  </args>
</fdecl>
<fdecl type="extern int" id="_IO_ftrylockfile" text="extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__))" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON6" text="_IO_FILE *" mod=""/>
  </args>
</fdecl>
<fdecl type="extern int" id="_IO_vfscanf" text="extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,&#10;   __gnuc_va_list, int *__restrict)" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON7" text="_IO_FILE * __restrict" mod=""/>
    <arg type="const char" id="ANON8" text="const char * __restrict" mod=""/>
    <arg type="__gnuc_va_list" id="ANON9" text="__gnuc_va_list" mod=""/>
    <arg type="int" id="ANON10" text="int *__restrict" mod=""/>
  </args>
</fdecl>
<fdecl type="extern int" id="_IO_vfprintf" text="extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,&#10;    __gnuc_va_list)" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON11" text="_IO_FILE *__restrict" mod=""/>
    <arg type="const char" id="ANON12" text="const char *__restrict" mod=""/>
    <arg type="__gnuc_va_list" id="ANON13" text="__gnuc_va_list" mod=""/>
  </args>
</fdecl>
<fdecl type="extern __ssize_t" id="_IO_padn" text="extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t)" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON14" text="_IO_FILE *" mod=""/>
    <arg type="int" id="ANON15" text="int" mod=""/>
    <arg type="__ssize_t" id="ANON16" text="__ssize_t" mod=""/>
  </args>
</fdecl>
<fdecl type="extern size_t" id="_IO_sgetn" text="extern size_t _IO_sgetn (_IO_FILE *, void *, size_t)" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON17" text="_IO_FILE *" mod=""/>
    <arg type="void" id="ANON18" text="void *" mod=""/>
    <arg type="size_t" id="ANON19" text="size_t" mod=""/>
  </args>
</fdecl>
<fdecl type="extern __off64_t" id="_IO_seekoff" text="extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int)" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON20" text="_IO_FILE *" mod=""/>
    <arg type="__off64_t" id="ANON21" text="__off64_t" mod=""/>
    <arg type="int" id="ANON22" text="int" mod=""/>
    <arg type="int" id="ANON23" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="extern __off64_t" id="_IO_seekpos" text="extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int)" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON24" text="_IO_FILE *" mod=""/>
    <arg type="__off64_t" id="ANON25" text="__off64_t" mod=""/>
    <arg type="int" id="ANON26" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="extern void" id="_IO_free_backup_area" text="extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__))" file="/usr/include/libio.h">
  <args>
    <arg type="_IO_FILE" id="ANON27" text="_IO_FILE *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BIO_set_flags" text="void BIO_set_flags(BIO *b, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_test_flags" text="int BIO_test_flags(const BIO *b, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const BIO" id="b" text="const BIO *b" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BIO_clear_flags" text="void BIO_clear_flags(BIO *b, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="BIO_get_callback" text="long (*BIO_get_callback(const BIO *b)) (struct bio_st *, int, const char *,&#10;                                        int, long, long)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const BIO" id="b" text="const BIO *b" mod=""/>
    <arg type="struct bio_st" id="ANON28" text="struct bio_st *" mod=""/>
    <arg type="int" id="ANON29" text="int" mod=""/>
    <arg type="const char" id="ANON30" text="const char *" mod=""/>
    <arg type="int" id="ANON31" text="int" mod=""/>
    <arg type="long" id="ANON32" text="long" mod=""/>
    <arg type="long" id="ANON33" text="long" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BIO_set_callback" text="void BIO_set_callback(BIO *b,&#10;                      long (*callback) (struct bio_st *, int, const char *,&#10;                                        int, long, long))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="long" id="callback" text="long (*callback) (struct bio_st *, int, const char *,&#10;                                        int, long, long)" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="BIO_get_callback_arg" text="char *BIO_get_callback_arg(const BIO *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const BIO" id="b" text="const BIO *b" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BIO_set_callback_arg" text="void BIO_set_callback_arg(BIO *b, char *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="char" id="arg" text="char *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="BIO_method_name" text="const char *BIO_method_name(const BIO *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const BIO" id="b" text="const BIO *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_method_type" text="int BIO_method_type(const BIO *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const BIO" id="b" text="const BIO *b" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="bio_info_cb" text="typedef void bio_info_cb (struct bio_st *, int, const char *, int, long,&#10;                          long)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="struct bio_st" id="ANON34" text="struct bio_st *" mod=""/>
    <arg type="int" id="ANON35" text="int" mod=""/>
    <arg type="const char" id="ANON36" text="const char *" mod=""/>
    <arg type="int" id="ANON37" text="int" mod=""/>
    <arg type="long" id="ANON38" text="long" mod=""/>
    <arg type="long" id="ANON39" text="long" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_METHOD" text="typedef struct bio_method_st {&#10;    int type;&#10;    const char *name;&#10;    int (*bwrite) (BIO *, const char *, int);&#10;    int (*bread) (BIO *, char *, int);&#10;    int (*bputs) (BIO *, const char *);&#10;    int (*bgets) (BIO *, char *, int);&#10;    long (*ctrl) (BIO *, int, long, void *);&#10;    int (*create) (BIO *);&#10;    int (*destroy) (BIO *);&#10;    long (*callback_ctrl) (BIO *, int, bio_info_cb *);&#10;} BIO_METHOD" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="ANON40" text="BIO *" mod=""/>
    <arg type="const char" id="ANON41" text="const char *" mod=""/>
    <arg type="int" id="ANON42" text="int" mod=""/>
    <arg type="BIO" id="ANON43" text="BIO *" mod=""/>
    <arg type="char" id="ANON44" text="char *" mod=""/>
    <arg type="int" id="ANON45" text="int" mod=""/>
    <arg type="BIO" id="ANON46" text="BIO *" mod=""/>
    <arg type="const char" id="ANON47" text="const char *" mod=""/>
    <arg type="BIO" id="ANON48" text="BIO *" mod=""/>
    <arg type="char" id="ANON49" text="char *" mod=""/>
    <arg type="int" id="ANON50" text="int" mod=""/>
    <arg type="BIO" id="ANON51" text="BIO *" mod=""/>
    <arg type="int" id="ANON52" text="int" mod=""/>
    <arg type="long" id="ANON53" text="long" mod=""/>
    <arg type="void" id="ANON54" text="void *" mod=""/>
    <arg type="BIO" id="ANON55" text="BIO *" mod=""/>
    <arg type="BIO" id="ANON56" text="BIO *" mod=""/>
    <arg type="BIO" id="ANON57" text="BIO *" mod=""/>
    <arg type="int" id="ANON58" text="int" mod=""/>
    <arg type="bio_info_cb" id="ANON59" text="bio_info_cb *" mod=""/>
  </args>
</fdecl>
<fdecl type="struct bio_st" id="ANON60" text="struct bio_st {&#10;    BIO_METHOD *method;&#10;&#10;    long (*callback) (struct bio_st *, int, const char *, int, long, long);&#10;    char *cb_arg;&#10;    int init;&#10;    int shutdown;&#10;    int flags;&#10;    int retry_reason;&#10;    int num;&#10;    void *ptr;&#10;    struct bio_st *next_bio;&#10;    struct bio_st *prev_bio;&#10;    int references;&#10;    unsigned long num_read;&#10;    unsigned long num_write;&#10;    CRYPTO_EX_DATA ex_data;&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="struct bio_st" id="ANON61" text="struct bio_st *" mod=""/>
    <arg type="int" id="ANON62" text="int" mod=""/>
    <arg type="const char" id="ANON63" text="const char *" mod=""/>
    <arg type="int" id="ANON64" text="int" mod=""/>
    <arg type="long" id="ANON65" text="long" mod=""/>
    <arg type="long" id="ANON66" text="long" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="asn1_ps_func" text="typedef int asn1_ps_func (BIO *b, unsigned char **pbuf, int *plen,&#10;                          void *parg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="unsigned char" id="pbuf" text="unsigned char **pbuf" mod=""/>
    <arg type="int" id="plen" text="int *plen" mod=""/>
    <arg type="void" id="parg" text="void *parg" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="BIO_ctrl_pending" text="size_t BIO_ctrl_pending(BIO *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="BIO_ctrl_wpending" text="size_t BIO_ctrl_wpending(BIO *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="BIO_ctrl_get_write_guarantee" text="size_t BIO_ctrl_get_write_guarantee(BIO *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="BIO_ctrl_get_read_request" text="size_t BIO_ctrl_get_read_request(BIO *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_ctrl_reset_read_request" text="int BIO_ctrl_reset_read_request(BIO *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_set_ex_data" text="int BIO_set_ex_data(BIO *bio, int idx, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BIO_get_ex_data" text="void *BIO_get_ex_data(BIO *bio, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_get_ex_new_index" text="int BIO_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,&#10;                         CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="BIO_number_read" text="unsigned long BIO_number_read(BIO *bio)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="BIO_number_written" text="unsigned long BIO_number_written(BIO *bio)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_asn1_set_prefix" text="int BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix,&#10;                        asn1_ps_func *prefix_free)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="asn1_ps_func" id="prefix" text="asn1_ps_func *prefix" mod=""/>
    <arg type="asn1_ps_func" id="prefix_free" text="asn1_ps_func *prefix_free" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_asn1_get_prefix" text="int BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix,&#10;                        asn1_ps_func **pprefix_free)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="asn1_ps_func" id="pprefix" text="asn1_ps_func **pprefix" mod=""/>
    <arg type="asn1_ps_func" id="pprefix_free" text="asn1_ps_func **pprefix_free" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_asn1_set_suffix" text="int BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix,&#10;                        asn1_ps_func *suffix_free)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="asn1_ps_func" id="suffix" text="asn1_ps_func *suffix" mod=""/>
    <arg type="asn1_ps_func" id="suffix_free" text="asn1_ps_func *suffix_free" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_asn1_get_suffix" text="int BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,&#10;                        asn1_ps_func **psuffix_free)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="asn1_ps_func" id="psuffix" text="asn1_ps_func **psuffix" mod=""/>
    <arg type="asn1_ps_func" id="psuffix_free" text="asn1_ps_func **psuffix_free" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_s_file" text="BIO_METHOD *BIO_s_file(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON67" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_file" text="BIO *BIO_new_file(const char *filename, const char *mode)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const char" id="filename" text="const char *filename" mod=""/>
    <arg type="const char" id="mode" text="const char *mode" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_fp" text="BIO *BIO_new_fp(FILE *stream, int close_flag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="FILE" id="stream" text="FILE *stream" mod=""/>
    <arg type="int" id="close_flag" text="int close_flag" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new" text="BIO *BIO_new(BIO_METHOD *type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO_METHOD" id="type" text="BIO_METHOD *type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_set" text="int BIO_set(BIO *a, BIO_METHOD *type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="a" text="BIO *a" mod=""/>
    <arg type="BIO_METHOD" id="type" text="BIO_METHOD *type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_free" text="int BIO_free(BIO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="a" text="BIO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BIO_vfree" text="void BIO_vfree(BIO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="a" text="BIO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_read" text="int BIO_read(BIO *b, void *data, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_gets" text="int BIO_gets(BIO *bp, char *buf, int size)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_write" text="int BIO_write(BIO *b, const void *data, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_puts" text="int BIO_puts(BIO *bp, const char *buf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const char" id="buf" text="const char *buf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_indent" text="int BIO_indent(BIO *b, int indent, int max)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="int" id="max" text="int max" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="BIO_ctrl" text="long BIO_ctrl(BIO *bp, int cmd, long larg, void *parg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="larg" text="long larg" mod=""/>
    <arg type="void" id="parg" text="void *parg" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="BIO_callback_ctrl" text="long BIO_callback_ctrl(BIO *b, int cmd,&#10;                       void (*fp) (struct bio_st *, int, const char *, int,&#10;                                   long, long))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="void" id="fp" text="void (*fp) (struct bio_st *, int, const char *, int,&#10;                                   long, long)" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="BIO_ptr_ctrl" text="char *BIO_ptr_ctrl(BIO *bp, int cmd, long larg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="larg" text="long larg" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="BIO_int_ctrl" text="long BIO_int_ctrl(BIO *bp, int cmd, long larg, int iarg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="larg" text="long larg" mod=""/>
    <arg type="int" id="iarg" text="int iarg" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_push" text="BIO *BIO_push(BIO *b, BIO *append)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="BIO" id="append" text="BIO *append" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_pop" text="BIO *BIO_pop(BIO *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BIO_free_all" text="void BIO_free_all(BIO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="a" text="BIO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_find_type" text="BIO *BIO_find_type(BIO *b, int bio_type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="int" id="bio_type" text="int bio_type" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_next" text="BIO *BIO_next(BIO *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_get_retry_BIO" text="BIO *BIO_get_retry_BIO(BIO *bio, int *reason)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="int" id="reason" text="int *reason" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_get_retry_reason" text="int BIO_get_retry_reason(BIO *bio)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_dup_chain" text="BIO *BIO_dup_chain(BIO *in)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_nread0" text="int BIO_nread0(BIO *bio, char **buf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="char" id="buf" text="char **buf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_nread" text="int BIO_nread(BIO *bio, char **buf, int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="char" id="buf" text="char **buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_nwrite0" text="int BIO_nwrite0(BIO *bio, char **buf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="char" id="buf" text="char **buf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_nwrite" text="int BIO_nwrite(BIO *bio, char **buf, int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="char" id="buf" text="char **buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="BIO_debug_callback" text="long BIO_debug_callback(BIO *bio, int cmd, const char *argp, int argi,&#10;                        long argl, long ret)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="const char" id="argp" text="const char *argp" mod=""/>
    <arg type="int" id="argi" text="int argi" mod=""/>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="long" id="ret" text="long ret" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_s_mem" text="BIO_METHOD *BIO_s_mem(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON68" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_mem_buf" text="BIO *BIO_new_mem_buf(const void *buf, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const void" id="buf" text="const void *buf" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_s_socket" text="BIO_METHOD *BIO_s_socket(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON69" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_s_connect" text="BIO_METHOD *BIO_s_connect(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON70" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_s_accept" text="BIO_METHOD *BIO_s_accept(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON71" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_s_fd" text="BIO_METHOD *BIO_s_fd(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON72" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_s_log" text="BIO_METHOD *BIO_s_log(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON73" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_s_bio" text="BIO_METHOD *BIO_s_bio(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON74" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_s_null" text="BIO_METHOD *BIO_s_null(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON75" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_f_null" text="BIO_METHOD *BIO_f_null(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON76" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_f_buffer" text="BIO_METHOD *BIO_f_buffer(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON77" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_f_nbio_test" text="BIO_METHOD *BIO_f_nbio_test(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON78" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_s_datagram" text="BIO_METHOD *BIO_s_datagram(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON79" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_sock_should_retry" text="int BIO_sock_should_retry(int i)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="i" text="int i" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_sock_non_fatal_error" text="int BIO_sock_non_fatal_error(int error)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="error" text="int error" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_dgram_non_fatal_error" text="int BIO_dgram_non_fatal_error(int error)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="error" text="int error" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_fd_should_retry" text="int BIO_fd_should_retry(int i)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="i" text="int i" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_fd_non_fatal_error" text="int BIO_fd_non_fatal_error(int error)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="error" text="int error" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_dump_cb" text="int BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),&#10;                void *u, const char *s, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="cb" text="int (*cb) (const void *data, size_t len, void *u)" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
    <arg type="const char" id="s" text="const char *s" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_dump_indent_cb" text="int BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),&#10;                       void *u, const char *s, int len, int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="cb" text="int (*cb) (const void *data, size_t len, void *u)" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
    <arg type="const char" id="s" text="const char *s" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_dump" text="int BIO_dump(BIO *b, const char *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="const char" id="bytes" text="const char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_dump_indent" text="int BIO_dump_indent(BIO *b, const char *bytes, int len, int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="const char" id="bytes" text="const char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_dump_fp" text="int BIO_dump_fp(FILE *fp, const char *s, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const char" id="s" text="const char *s" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_dump_indent_fp" text="int BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const char" id="s" text="const char *s" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_hex_string" text="int BIO_hex_string(BIO *out, int indent, int width, unsigned char *data,&#10;                   int datalen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="int" id="width" text="int width" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char *data" mod=""/>
    <arg type="int" id="datalen" text="int datalen" mod=""/>
  </args>
</fdecl>
<fdecl type="struct hostent" id="BIO_gethostbyname" text="struct hostent *BIO_gethostbyname(const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_sock_error" text="int BIO_sock_error(int sock)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="sock" text="int sock" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_socket_ioctl" text="int BIO_socket_ioctl(int fd, long type, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="fd" text="int fd" mod=""/>
    <arg type="long" id="type" text="long type" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_socket_nbio" text="int BIO_socket_nbio(int fd, int mode)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="fd" text="int fd" mod=""/>
    <arg type="int" id="mode" text="int mode" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_get_port" text="int BIO_get_port(const char *str, unsigned short *port_ptr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="unsigned short" id="port_ptr" text="unsigned short *port_ptr" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_get_host_ip" text="int BIO_get_host_ip(const char *str, unsigned char *ip)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="unsigned char" id="ip" text="unsigned char *ip" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_get_accept_socket" text="int BIO_get_accept_socket(char *host_port, int mode)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="char" id="host_port" text="char *host_port" mod=""/>
    <arg type="int" id="mode" text="int mode" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_accept" text="int BIO_accept(int sock, char **ip_port)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="sock" text="int sock" mod=""/>
    <arg type="char" id="ip_port" text="char **ip_port" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_sock_init" text="int BIO_sock_init(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON80" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BIO_sock_cleanup" text="void BIO_sock_cleanup(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON81" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_set_tcp_ndelay" text="int BIO_set_tcp_ndelay(int sock, int turn_on)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="sock" text="int sock" mod=""/>
    <arg type="int" id="turn_on" text="int turn_on" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_socket" text="BIO *BIO_new_socket(int sock, int close_flag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="sock" text="int sock" mod=""/>
    <arg type="int" id="close_flag" text="int close_flag" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_dgram" text="BIO *BIO_new_dgram(int fd, int close_flag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="fd" text="int fd" mod=""/>
    <arg type="int" id="close_flag" text="int close_flag" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_fd" text="BIO *BIO_new_fd(int fd, int close_flag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="int" id="fd" text="int fd" mod=""/>
    <arg type="int" id="close_flag" text="int close_flag" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_connect" text="BIO *BIO_new_connect(const char *host_port)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const char" id="host_port" text="const char *host_port" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_accept" text="BIO *BIO_new_accept(const char *host_port)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="const char" id="host_port" text="const char *host_port" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_new_bio_pair" text="int BIO_new_bio_pair(BIO **bio1, size_t writebuf1,&#10;                     BIO **bio2, size_t writebuf2)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio1" text="BIO **bio1" mod=""/>
    <arg type="size_t" id="writebuf1" text="size_t writebuf1" mod=""/>
    <arg type="BIO" id="bio2" text="BIO **bio2" mod=""/>
    <arg type="size_t" id="writebuf2" text="size_t writebuf2" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BIO_copy_next_retry" text="void BIO_copy_next_retry(BIO *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_printf" text="int BIO_printf(BIO *bio, const char *format, ...)&#10;__attribute__((__format__(__printf__, 2, 3)))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="const char" id="format" text="const char *format" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_vprintf" text="int BIO_vprintf(BIO *bio, const char *format, va_list args)&#10;__attribute__((__format__(__printf__, 2, 0)))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="const char" id="format" text="const char *format" mod=""/>
    <arg type="va_list" id="args" text="va_list args" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_snprintf" text="int BIO_snprintf(char *buf, size_t n, const char *format, ...)&#10;__attribute__((__format__(__printf__, 3, 4)))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="const char" id="format" text="const char *format" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_vsnprintf" text="int BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)&#10;__attribute__((__format__(__printf__, 3, 0)))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="size_t" id="n" text="size_t n" mod=""/>
    <arg type="const char" id="format" text="const char *format" mod=""/>
    <arg type="va_list" id="args" text="va_list args" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_BIO_strings" text="void ERR_load_BIO_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/bio.h">
  <args>
    <arg type="void" id="ANON82" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="LHASH_COMP_FN_TYPE" text="typedef int (*LHASH_COMP_FN_TYPE) (const void *, const void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="const void" id="ANON0" text="const void *" mod=""/>
    <arg type="const void" id="ANON1" text="const void *" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="LHASH_HASH_FN_TYPE" text="typedef unsigned long (*LHASH_HASH_FN_TYPE) (const void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="const void" id="ANON2" text="const void *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="LHASH_DOALL_FN_TYPE" text="typedef void (*LHASH_DOALL_FN_TYPE) (void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="void" id="ANON3" text="void *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="LHASH_DOALL_ARG_FN_TYPE" text="typedef void (*LHASH_DOALL_ARG_FN_TYPE) (void *, void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="void" id="ANON4" text="void *" mod=""/>
    <arg type="void" id="ANON5" text="void *" mod=""/>
  </args>
</fdecl>
<fdecl type="_LHASH" id="lh_new" text="_LHASH *lh_new(LHASH_HASH_FN_TYPE h, LHASH_COMP_FN_TYPE c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="LHASH_HASH_FN_TYPE" id="h" text="LHASH_HASH_FN_TYPE h" mod=""/>
    <arg type="LHASH_COMP_FN_TYPE" id="c" text="LHASH_COMP_FN_TYPE c" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_free" text="void lh_free(_LHASH *lh)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="_LHASH" id="lh" text="_LHASH *lh" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_insert" text="void *lh_insert(_LHASH *lh, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="_LHASH" id="lh" text="_LHASH *lh" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_delete" text="void *lh_delete(_LHASH *lh, const void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="_LHASH" id="lh" text="_LHASH *lh" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_retrieve" text="void *lh_retrieve(_LHASH *lh, const void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="_LHASH" id="lh" text="_LHASH *lh" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_doall" text="void lh_doall(_LHASH *lh, LHASH_DOALL_FN_TYPE func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="_LHASH" id="lh" text="_LHASH *lh" mod=""/>
    <arg type="LHASH_DOALL_FN_TYPE" id="func" text="LHASH_DOALL_FN_TYPE func" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_doall_arg" text="void lh_doall_arg(_LHASH *lh, LHASH_DOALL_ARG_FN_TYPE func, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="_LHASH" id="lh" text="_LHASH *lh" mod=""/>
    <arg type="LHASH_DOALL_ARG_FN_TYPE" id="func" text="LHASH_DOALL_ARG_FN_TYPE func" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="lh_strhash" text="unsigned long lh_strhash(const char *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="const char" id="c" text="const char *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="lh_num_items" text="unsigned long lh_num_items(const _LHASH *lh)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="const _LHASH" id="lh" text="const _LHASH *lh" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_stats" text="void lh_stats(const _LHASH *lh, FILE *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="const _LHASH" id="lh" text="const _LHASH *lh" mod=""/>
    <arg type="FILE" id="out" text="FILE *out" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_node_stats" text="void lh_node_stats(const _LHASH *lh, FILE *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="const _LHASH" id="lh" text="const _LHASH *lh" mod=""/>
    <arg type="FILE" id="out" text="FILE *out" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_node_usage_stats" text="void lh_node_usage_stats(const _LHASH *lh, FILE *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="const _LHASH" id="lh" text="const _LHASH *lh" mod=""/>
    <arg type="FILE" id="out" text="FILE *out" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_stats_bio" text="void lh_stats_bio(const _LHASH *lh, BIO *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="const _LHASH" id="lh" text="const _LHASH *lh" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_node_stats_bio" text="void lh_node_stats_bio(const _LHASH *lh, BIO *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="const _LHASH" id="lh" text="const _LHASH *lh" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="lh_node_usage_stats_bio" text="void lh_node_usage_stats_bio(const _LHASH *lh, BIO *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/lhash.h">
  <args>
    <arg type="const _LHASH" id="lh" text="const _LHASH *lh" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
  </args>
</fdecl>

<fdecl type="const void" id="ANON0" text="struct rand_meth_st {&#10;    void (*seed) (const void *buf, int num);&#10;    int (*bytes) (unsigned char *buf, int num);&#10;    void (*cleanup) (void);&#10;    void (*add) (const void *buf, int num, double entropy);&#10;    int (*pseudorand) (unsigned char *buf, int num);&#10;    int (*status) (void);&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="const void" id="buf" text="const void *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="unsigned char" id="buf" text="unsigned char *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="void" id="ANON1" text="void" mod=""/>
    <arg type="const void" id="buf" text="const void *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="double" id="entropy" text="double entropy" mod=""/>
    <arg type="unsigned char" id="buf" text="unsigned char *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RAND_set_rand_method" text="int RAND_set_rand_method(const RAND_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="const RAND_METHOD" id="meth" text="const RAND_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="const RAND_METHOD" id="RAND_get_rand_method" text="const RAND_METHOD *RAND_get_rand_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RAND_set_rand_engine" text="int RAND_set_rand_engine(ENGINE *engine)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="ENGINE" id="engine" text="ENGINE *engine" mod=""/>
  </args>
</fdecl>
<fdecl type="RAND_METHOD" id="RAND_SSLeay" text="RAND_METHOD *RAND_SSLeay(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RAND_cleanup" text="void RAND_cleanup(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RAND_bytes" text="int RAND_bytes(unsigned char *buf, int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="unsigned char" id="buf" text="unsigned char *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RAND_pseudo_bytes" text="int RAND_pseudo_bytes(unsigned char *buf, int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="unsigned char" id="buf" text="unsigned char *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RAND_seed" text="void RAND_seed(const void *buf, int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="const void" id="buf" text="const void *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="RAND_add" text="void RAND_add(const void *buf, int num, double entropy)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="const void" id="buf" text="const void *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="double" id="entropy" text="double entropy" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RAND_load_file" text="int RAND_load_file(const char *file, long max_bytes)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="long" id="max_bytes" text="long max_bytes" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RAND_write_file" text="int RAND_write_file(const char *file)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="const char" id="file" text="const char *file" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="RAND_file_name" text="const char *RAND_file_name(char *file, size_t num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="char" id="file" text="char *file" mod=""/>
    <arg type="size_t" id="num" text="size_t num" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RAND_status" text="int RAND_status(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RAND_query_egd_bytes" text="int RAND_query_egd_bytes(const char *path, unsigned char *buf, int bytes)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="const char" id="path" text="const char *path" mod=""/>
    <arg type="unsigned char" id="buf" text="unsigned char *buf" mod=""/>
    <arg type="int" id="bytes" text="int bytes" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RAND_egd" text="int RAND_egd(const char *path)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="const char" id="path" text="const char *path" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RAND_egd_bytes" text="int RAND_egd_bytes(const char *path, int bytes)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="const char" id="path" text="const char *path" mod=""/>
    <arg type="int" id="bytes" text="int bytes" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="RAND_poll" text="int RAND_poll(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_RAND_strings" text="void ERR_load_RAND_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/rand.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="ERR_put_error" text="void ERR_put_error(int lib, int func, int reason, const char *file, int line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="int" id="lib" text="int lib" mod=""/>
    <arg type="int" id="func" text="int func" mod=""/>
    <arg type="int" id="reason" text="int reason" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="line" text="int line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_set_error_data" text="void ERR_set_error_data(char *data, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="char" id="data" text="char *data" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ERR_get_error" text="unsigned long ERR_get_error(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ERR_get_error_line" text="unsigned long ERR_get_error_line(const char **file, int *line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="const char" id="file" text="const char **file" mod=""/>
    <arg type="int" id="line" text="int *line" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ERR_get_error_line_data" text="unsigned long ERR_get_error_line_data(const char **file, int *line,&#10;                                      const char **data, int *flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="const char" id="file" text="const char **file" mod=""/>
    <arg type="int" id="line" text="int *line" mod=""/>
    <arg type="const char" id="data" text="const char **data" mod=""/>
    <arg type="int" id="flags" text="int *flags" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ERR_peek_error" text="unsigned long ERR_peek_error(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ERR_peek_error_line" text="unsigned long ERR_peek_error_line(const char **file, int *line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="const char" id="file" text="const char **file" mod=""/>
    <arg type="int" id="line" text="int *line" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ERR_peek_error_line_data" text="unsigned long ERR_peek_error_line_data(const char **file, int *line,&#10;                                       const char **data, int *flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="const char" id="file" text="const char **file" mod=""/>
    <arg type="int" id="line" text="int *line" mod=""/>
    <arg type="const char" id="data" text="const char **data" mod=""/>
    <arg type="int" id="flags" text="int *flags" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ERR_peek_last_error" text="unsigned long ERR_peek_last_error(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ERR_peek_last_error_line" text="unsigned long ERR_peek_last_error_line(const char **file, int *line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="const char" id="file" text="const char **file" mod=""/>
    <arg type="int" id="line" text="int *line" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ERR_peek_last_error_line_data" text="unsigned long ERR_peek_last_error_line_data(const char **file, int *line,&#10;                                            const char **data, int *flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="const char" id="file" text="const char **file" mod=""/>
    <arg type="int" id="line" text="int *line" mod=""/>
    <arg type="const char" id="data" text="const char **data" mod=""/>
    <arg type="int" id="flags" text="int *flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_clear_error" text="void ERR_clear_error(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="ERR_error_string" text="char *ERR_error_string(unsigned long e, char *buf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="unsigned long" id="e" text="unsigned long e" mod=""/>
    <arg type="char" id="buf" text="char *buf" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_error_string_n" text="void ERR_error_string_n(unsigned long e, char *buf, size_t len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="unsigned long" id="e" text="unsigned long e" mod=""/>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="ERR_lib_error_string" text="const char *ERR_lib_error_string(unsigned long e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="unsigned long" id="e" text="unsigned long e" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="ERR_func_error_string" text="const char *ERR_func_error_string(unsigned long e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="unsigned long" id="e" text="unsigned long e" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="ERR_reason_error_string" text="const char *ERR_reason_error_string(unsigned long e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="unsigned long" id="e" text="unsigned long e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_print_errors_cb" text="void ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),&#10;                         void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="int" id="cb" text="int (*cb) (const char *str, size_t len, void *u)" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_print_errors_fp" text="void ERR_print_errors_fp(FILE *fp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_print_errors" text="void ERR_print_errors(BIO *bp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_add_error_data" text="void ERR_add_error_data(int num, ...)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_add_error_vdata" text="void ERR_add_error_vdata(int num, va_list args)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="va_list" id="args" text="va_list args" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_strings" text="void ERR_load_strings(int lib, ERR_STRING_DATA str[])" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="int" id="lib" text="int lib" mod=""/>
    <arg type="ERR_STRING_DATA" id="str" text="ERR_STRING_DATA str[]" mod="str[]"/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_unload_strings" text="void ERR_unload_strings(int lib, ERR_STRING_DATA str[])" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="int" id="lib" text="int lib" mod=""/>
    <arg type="ERR_STRING_DATA" id="str" text="ERR_STRING_DATA str[]" mod="str[]"/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_ERR_strings" text="void ERR_load_ERR_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_crypto_strings" text="void ERR_load_crypto_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_free_strings" text="void ERR_free_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_remove_thread_state" text="void ERR_remove_thread_state(const CRYPTO_THREADID *tid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="const CRYPTO_THREADID" id="tid" text="const CRYPTO_THREADID *tid" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_remove_state" text="void ERR_remove_state(unsigned long pid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="unsigned long" id="pid" text="unsigned long pid" mod=""/>
  </args>
</fdecl>
<fdecl type="ERR_STATE" id="ERR_get_state" text="ERR_STATE *ERR_get_state(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="struct lhash_st_ERR_STRING_DATA" id="ERR_get_string_table" text="struct lhash_st_ERR_STRING_DATA &#10;# 362 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h&quot;&#10;                         *ERR_get_string_table(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="struct lhash_st_ERR_STATE" id="ERR_get_err_state_table" text="struct lhash_st_ERR_STATE &#10;# 363 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h&quot;&#10;                   *ERR_get_err_state_table(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON9" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_release_err_state_table" text="void ERR_release_err_state_table(&#10;# 364 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h&quot; 3 4&#10;                                struct lhash_st_ERR_STATE &#10;# 364 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h&quot;&#10;                                                    **hash)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="struct lhash_st_ERR_STATE" id="hash" text="struct lhash_st_ERR_STATE &#10;# 364 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h&quot;&#10;                                                    **hash" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ERR_get_next_error_library" text="int ERR_get_next_error_library(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON10" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ERR_set_mark" text="int ERR_set_mark(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON11" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ERR_pop_to_mark" text="int ERR_pop_to_mark(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON12" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const ERR_FNS" id="ERR_get_implementation" text="const ERR_FNS *ERR_get_implementation(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="void" id="ANON13" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ERR_set_implementation" text="int ERR_set_implementation(const ERR_FNS *fns)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/err.h">
  <args>
    <arg type="const ERR_FNS" id="fns" text="const ERR_FNS *fns" mod=""/>
  </args>
</fdecl>

<fdecl type="EVP_MD_CTX" id="ANON0" text="struct env_md_st {&#10;    int type;&#10;    int pkey_type;&#10;    int md_size;&#10;    unsigned long flags;&#10;    int (*init) (EVP_MD_CTX *ctx);&#10;    int (*update) (EVP_MD_CTX *ctx, const void *data, size_t count);&#10;    int (*final) (EVP_MD_CTX *ctx, unsigned char *md);&#10;    int (*copy) (EVP_MD_CTX *to, const EVP_MD_CTX *from);&#10;    int (*cleanup) (EVP_MD_CTX *ctx);&#10;&#10;    int (*sign) (int type, const unsigned char *m, unsigned int m_length,&#10;                 unsigned char *sigret, unsigned int *siglen, void *key);&#10;    int (*verify) (int type, const unsigned char *m, unsigned int m_length,&#10;                   const unsigned char *sigbuf, unsigned int siglen,&#10;                   void *key);&#10;    int required_pkey_type[5];&#10;    int block_size;&#10;    int ctx_size;&#10;&#10;    int (*md_ctrl) (EVP_MD_CTX *ctx, int cmd, int p1, void *p2);&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="count" text="size_t count" mod=""/>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="EVP_MD_CTX" id="to" text="EVP_MD_CTX *to" mod=""/>
    <arg type="const EVP_MD_CTX" id="from" text="const EVP_MD_CTX *from" mod=""/>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="m" text="const unsigned char *m" mod=""/>
    <arg type="unsigned int" id="m_length" text="unsigned int m_length" mod=""/>
    <arg type="unsigned char" id="sigret" text="unsigned char *sigret" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int *siglen" mod=""/>
    <arg type="void" id="key" text="void *key" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="m" text="const unsigned char *m" mod=""/>
    <arg type="unsigned int" id="m_length" text="unsigned int m_length" mod=""/>
    <arg type="const unsigned char" id="sigbuf" text="const unsigned char *sigbuf" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int siglen" mod=""/>
    <arg type="void" id="key" text="void *key" mod=""/>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="int" id="p1" text="int p1" mod=""/>
    <arg type="void" id="p2" text="void *p2" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="evp_sign_method" text="typedef int evp_sign_method(int type, const unsigned char *m,&#10;                            unsigned int m_length, unsigned char *sigret,&#10;                            unsigned int *siglen, void *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="m" text="const unsigned char *m" mod=""/>
    <arg type="unsigned int" id="m_length" text="unsigned int m_length" mod=""/>
    <arg type="unsigned char" id="sigret" text="unsigned char *sigret" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int *siglen" mod=""/>
    <arg type="void" id="key" text="void *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="evp_verify_method" text="typedef int evp_verify_method(int type, const unsigned char *m,&#10;                              unsigned int m_length,&#10;                              const unsigned char *sigbuf,&#10;                              unsigned int siglen, void *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="m" text="const unsigned char *m" mod=""/>
    <arg type="unsigned int" id="m_length" text="unsigned int m_length" mod=""/>
    <arg type="const unsigned char" id="sigbuf" text="const unsigned char *sigbuf" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int siglen" mod=""/>
    <arg type="void" id="key" text="void *key" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_MD_CTX" id="ANON1" text="struct env_md_ctx_st {&#10;    const EVP_MD *digest;&#10;    ENGINE *engine;&#10;&#10;    unsigned long flags;&#10;    void *md_data;&#10;&#10;    EVP_PKEY_CTX *pctx;&#10;&#10;    int (*update) (EVP_MD_CTX *ctx, const void *data, size_t count);&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="count" text="size_t count" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_CIPHER_CTX" id="ANON2" text="struct evp_cipher_st {&#10;    int nid;&#10;    int block_size;&#10;&#10;    int key_len;&#10;    int iv_len;&#10;&#10;    unsigned long flags;&#10;&#10;    int (*init) (EVP_CIPHER_CTX *ctx, const unsigned char *key,&#10;                 const unsigned char *iv, int enc);&#10;&#10;    int (*do_cipher) (EVP_CIPHER_CTX *ctx, unsigned char *out,&#10;                      const unsigned char *in, size_t inl);&#10;&#10;    int (*cleanup) (EVP_CIPHER_CTX *);&#10;&#10;    int ctx_size;&#10;&#10;    int (*set_asn1_parameters) (EVP_CIPHER_CTX *, ASN1_TYPE *);&#10;&#10;    int (*get_asn1_parameters) (EVP_CIPHER_CTX *, ASN1_TYPE *);&#10;&#10;    int (*ctrl) (EVP_CIPHER_CTX *, int type, int arg, void *ptr);&#10;&#10;    void *app_data;&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="size_t" id="inl" text="size_t inl" mod=""/>
    <arg type="EVP_CIPHER_CTX" id="ANON3" text="EVP_CIPHER_CTX *" mod=""/>
    <arg type="EVP_CIPHER_CTX" id="ANON4" text="EVP_CIPHER_CTX *" mod=""/>
    <arg type="ASN1_TYPE" id="ANON5" text="ASN1_TYPE *" mod=""/>
    <arg type="EVP_CIPHER_CTX" id="ANON6" text="EVP_CIPHER_CTX *" mod=""/>
    <arg type="ASN1_TYPE" id="ANON7" text="ASN1_TYPE *" mod=""/>
    <arg type="EVP_CIPHER_CTX" id="ANON8" text="EVP_CIPHER_CTX *" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="int" id="arg" text="int arg" mod=""/>
    <arg type="void" id="ptr" text="void *ptr" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PBE_KEYGEN" text="typedef int (EVP_PBE_KEYGEN) (EVP_CIPHER_CTX *ctx, const char *pass,&#10;                              int passlen, ASN1_TYPE *param,&#10;                              const EVP_CIPHER *cipher, const EVP_MD *md,&#10;                              int en_de)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="ASN1_TYPE" id="param" text="ASN1_TYPE *param" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="int" id="en_de" text="int en_de" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_MD_type" text="int EVP_MD_type(const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_MD_pkey_type" text="int EVP_MD_pkey_type(const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_MD_size" text="int EVP_MD_size(const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_MD_block_size" text="int EVP_MD_block_size(const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="EVP_MD_flags" text="unsigned long EVP_MD_flags(const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_MD_CTX_md" text="const EVP_MD *EVP_MD_CTX_md(const EVP_MD_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_MD_CTX" id="ctx" text="const EVP_MD_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_nid" text="int EVP_CIPHER_nid(const EVP_CIPHER *cipher)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_block_size" text="int EVP_CIPHER_block_size(const EVP_CIPHER *cipher)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_key_length" text="int EVP_CIPHER_key_length(const EVP_CIPHER *cipher)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_iv_length" text="int EVP_CIPHER_iv_length(const EVP_CIPHER *cipher)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="EVP_CIPHER_flags" text="unsigned long EVP_CIPHER_flags(const EVP_CIPHER *cipher)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_CIPHER_CTX_cipher" text="const EVP_CIPHER *EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER_CTX" id="ctx" text="const EVP_CIPHER_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_CTX_nid" text="int EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER_CTX" id="ctx" text="const EVP_CIPHER_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_CTX_block_size" text="int EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER_CTX" id="ctx" text="const EVP_CIPHER_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_CTX_key_length" text="int EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER_CTX" id="ctx" text="const EVP_CIPHER_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_CTX_iv_length" text="int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER_CTX" id="ctx" text="const EVP_CIPHER_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_CTX_copy" text="int EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX *out, const EVP_CIPHER_CTX *in)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="out" text="EVP_CIPHER_CTX *out" mod=""/>
    <arg type="const EVP_CIPHER_CTX" id="in" text="const EVP_CIPHER_CTX *in" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_CIPHER_CTX_get_app_data" text="void *EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER_CTX" id="ctx" text="const EVP_CIPHER_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_CIPHER_CTX_set_app_data" text="void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="EVP_CIPHER_CTX_flags" text="unsigned long EVP_CIPHER_CTX_flags(const EVP_CIPHER_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER_CTX" id="ctx" text="const EVP_CIPHER_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_Cipher" text="int EVP_Cipher(EVP_CIPHER_CTX *c,&#10;               unsigned char *out, const unsigned char *in, unsigned int inl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="c" text="EVP_CIPHER_CTX *c" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned int" id="inl" text="unsigned int inl" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_MD_CTX_init" text="void EVP_MD_CTX_init(EVP_MD_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_MD_CTX_cleanup" text="int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_MD_CTX" id="EVP_MD_CTX_create" text="EVP_MD_CTX *EVP_MD_CTX_create(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON9" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_MD_CTX_destroy" text="void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_MD_CTX_copy_ex" text="int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="out" text="EVP_MD_CTX *out" mod=""/>
    <arg type="const EVP_MD_CTX" id="in" text="const EVP_MD_CTX *in" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_MD_CTX_set_flags" text="void EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_MD_CTX_clear_flags" text="void EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_MD_CTX_test_flags" text="int EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_MD_CTX" id="ctx" text="const EVP_MD_CTX *ctx" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DigestInit_ex" text="int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="ENGINE" id="impl" text="ENGINE *impl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DigestUpdate" text="int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="const void" id="d" text="const void *d" mod=""/>
    <arg type="size_t" id="cnt" text="size_t cnt" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DigestFinal_ex" text="int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="s" text="unsigned int *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_Digest" text="int EVP_Digest(const void *data, size_t count,&#10;               unsigned char *md, unsigned int *size, const EVP_MD *type,&#10;               ENGINE *impl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="count" text="size_t count" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="size" text="unsigned int *size" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="ENGINE" id="impl" text="ENGINE *impl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_MD_CTX_copy" text="int EVP_MD_CTX_copy(EVP_MD_CTX *out, const EVP_MD_CTX *in)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="out" text="EVP_MD_CTX *out" mod=""/>
    <arg type="const EVP_MD_CTX" id="in" text="const EVP_MD_CTX *in" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DigestInit" text="int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DigestFinal" text="int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="s" text="unsigned int *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_read_pw_string" text="int EVP_read_pw_string(char *buf, int length, const char *prompt, int verify)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="length" text="int length" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="verify" text="int verify" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_read_pw_string_min" text="int EVP_read_pw_string_min(char *buf, int minlen, int maxlen,&#10;                           const char *prompt, int verify)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="minlen" text="int minlen" mod=""/>
    <arg type="int" id="maxlen" text="int maxlen" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="verify" text="int verify" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_set_pw_prompt" text="void EVP_set_pw_prompt(const char *prompt)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="EVP_get_pw_prompt" text="char *EVP_get_pw_prompt(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON10" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_BytesToKey" text="int EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md,&#10;                   const unsigned char *salt, const unsigned char *data,&#10;                   int datal, int count, unsigned char *key,&#10;                   unsigned char *iv)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER" id="type" text="const EVP_CIPHER *type" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="const unsigned char" id="salt" text="const unsigned char *salt" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
    <arg type="int" id="datal" text="int datal" mod=""/>
    <arg type="int" id="count" text="int count" mod=""/>
    <arg type="unsigned char" id="key" text="unsigned char *key" mod=""/>
    <arg type="unsigned char" id="iv" text="unsigned char *iv" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_CIPHER_CTX_set_flags" text="void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_CIPHER_CTX_clear_flags" text="void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_CTX_test_flags" text="int EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER_CTX" id="ctx" text="const EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_EncryptInit" text="int EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,&#10;                    const unsigned char *key, const unsigned char *iv)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_EncryptInit_ex" text="int EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,&#10;                       ENGINE *impl, const unsigned char *key,&#10;                       const unsigned char *iv)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="ENGINE" id="impl" text="ENGINE *impl" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_EncryptUpdate" text="int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,&#10;                      const unsigned char *in, int inl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="int" id="inl" text="int inl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_EncryptFinal_ex" text="int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_EncryptFinal" text="int EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DecryptInit" text="int EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,&#10;                    const unsigned char *key, const unsigned char *iv)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DecryptInit_ex" text="int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,&#10;                       ENGINE *impl, const unsigned char *key,&#10;                       const unsigned char *iv)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="ENGINE" id="impl" text="ENGINE *impl" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DecryptUpdate" text="int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,&#10;                      const unsigned char *in, int inl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="int" id="inl" text="int inl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DecryptFinal" text="int EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="outm" text="unsigned char *outm" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DecryptFinal_ex" text="int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="outm" text="unsigned char *outm" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CipherInit" text="int EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,&#10;                   const unsigned char *key, const unsigned char *iv,&#10;                   int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CipherInit_ex" text="int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,&#10;                      ENGINE *impl, const unsigned char *key,&#10;                      const unsigned char *iv, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="ENGINE" id="impl" text="ENGINE *impl" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CipherUpdate" text="int EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,&#10;                     const unsigned char *in, int inl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="int" id="inl" text="int inl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CipherFinal" text="int EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="outm" text="unsigned char *outm" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CipherFinal_ex" text="int EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="outm" text="unsigned char *outm" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_SignFinal" text="int EVP_SignFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s,&#10;                  EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="s" text="unsigned int *s" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_VerifyFinal" text="int EVP_VerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sigbuf,&#10;                    unsigned int siglen, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="const unsigned char" id="sigbuf" text="const unsigned char *sigbuf" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int siglen" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DigestSignInit" text="int EVP_DigestSignInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,&#10;                       const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="EVP_PKEY_CTX" id="pctx" text="EVP_PKEY_CTX **pctx" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DigestSignFinal" text="int EVP_DigestSignFinal(EVP_MD_CTX *ctx,&#10;                        unsigned char *sigret, size_t *siglen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="sigret" text="unsigned char *sigret" mod=""/>
    <arg type="size_t" id="siglen" text="size_t *siglen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DigestVerifyInit" text="int EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,&#10;                         const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="EVP_PKEY_CTX" id="pctx" text="EVP_PKEY_CTX **pctx" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DigestVerifyFinal" text="int EVP_DigestVerifyFinal(EVP_MD_CTX *ctx,&#10;                          const unsigned char *sig, size_t siglen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="const unsigned char" id="sig" text="const unsigned char *sig" mod=""/>
    <arg type="size_t" id="siglen" text="size_t siglen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_OpenInit" text="int EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,&#10;                 const unsigned char *ek, int ekl, const unsigned char *iv,&#10;                 EVP_PKEY *priv)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const EVP_CIPHER" id="type" text="const EVP_CIPHER *type" mod=""/>
    <arg type="const unsigned char" id="ek" text="const unsigned char *ek" mod=""/>
    <arg type="int" id="ekl" text="int ekl" mod=""/>
    <arg type="const unsigned char" id="iv" text="const unsigned char *iv" mod=""/>
    <arg type="EVP_PKEY" id="priv" text="EVP_PKEY *priv" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_OpenFinal" text="int EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_SealInit" text="int EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,&#10;                 unsigned char **ek, int *ekl, unsigned char *iv,&#10;                 EVP_PKEY **pubk, int npubk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const EVP_CIPHER" id="type" text="const EVP_CIPHER *type" mod=""/>
    <arg type="unsigned char" id="ek" text="unsigned char **ek" mod=""/>
    <arg type="int" id="ekl" text="int *ekl" mod=""/>
    <arg type="unsigned char" id="iv" text="unsigned char *iv" mod=""/>
    <arg type="EVP_PKEY" id="pubk" text="EVP_PKEY **pubk" mod=""/>
    <arg type="int" id="npubk" text="int npubk" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_SealFinal" text="int EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_EncodeInit" text="void EVP_EncodeInit(EVP_ENCODE_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_ENCODE_CTX" id="ctx" text="EVP_ENCODE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_EncodeUpdate" text="void EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,&#10;                      const unsigned char *in, int inl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_ENCODE_CTX" id="ctx" text="EVP_ENCODE_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="int" id="inl" text="int inl" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_EncodeFinal" text="void EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_ENCODE_CTX" id="ctx" text="EVP_ENCODE_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_EncodeBlock" text="int EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="unsigned char" id="t" text="unsigned char *t" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_DecodeInit" text="void EVP_DecodeInit(EVP_ENCODE_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_ENCODE_CTX" id="ctx" text="EVP_ENCODE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DecodeUpdate" text="int EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,&#10;                     const unsigned char *in, int inl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_ENCODE_CTX" id="ctx" text="EVP_ENCODE_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="int" id="inl" text="int inl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DecodeFinal" text="int EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned&#10;                    char *out, int *outl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_ENCODE_CTX" id="ctx" text="EVP_ENCODE_CTX *ctx" mod=""/>
    <arg type="unsigned&#10;                    char" id="out" text="unsigned&#10;                    char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_DecodeBlock" text="int EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="unsigned char" id="t" text="unsigned char *t" mod=""/>
    <arg type="const unsigned char" id="f" text="const unsigned char *f" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_CIPHER_CTX_init" text="void EVP_CIPHER_CTX_init(EVP_CIPHER_CTX *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="a" text="EVP_CIPHER_CTX *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_CTX_cleanup" text="int EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="a" text="EVP_CIPHER_CTX *a" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_CIPHER_CTX" id="EVP_CIPHER_CTX_new" text="EVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON11" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_CIPHER_CTX_free" text="void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="a" text="EVP_CIPHER_CTX *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_CTX_set_key_length" text="int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *x, int keylen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="x" text="EVP_CIPHER_CTX *x" mod=""/>
    <arg type="int" id="keylen" text="int keylen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_CTX_set_padding" text="int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *c, int pad)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="c" text="EVP_CIPHER_CTX *c" mod=""/>
    <arg type="int" id="pad" text="int pad" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_CTX_ctrl" text="int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="int" id="arg" text="int arg" mod=""/>
    <arg type="void" id="ptr" text="void *ptr" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_CTX_rand_key" text="int EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned char *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="key" text="unsigned char *key" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_f_md" text="BIO_METHOD *BIO_f_md(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON12" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_f_base64" text="BIO_METHOD *BIO_f_base64(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON13" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_f_cipher" text="BIO_METHOD *BIO_f_cipher(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON14" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_f_reliable" text="BIO_METHOD *BIO_f_reliable(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON15" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BIO_set_cipher" text="void BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned char *k,&#10;                    const unsigned char *i, int enc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="const EVP_CIPHER" id="c" text="const EVP_CIPHER *c" mod=""/>
    <arg type="const unsigned char" id="k" text="const unsigned char *k" mod=""/>
    <arg type="const unsigned char" id="i" text="const unsigned char *i" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_md_null" text="const EVP_MD *EVP_md_null(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON16" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_md4" text="const EVP_MD *EVP_md4(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON17" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_md5" text="const EVP_MD *EVP_md5(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON18" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_sha" text="const EVP_MD *EVP_sha(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON19" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_sha1" text="const EVP_MD *EVP_sha1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON20" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_dss" text="const EVP_MD *EVP_dss(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON21" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_dss1" text="const EVP_MD *EVP_dss1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON22" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_ecdsa" text="const EVP_MD *EVP_ecdsa(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON23" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_sha224" text="const EVP_MD *EVP_sha224(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON24" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_sha256" text="const EVP_MD *EVP_sha256(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON25" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_sha384" text="const EVP_MD *EVP_sha384(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON26" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_sha512" text="const EVP_MD *EVP_sha512(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON27" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_mdc2" text="const EVP_MD *EVP_mdc2(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON28" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_ripemd160" text="const EVP_MD *EVP_ripemd160(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON29" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_whirlpool" text="const EVP_MD *EVP_whirlpool(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON30" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_enc_null" text="const EVP_CIPHER *EVP_enc_null(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON31" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ecb" text="const EVP_CIPHER *EVP_des_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON32" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede" text="const EVP_CIPHER *EVP_des_ede(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON33" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede3" text="const EVP_CIPHER *EVP_des_ede3(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON34" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede_ecb" text="const EVP_CIPHER *EVP_des_ede_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON35" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede3_ecb" text="const EVP_CIPHER *EVP_des_ede3_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON36" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_cfb64" text="const EVP_CIPHER *EVP_des_cfb64(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON37" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_cfb1" text="const EVP_CIPHER *EVP_des_cfb1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON38" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_cfb8" text="const EVP_CIPHER *EVP_des_cfb8(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON39" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede_cfb64" text="const EVP_CIPHER *EVP_des_ede_cfb64(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON40" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede3_cfb64" text="const EVP_CIPHER *EVP_des_ede3_cfb64(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON41" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede3_cfb1" text="const EVP_CIPHER *EVP_des_ede3_cfb1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON42" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede3_cfb8" text="const EVP_CIPHER *EVP_des_ede3_cfb8(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON43" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ofb" text="const EVP_CIPHER *EVP_des_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON44" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede_ofb" text="const EVP_CIPHER *EVP_des_ede_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON45" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede3_ofb" text="const EVP_CIPHER *EVP_des_ede3_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON46" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_cbc" text="const EVP_CIPHER *EVP_des_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON47" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede_cbc" text="const EVP_CIPHER *EVP_des_ede_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON48" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede3_cbc" text="const EVP_CIPHER *EVP_des_ede3_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON49" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_desx_cbc" text="const EVP_CIPHER *EVP_desx_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON50" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_des_ede3_wrap" text="const EVP_CIPHER *EVP_des_ede3_wrap(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON51" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_rc4" text="const EVP_CIPHER *EVP_rc4(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON52" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_rc4_40" text="const EVP_CIPHER *EVP_rc4_40(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON53" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_rc4_hmac_md5" text="const EVP_CIPHER *EVP_rc4_hmac_md5(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON54" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_idea_ecb" text="const EVP_CIPHER *EVP_idea_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON55" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_idea_cfb64" text="const EVP_CIPHER *EVP_idea_cfb64(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON56" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_idea_ofb" text="const EVP_CIPHER *EVP_idea_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON57" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_idea_cbc" text="const EVP_CIPHER *EVP_idea_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON58" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_rc2_ecb" text="const EVP_CIPHER *EVP_rc2_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON59" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_rc2_cbc" text="const EVP_CIPHER *EVP_rc2_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON60" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_rc2_40_cbc" text="const EVP_CIPHER *EVP_rc2_40_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON61" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_rc2_64_cbc" text="const EVP_CIPHER *EVP_rc2_64_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON62" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_rc2_cfb64" text="const EVP_CIPHER *EVP_rc2_cfb64(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON63" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_rc2_ofb" text="const EVP_CIPHER *EVP_rc2_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON64" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_bf_ecb" text="const EVP_CIPHER *EVP_bf_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON65" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_bf_cbc" text="const EVP_CIPHER *EVP_bf_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON66" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_bf_cfb64" text="const EVP_CIPHER *EVP_bf_cfb64(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON67" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_bf_ofb" text="const EVP_CIPHER *EVP_bf_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON68" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_cast5_ecb" text="const EVP_CIPHER *EVP_cast5_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON69" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_cast5_cbc" text="const EVP_CIPHER *EVP_cast5_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON70" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_cast5_cfb64" text="const EVP_CIPHER *EVP_cast5_cfb64(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON71" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_cast5_ofb" text="const EVP_CIPHER *EVP_cast5_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON72" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_ecb" text="const EVP_CIPHER *EVP_aes_128_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON73" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_cbc" text="const EVP_CIPHER *EVP_aes_128_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON74" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_cfb1" text="const EVP_CIPHER *EVP_aes_128_cfb1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON75" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_cfb8" text="const EVP_CIPHER *EVP_aes_128_cfb8(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON76" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_cfb128" text="const EVP_CIPHER *EVP_aes_128_cfb128(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON77" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_ofb" text="const EVP_CIPHER *EVP_aes_128_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON78" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_ctr" text="const EVP_CIPHER *EVP_aes_128_ctr(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON79" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_ccm" text="const EVP_CIPHER *EVP_aes_128_ccm(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON80" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_gcm" text="const EVP_CIPHER *EVP_aes_128_gcm(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON81" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_xts" text="const EVP_CIPHER *EVP_aes_128_xts(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON82" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_wrap" text="const EVP_CIPHER *EVP_aes_128_wrap(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON83" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_192_ecb" text="const EVP_CIPHER *EVP_aes_192_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON84" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_192_cbc" text="const EVP_CIPHER *EVP_aes_192_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON85" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_192_cfb1" text="const EVP_CIPHER *EVP_aes_192_cfb1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON86" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_192_cfb8" text="const EVP_CIPHER *EVP_aes_192_cfb8(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON87" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_192_cfb128" text="const EVP_CIPHER *EVP_aes_192_cfb128(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON88" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_192_ofb" text="const EVP_CIPHER *EVP_aes_192_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON89" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_192_ctr" text="const EVP_CIPHER *EVP_aes_192_ctr(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON90" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_192_ccm" text="const EVP_CIPHER *EVP_aes_192_ccm(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON91" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_192_gcm" text="const EVP_CIPHER *EVP_aes_192_gcm(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON92" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_192_wrap" text="const EVP_CIPHER *EVP_aes_192_wrap(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON93" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_ecb" text="const EVP_CIPHER *EVP_aes_256_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON94" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_cbc" text="const EVP_CIPHER *EVP_aes_256_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON95" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_cfb1" text="const EVP_CIPHER *EVP_aes_256_cfb1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON96" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_cfb8" text="const EVP_CIPHER *EVP_aes_256_cfb8(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON97" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_cfb128" text="const EVP_CIPHER *EVP_aes_256_cfb128(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON98" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_ofb" text="const EVP_CIPHER *EVP_aes_256_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON99" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_ctr" text="const EVP_CIPHER *EVP_aes_256_ctr(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON100" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_ccm" text="const EVP_CIPHER *EVP_aes_256_ccm(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON101" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_gcm" text="const EVP_CIPHER *EVP_aes_256_gcm(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON102" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_xts" text="const EVP_CIPHER *EVP_aes_256_xts(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON103" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_wrap" text="const EVP_CIPHER *EVP_aes_256_wrap(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON104" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_cbc_hmac_sha1" text="const EVP_CIPHER *EVP_aes_128_cbc_hmac_sha1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON105" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_cbc_hmac_sha1" text="const EVP_CIPHER *EVP_aes_256_cbc_hmac_sha1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON106" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_128_cbc_hmac_sha256" text="const EVP_CIPHER *EVP_aes_128_cbc_hmac_sha256(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON107" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_aes_256_cbc_hmac_sha256" text="const EVP_CIPHER *EVP_aes_256_cbc_hmac_sha256(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON108" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_128_ecb" text="const EVP_CIPHER *EVP_camellia_128_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON109" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_128_cbc" text="const EVP_CIPHER *EVP_camellia_128_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON110" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_128_cfb1" text="const EVP_CIPHER *EVP_camellia_128_cfb1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON111" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_128_cfb8" text="const EVP_CIPHER *EVP_camellia_128_cfb8(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON112" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_128_cfb128" text="const EVP_CIPHER *EVP_camellia_128_cfb128(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON113" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_128_ofb" text="const EVP_CIPHER *EVP_camellia_128_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON114" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_192_ecb" text="const EVP_CIPHER *EVP_camellia_192_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON115" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_192_cbc" text="const EVP_CIPHER *EVP_camellia_192_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON116" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_192_cfb1" text="const EVP_CIPHER *EVP_camellia_192_cfb1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON117" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_192_cfb8" text="const EVP_CIPHER *EVP_camellia_192_cfb8(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON118" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_192_cfb128" text="const EVP_CIPHER *EVP_camellia_192_cfb128(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON119" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_192_ofb" text="const EVP_CIPHER *EVP_camellia_192_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON120" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_256_ecb" text="const EVP_CIPHER *EVP_camellia_256_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON121" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_256_cbc" text="const EVP_CIPHER *EVP_camellia_256_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON122" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_256_cfb1" text="const EVP_CIPHER *EVP_camellia_256_cfb1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON123" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_256_cfb8" text="const EVP_CIPHER *EVP_camellia_256_cfb8(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON124" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_256_cfb128" text="const EVP_CIPHER *EVP_camellia_256_cfb128(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON125" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_camellia_256_ofb" text="const EVP_CIPHER *EVP_camellia_256_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON126" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_seed_ecb" text="const EVP_CIPHER *EVP_seed_ecb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON127" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_seed_cbc" text="const EVP_CIPHER *EVP_seed_cbc(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON128" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_seed_cfb128" text="const EVP_CIPHER *EVP_seed_cfb128(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON129" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_seed_ofb" text="const EVP_CIPHER *EVP_seed_ofb(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON130" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OPENSSL_add_all_algorithms_noconf" text="void OPENSSL_add_all_algorithms_noconf(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON131" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OPENSSL_add_all_algorithms_conf" text="void OPENSSL_add_all_algorithms_conf(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON132" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OpenSSL_add_all_ciphers" text="void OpenSSL_add_all_ciphers(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON133" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OpenSSL_add_all_digests" text="void OpenSSL_add_all_digests(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON134" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_add_cipher" text="int EVP_add_cipher(const EVP_CIPHER *cipher)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_add_digest" text="int EVP_add_digest(const EVP_MD *digest)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_MD" id="digest" text="const EVP_MD *digest" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="EVP_get_cipherbyname" text="const EVP_CIPHER *EVP_get_cipherbyname(const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="EVP_get_digestbyname" text="const EVP_MD *EVP_get_digestbyname(const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_cleanup" text="void EVP_cleanup(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON135" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_CIPHER_do_all" text="void EVP_CIPHER_do_all(void (*fn) (const EVP_CIPHER *ciph,&#10;                                   const char *from, const char *to, void *x),&#10;                       void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="fn" text="void (*fn) (const EVP_CIPHER *ciph,&#10;                                   const char *from, const char *to, void *x)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_CIPHER_do_all_sorted" text="void EVP_CIPHER_do_all_sorted(void (*fn)&#10;                               (const EVP_CIPHER *ciph, const char *from,&#10;                                const char *to, void *x), void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="fn" text="void (*fn)&#10;                               (const EVP_CIPHER *ciph, const char *from,&#10;                                const char *to, void *x)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_MD_do_all" text="void EVP_MD_do_all(void (*fn) (const EVP_MD *ciph,&#10;                               const char *from, const char *to, void *x),&#10;                   void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="fn" text="void (*fn) (const EVP_MD *ciph,&#10;                               const char *from, const char *to, void *x)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_MD_do_all_sorted" text="void EVP_MD_do_all_sorted(void (*fn)&#10;                           (const EVP_MD *ciph, const char *from,&#10;                            const char *to, void *x), void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="fn" text="void (*fn)&#10;                           (const EVP_MD *ciph, const char *from,&#10;                            const char *to, void *x)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_decrypt_old" text="int EVP_PKEY_decrypt_old(unsigned char *dec_key,&#10;                         const unsigned char *enc_key, int enc_key_len,&#10;                         EVP_PKEY *private_key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="unsigned char" id="dec_key" text="unsigned char *dec_key" mod=""/>
    <arg type="const unsigned char" id="enc_key" text="const unsigned char *enc_key" mod=""/>
    <arg type="int" id="enc_key_len" text="int enc_key_len" mod=""/>
    <arg type="EVP_PKEY" id="private_key" text="EVP_PKEY *private_key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_encrypt_old" text="int EVP_PKEY_encrypt_old(unsigned char *enc_key,&#10;                         const unsigned char *key, int key_len,&#10;                         EVP_PKEY *pub_key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="unsigned char" id="enc_key" text="unsigned char *enc_key" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="int" id="key_len" text="int key_len" mod=""/>
    <arg type="EVP_PKEY" id="pub_key" text="EVP_PKEY *pub_key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_type" text="int EVP_PKEY_type(int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_id" text="int EVP_PKEY_id(const EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_PKEY" id="pkey" text="const EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_base_id" text="int EVP_PKEY_base_id(const EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_PKEY" id="pkey" text="const EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_bits" text="int EVP_PKEY_bits(EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_size" text="int EVP_PKEY_size(EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_set_type" text="int EVP_PKEY_set_type(EVP_PKEY *pkey, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_set_type_str" text="int EVP_PKEY_set_type_str(EVP_PKEY *pkey, const char *str, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_assign" text="int EVP_PKEY_assign(EVP_PKEY *pkey, int type, void *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="void" id="key" text="void *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_get0" text="void *EVP_PKEY_get0(EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_set1_RSA" text="int EVP_PKEY_set1_RSA(EVP_PKEY *pkey, struct rsa_st *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="struct rsa_st" id="key" text="struct rsa_st *key" mod=""/>
  </args>
</fdecl>
<fdecl type="struct rsa_st" id="EVP_PKEY_get1_RSA" text="struct rsa_st *EVP_PKEY_get1_RSA(EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_set1_DSA" text="int EVP_PKEY_set1_DSA(EVP_PKEY *pkey, struct dsa_st *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="struct dsa_st" id="key" text="struct dsa_st *key" mod=""/>
  </args>
</fdecl>
<fdecl type="struct dsa_st" id="EVP_PKEY_get1_DSA" text="struct dsa_st *EVP_PKEY_get1_DSA(EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_set1_DH" text="int EVP_PKEY_set1_DH(EVP_PKEY *pkey, struct dh_st *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="struct dh_st" id="key" text="struct dh_st *key" mod=""/>
  </args>
</fdecl>
<fdecl type="struct dh_st" id="EVP_PKEY_get1_DH" text="struct dh_st *EVP_PKEY_get1_DH(EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_set1_EC_KEY" text="int EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, struct ec_key_st *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="struct ec_key_st" id="key" text="struct ec_key_st *key" mod=""/>
  </args>
</fdecl>
<fdecl type="struct ec_key_st" id="EVP_PKEY_get1_EC_KEY" text="struct ec_key_st *EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="EVP_PKEY_new" text="EVP_PKEY *EVP_PKEY_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON136" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_free" text="void EVP_PKEY_free(EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="d2i_PublicKey" text="EVP_PKEY *d2i_PublicKey(int type, EVP_PKEY **a, const unsigned char **pp,&#10;                        long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="EVP_PKEY" id="a" text="EVP_PKEY **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PublicKey" text="int i2d_PublicKey(EVP_PKEY *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="a" text="EVP_PKEY *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="d2i_PrivateKey" text="EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,&#10;                         long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="EVP_PKEY" id="a" text="EVP_PKEY **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="d2i_AutoPrivateKey" text="EVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,&#10;                             long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="a" text="EVP_PKEY **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PrivateKey" text="int i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="a" text="EVP_PKEY *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_copy_parameters" text="int EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="to" text="EVP_PKEY *to" mod=""/>
    <arg type="const EVP_PKEY" id="from" text="const EVP_PKEY *from" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_missing_parameters" text="int EVP_PKEY_missing_parameters(const EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_PKEY" id="pkey" text="const EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_save_parameters" text="int EVP_PKEY_save_parameters(EVP_PKEY *pkey, int mode)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="int" id="mode" text="int mode" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_cmp_parameters" text="int EVP_PKEY_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_PKEY" id="a" text="const EVP_PKEY *a" mod=""/>
    <arg type="const EVP_PKEY" id="b" text="const EVP_PKEY *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_cmp" text="int EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_PKEY" id="a" text="const EVP_PKEY *a" mod=""/>
    <arg type="const EVP_PKEY" id="b" text="const EVP_PKEY *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_print_public" text="int EVP_PKEY_print_public(BIO *out, const EVP_PKEY *pkey,&#10;                          int indent, ASN1_PCTX *pctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="const EVP_PKEY" id="pkey" text="const EVP_PKEY *pkey" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="ASN1_PCTX" id="pctx" text="ASN1_PCTX *pctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_print_private" text="int EVP_PKEY_print_private(BIO *out, const EVP_PKEY *pkey,&#10;                           int indent, ASN1_PCTX *pctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="const EVP_PKEY" id="pkey" text="const EVP_PKEY *pkey" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="ASN1_PCTX" id="pctx" text="ASN1_PCTX *pctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_print_params" text="int EVP_PKEY_print_params(BIO *out, const EVP_PKEY *pkey,&#10;                          int indent, ASN1_PCTX *pctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="const EVP_PKEY" id="pkey" text="const EVP_PKEY *pkey" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="ASN1_PCTX" id="pctx" text="ASN1_PCTX *pctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_get_default_digest_nid" text="int EVP_PKEY_get_default_digest_nid(EVP_PKEY *pkey, int *pnid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="int" id="pnid" text="int *pnid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_type" text="int EVP_CIPHER_type(const EVP_CIPHER *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_CIPHER" id="ctx" text="const EVP_CIPHER *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_param_to_asn1" text="int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="c" text="EVP_CIPHER_CTX *c" mod=""/>
    <arg type="ASN1_TYPE" id="type" text="ASN1_TYPE *type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_asn1_to_param" text="int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="c" text="EVP_CIPHER_CTX *c" mod=""/>
    <arg type="ASN1_TYPE" id="type" text="ASN1_TYPE *type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_set_asn1_iv" text="int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="c" text="EVP_CIPHER_CTX *c" mod=""/>
    <arg type="ASN1_TYPE" id="type" text="ASN1_TYPE *type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_CIPHER_get_asn1_iv" text="int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="c" text="EVP_CIPHER_CTX *c" mod=""/>
    <arg type="ASN1_TYPE" id="type" text="ASN1_TYPE *type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS5_PBE_keyivgen" text="int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,&#10;                       ASN1_TYPE *param, const EVP_CIPHER *cipher,&#10;                       const EVP_MD *md, int en_de)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="ASN1_TYPE" id="param" text="ASN1_TYPE *param" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="int" id="en_de" text="int en_de" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS5_PBKDF2_HMAC_SHA1" text="int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,&#10;                           const unsigned char *salt, int saltlen, int iter,&#10;                           int keylen, unsigned char *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="const unsigned char" id="salt" text="const unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="int" id="keylen" text="int keylen" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS5_PBKDF2_HMAC" text="int PKCS5_PBKDF2_HMAC(const char *pass, int passlen,&#10;                      const unsigned char *salt, int saltlen, int iter,&#10;                      const EVP_MD *digest, int keylen, unsigned char *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="const unsigned char" id="salt" text="const unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="const EVP_MD" id="digest" text="const EVP_MD *digest" mod=""/>
    <arg type="int" id="keylen" text="int keylen" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS5_v2_PBE_keyivgen" text="int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,&#10;                          ASN1_TYPE *param, const EVP_CIPHER *cipher,&#10;                          const EVP_MD *md, int en_de)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="ASN1_TYPE" id="param" text="ASN1_TYPE *param" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="int" id="en_de" text="int en_de" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS5_PBE_add" text="void PKCS5_PBE_add(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON137" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PBE_CipherInit" text="int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,&#10;                       ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="ASN1_OBJECT" id="pbe_obj" text="ASN1_OBJECT *pbe_obj" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="ASN1_TYPE" id="param" text="ASN1_TYPE *param" mod=""/>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="int" id="en_de" text="int en_de" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PBE_alg_add_type" text="int EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid,&#10;                         int md_nid, EVP_PBE_KEYGEN *keygen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="pbe_type" text="int pbe_type" mod=""/>
    <arg type="int" id="pbe_nid" text="int pbe_nid" mod=""/>
    <arg type="int" id="cipher_nid" text="int cipher_nid" mod=""/>
    <arg type="int" id="md_nid" text="int md_nid" mod=""/>
    <arg type="EVP_PBE_KEYGEN" id="keygen" text="EVP_PBE_KEYGEN *keygen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PBE_alg_add" text="int EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,&#10;                    EVP_PBE_KEYGEN *keygen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="EVP_PBE_KEYGEN" id="keygen" text="EVP_PBE_KEYGEN *keygen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PBE_find" text="int EVP_PBE_find(int type, int pbe_nid, int *pcnid, int *pmnid,&#10;                 EVP_PBE_KEYGEN **pkeygen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="int" id="pbe_nid" text="int pbe_nid" mod=""/>
    <arg type="int" id="pcnid" text="int *pcnid" mod=""/>
    <arg type="int" id="pmnid" text="int *pmnid" mod=""/>
    <arg type="EVP_PBE_KEYGEN" id="pkeygen" text="EVP_PBE_KEYGEN **pkeygen" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PBE_cleanup" text="void EVP_PBE_cleanup(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON138" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_asn1_get_count" text="int EVP_PKEY_asn1_get_count(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON139" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_PKEY_ASN1_METHOD" id="EVP_PKEY_asn1_get0" text="const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_get0(int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_PKEY_ASN1_METHOD" id="EVP_PKEY_asn1_find" text="const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find(ENGINE **pe, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="ENGINE" id="pe" text="ENGINE **pe" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_PKEY_ASN1_METHOD" id="EVP_PKEY_asn1_find_str" text="const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find_str(ENGINE **pe,&#10;                                                   const char *str, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="ENGINE" id="pe" text="ENGINE **pe" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_asn1_add0" text="int EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_PKEY_ASN1_METHOD" id="ameth" text="const EVP_PKEY_ASN1_METHOD *ameth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_asn1_add_alias" text="int EVP_PKEY_asn1_add_alias(int to, int from)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="to" text="int to" mod=""/>
    <arg type="int" id="from" text="int from" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_asn1_get0_info" text="int EVP_PKEY_asn1_get0_info(int *ppkey_id, int *pkey_base_id,&#10;                            int *ppkey_flags, const char **pinfo,&#10;                            const char **ppem_str,&#10;                            const EVP_PKEY_ASN1_METHOD *ameth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="ppkey_id" text="int *ppkey_id" mod=""/>
    <arg type="int" id="pkey_base_id" text="int *pkey_base_id" mod=""/>
    <arg type="int" id="ppkey_flags" text="int *ppkey_flags" mod=""/>
    <arg type="const char" id="pinfo" text="const char **pinfo" mod=""/>
    <arg type="const char" id="ppem_str" text="const char **ppem_str" mod=""/>
    <arg type="const EVP_PKEY_ASN1_METHOD" id="ameth" text="const EVP_PKEY_ASN1_METHOD *ameth" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_PKEY_ASN1_METHOD" id="EVP_PKEY_get0_asn1" text="const EVP_PKEY_ASN1_METHOD *EVP_PKEY_get0_asn1(EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY_ASN1_METHOD" id="EVP_PKEY_asn1_new" text="EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_new(int id, int flags,&#10;                                        const char *pem_str,&#10;                                        const char *info)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="id" text="int id" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="const char" id="pem_str" text="const char *pem_str" mod=""/>
    <arg type="const char" id="info" text="const char *info" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_asn1_copy" text="void EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst,&#10;                        const EVP_PKEY_ASN1_METHOD *src)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_ASN1_METHOD" id="dst" text="EVP_PKEY_ASN1_METHOD *dst" mod=""/>
    <arg type="const EVP_PKEY_ASN1_METHOD" id="src" text="const EVP_PKEY_ASN1_METHOD *src" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_asn1_free" text="void EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_ASN1_METHOD" id="ameth" text="EVP_PKEY_ASN1_METHOD *ameth" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_asn1_set_public" text="void EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD *ameth,&#10;                              int (*pub_decode) (EVP_PKEY *pk,&#10;                                                 X509_PUBKEY *pub),&#10;                              int (*pub_encode) (X509_PUBKEY *pub,&#10;                                                 const EVP_PKEY *pk),&#10;                              int (*pub_cmp) (const EVP_PKEY *a,&#10;                                              const EVP_PKEY *b),&#10;                              int (*pub_print) (BIO *out,&#10;                                                const EVP_PKEY *pkey,&#10;                                                int indent, ASN1_PCTX *pctx),&#10;                              int (*pkey_size) (const EVP_PKEY *pk),&#10;                              int (*pkey_bits) (const EVP_PKEY *pk))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_ASN1_METHOD" id="ameth" text="EVP_PKEY_ASN1_METHOD *ameth" mod=""/>
    <arg type="int" id="pub_decode" text="int (*pub_decode) (EVP_PKEY *pk,&#10;                                                 X509_PUBKEY *pub)" mod=""/>
    <arg type="int" id="pub_encode" text="int (*pub_encode) (X509_PUBKEY *pub,&#10;                                                 const EVP_PKEY *pk)" mod=""/>
    <arg type="int" id="pub_cmp" text="int (*pub_cmp) (const EVP_PKEY *a,&#10;                                              const EVP_PKEY *b)" mod=""/>
    <arg type="int" id="pub_print" text="int (*pub_print) (BIO *out,&#10;                                                const EVP_PKEY *pkey,&#10;                                                int indent, ASN1_PCTX *pctx)" mod=""/>
    <arg type="int" id="pkey_size" text="int (*pkey_size) (const EVP_PKEY *pk)" mod=""/>
    <arg type="int" id="pkey_bits" text="int (*pkey_bits) (const EVP_PKEY *pk)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_asn1_set_private" text="void EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD *ameth,&#10;                               int (*priv_decode) (EVP_PKEY *pk,&#10;                                                   PKCS8_PRIV_KEY_INFO&#10;                                                   *p8inf),&#10;                               int (*priv_encode) (PKCS8_PRIV_KEY_INFO *p8,&#10;                                                   const EVP_PKEY *pk),&#10;                               int (*priv_print) (BIO *out,&#10;                                                  const EVP_PKEY *pkey,&#10;                                                  int indent,&#10;                                                  ASN1_PCTX *pctx))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_ASN1_METHOD" id="ameth" text="EVP_PKEY_ASN1_METHOD *ameth" mod=""/>
    <arg type="int" id="priv_decode" text="int (*priv_decode) (EVP_PKEY *pk,&#10;                                                   PKCS8_PRIV_KEY_INFO&#10;                                                   *p8inf)" mod=""/>
    <arg type="int" id="priv_encode" text="int (*priv_encode) (PKCS8_PRIV_KEY_INFO *p8,&#10;                                                   const EVP_PKEY *pk)" mod=""/>
    <arg type="int" id="priv_print" text="int (*priv_print) (BIO *out,&#10;                                                  const EVP_PKEY *pkey,&#10;                                                  int indent,&#10;                                                  ASN1_PCTX *pctx)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_asn1_set_param" text="void EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD *ameth,&#10;                             int (*param_decode) (EVP_PKEY *pkey,&#10;                                                  const unsigned char **pder,&#10;                                                  int derlen),&#10;                             int (*param_encode) (const EVP_PKEY *pkey,&#10;                                                  unsigned char **pder),&#10;                             int (*param_missing) (const EVP_PKEY *pk),&#10;                             int (*param_copy) (EVP_PKEY *to,&#10;                                                const EVP_PKEY *from),&#10;                             int (*param_cmp) (const EVP_PKEY *a,&#10;                                               const EVP_PKEY *b),&#10;                             int (*param_print) (BIO *out,&#10;                                                 const EVP_PKEY *pkey,&#10;                                                 int indent,&#10;                                                 ASN1_PCTX *pctx))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_ASN1_METHOD" id="ameth" text="EVP_PKEY_ASN1_METHOD *ameth" mod=""/>
    <arg type="int" id="param_decode" text="int (*param_decode) (EVP_PKEY *pkey,&#10;                                                  const unsigned char **pder,&#10;                                                  int derlen)" mod=""/>
    <arg type="int" id="param_encode" text="int (*param_encode) (const EVP_PKEY *pkey,&#10;                                                  unsigned char **pder)" mod=""/>
    <arg type="int" id="param_missing" text="int (*param_missing) (const EVP_PKEY *pk)" mod=""/>
    <arg type="int" id="param_copy" text="int (*param_copy) (EVP_PKEY *to,&#10;                                                const EVP_PKEY *from)" mod=""/>
    <arg type="int" id="param_cmp" text="int (*param_cmp) (const EVP_PKEY *a,&#10;                                               const EVP_PKEY *b)" mod=""/>
    <arg type="int" id="param_print" text="int (*param_print) (BIO *out,&#10;                                                 const EVP_PKEY *pkey,&#10;                                                 int indent,&#10;                                                 ASN1_PCTX *pctx)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_asn1_set_free" text="void EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD *ameth,&#10;                            void (*pkey_free) (EVP_PKEY *pkey))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_ASN1_METHOD" id="ameth" text="EVP_PKEY_ASN1_METHOD *ameth" mod=""/>
    <arg type="void" id="pkey_free" text="void (*pkey_free) (EVP_PKEY *pkey)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_asn1_set_ctrl" text="void EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD *ameth,&#10;                            int (*pkey_ctrl) (EVP_PKEY *pkey, int op,&#10;                                              long arg1, void *arg2))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_ASN1_METHOD" id="ameth" text="EVP_PKEY_ASN1_METHOD *ameth" mod=""/>
    <arg type="int" id="pkey_ctrl" text="int (*pkey_ctrl) (EVP_PKEY *pkey, int op,&#10;                                              long arg1, void *arg2)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_asn1_set_item" text="void EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD *ameth,&#10;                            int (*item_verify) (EVP_MD_CTX *ctx,&#10;                                                const ASN1_ITEM *it,&#10;                                                void *asn,&#10;                                                X509_ALGOR *a,&#10;                                                ASN1_BIT_STRING *sig,&#10;                                                EVP_PKEY *pkey),&#10;                            int (*item_sign) (EVP_MD_CTX *ctx,&#10;                                              const ASN1_ITEM *it,&#10;                                              void *asn,&#10;                                              X509_ALGOR *alg1,&#10;                                              X509_ALGOR *alg2,&#10;                                              ASN1_BIT_STRING *sig))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_ASN1_METHOD" id="ameth" text="EVP_PKEY_ASN1_METHOD *ameth" mod=""/>
    <arg type="int" id="item_verify" text="int (*item_verify) (EVP_MD_CTX *ctx,&#10;                                                const ASN1_ITEM *it,&#10;                                                void *asn,&#10;                                                X509_ALGOR *a,&#10;                                                ASN1_BIT_STRING *sig,&#10;                                                EVP_PKEY *pkey)" mod=""/>
    <arg type="int" id="item_sign" text="int (*item_sign) (EVP_MD_CTX *ctx,&#10;                                              const ASN1_ITEM *it,&#10;                                              void *asn,&#10;                                              X509_ALGOR *alg1,&#10;                                              X509_ALGOR *alg2,&#10;                                              ASN1_BIT_STRING *sig)" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_PKEY_METHOD" id="EVP_PKEY_meth_find" text="const EVP_PKEY_METHOD *EVP_PKEY_meth_find(int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY_METHOD" id="EVP_PKEY_meth_new" text="EVP_PKEY_METHOD *EVP_PKEY_meth_new(int id, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="id" text="int id" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_get0_info" text="void EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags,&#10;                             const EVP_PKEY_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="ppkey_id" text="int *ppkey_id" mod=""/>
    <arg type="int" id="pflags" text="int *pflags" mod=""/>
    <arg type="const EVP_PKEY_METHOD" id="meth" text="const EVP_PKEY_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_copy" text="void EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="dst" text="EVP_PKEY_METHOD *dst" mod=""/>
    <arg type="const EVP_PKEY_METHOD" id="src" text="const EVP_PKEY_METHOD *src" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_free" text="void EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_meth_add0" text="int EVP_PKEY_meth_add0(const EVP_PKEY_METHOD *pmeth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="const EVP_PKEY_METHOD" id="pmeth" text="const EVP_PKEY_METHOD *pmeth" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY_CTX" id="EVP_PKEY_CTX_new" text="EVP_PKEY_CTX *EVP_PKEY_CTX_new(EVP_PKEY *pkey, ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY_CTX" id="EVP_PKEY_CTX_new_id" text="EVP_PKEY_CTX *EVP_PKEY_CTX_new_id(int id, ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="id" text="int id" mod=""/>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY_CTX" id="EVP_PKEY_CTX_dup" text="EVP_PKEY_CTX *EVP_PKEY_CTX_dup(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_CTX_free" text="void EVP_PKEY_CTX_free(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_CTX_ctrl" text="int EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX *ctx, int keytype, int optype,&#10;                      int cmd, int p1, void *p2)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="int" id="keytype" text="int keytype" mod=""/>
    <arg type="int" id="optype" text="int optype" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="int" id="p1" text="int p1" mod=""/>
    <arg type="void" id="p2" text="void *p2" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_CTX_ctrl_str" text="int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx, const char *type,&#10;                          const char *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="const char" id="type" text="const char *type" mod=""/>
    <arg type="const char" id="value" text="const char *value" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_CTX_get_operation" text="int EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_CTX_set0_keygen_info" text="void EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX *ctx, int *dat, int datlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="int" id="dat" text="int *dat" mod=""/>
    <arg type="int" id="datlen" text="int datlen" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="EVP_PKEY_new_mac_key" text="EVP_PKEY *EVP_PKEY_new_mac_key(int type, ENGINE *e,&#10;                               const unsigned char *key, int keylen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="int" id="keylen" text="int keylen" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_CTX_set_data" text="void EVP_PKEY_CTX_set_data(EVP_PKEY_CTX *ctx, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_CTX_get_data" text="void *EVP_PKEY_CTX_get_data(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="EVP_PKEY_CTX_get0_pkey" text="EVP_PKEY *EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="EVP_PKEY_CTX_get0_peerkey" text="EVP_PKEY *EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_CTX_set_app_data" text="void EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX *ctx, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_CTX_get_app_data" text="void *EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_sign_init" text="int EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_sign" text="int EVP_PKEY_sign(EVP_PKEY_CTX *ctx,&#10;                  unsigned char *sig, size_t *siglen,&#10;                  const unsigned char *tbs, size_t tbslen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="sig" text="unsigned char *sig" mod=""/>
    <arg type="size_t" id="siglen" text="size_t *siglen" mod=""/>
    <arg type="const unsigned char" id="tbs" text="const unsigned char *tbs" mod=""/>
    <arg type="size_t" id="tbslen" text="size_t tbslen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_verify_init" text="int EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_verify" text="int EVP_PKEY_verify(EVP_PKEY_CTX *ctx,&#10;                    const unsigned char *sig, size_t siglen,&#10;                    const unsigned char *tbs, size_t tbslen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="const unsigned char" id="sig" text="const unsigned char *sig" mod=""/>
    <arg type="size_t" id="siglen" text="size_t siglen" mod=""/>
    <arg type="const unsigned char" id="tbs" text="const unsigned char *tbs" mod=""/>
    <arg type="size_t" id="tbslen" text="size_t tbslen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_verify_recover_init" text="int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_verify_recover" text="int EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx,&#10;                            unsigned char *rout, size_t *routlen,&#10;                            const unsigned char *sig, size_t siglen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="rout" text="unsigned char *rout" mod=""/>
    <arg type="size_t" id="routlen" text="size_t *routlen" mod=""/>
    <arg type="const unsigned char" id="sig" text="const unsigned char *sig" mod=""/>
    <arg type="size_t" id="siglen" text="size_t siglen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_encrypt_init" text="int EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_encrypt" text="int EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx,&#10;                     unsigned char *out, size_t *outlen,&#10;                     const unsigned char *in, size_t inlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="outlen" text="size_t *outlen" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="size_t" id="inlen" text="size_t inlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_decrypt_init" text="int EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_decrypt" text="int EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx,&#10;                     unsigned char *out, size_t *outlen,&#10;                     const unsigned char *in, size_t inlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="outlen" text="size_t *outlen" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="size_t" id="inlen" text="size_t inlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_derive_init" text="int EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_derive_set_peer" text="int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="EVP_PKEY" id="peer" text="EVP_PKEY *peer" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_derive" text="int EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="key" text="unsigned char *key" mod=""/>
    <arg type="size_t" id="keylen" text="size_t *keylen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_gen_cb" text="typedef int EVP_PKEY_gen_cb (EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_paramgen_init" text="int EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_paramgen" text="int EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="EVP_PKEY" id="ppkey" text="EVP_PKEY **ppkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_keygen_init" text="int EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_keygen" text="int EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="EVP_PKEY" id="ppkey" text="EVP_PKEY **ppkey" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_CTX_set_cb" text="void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="EVP_PKEY_gen_cb" id="cb" text="EVP_PKEY_gen_cb *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY_gen_cb" id="EVP_PKEY_CTX_get_cb" text="EVP_PKEY_gen_cb *EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_CTX_get_keygen_info" text="int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_CTX" id="ctx" text="EVP_PKEY_CTX *ctx" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_init" text="void EVP_PKEY_meth_set_init(EVP_PKEY_METHOD *pmeth,&#10;                            int (*init) (EVP_PKEY_CTX *ctx))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="init" text="int (*init) (EVP_PKEY_CTX *ctx)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_copy" text="void EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD *pmeth,&#10;                            int (*copy) (EVP_PKEY_CTX *dst,&#10;                                         EVP_PKEY_CTX *src))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="copy" text="int (*copy) (EVP_PKEY_CTX *dst,&#10;                                         EVP_PKEY_CTX *src)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_cleanup" text="void EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD *pmeth,&#10;                               void (*cleanup) (EVP_PKEY_CTX *ctx))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="void" id="cleanup" text="void (*cleanup) (EVP_PKEY_CTX *ctx)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_paramgen" text="void EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD *pmeth,&#10;                                int (*paramgen_init) (EVP_PKEY_CTX *ctx),&#10;                                int (*paramgen) (EVP_PKEY_CTX *ctx,&#10;                                                 EVP_PKEY *pkey))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="paramgen_init" text="int (*paramgen_init) (EVP_PKEY_CTX *ctx)" mod=""/>
    <arg type="int" id="paramgen" text="int (*paramgen) (EVP_PKEY_CTX *ctx,&#10;                                                 EVP_PKEY *pkey)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_keygen" text="void EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD *pmeth,&#10;                              int (*keygen_init) (EVP_PKEY_CTX *ctx),&#10;                              int (*keygen) (EVP_PKEY_CTX *ctx,&#10;                                             EVP_PKEY *pkey))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="keygen_init" text="int (*keygen_init) (EVP_PKEY_CTX *ctx)" mod=""/>
    <arg type="int" id="keygen" text="int (*keygen) (EVP_PKEY_CTX *ctx,&#10;                                             EVP_PKEY *pkey)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_sign" text="void EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD *pmeth,&#10;                            int (*sign_init) (EVP_PKEY_CTX *ctx),&#10;                            int (*sign) (EVP_PKEY_CTX *ctx,&#10;                                         unsigned char *sig, size_t *siglen,&#10;                                         const unsigned char *tbs,&#10;                                         size_t tbslen))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="sign_init" text="int (*sign_init) (EVP_PKEY_CTX *ctx)" mod=""/>
    <arg type="int" id="sign" text="int (*sign) (EVP_PKEY_CTX *ctx,&#10;                                         unsigned char *sig, size_t *siglen,&#10;                                         const unsigned char *tbs,&#10;                                         size_t tbslen)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_verify" text="void EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD *pmeth,&#10;                              int (*verify_init) (EVP_PKEY_CTX *ctx),&#10;                              int (*verify) (EVP_PKEY_CTX *ctx,&#10;                                             const unsigned char *sig,&#10;                                             size_t siglen,&#10;                                             const unsigned char *tbs,&#10;                                             size_t tbslen))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="verify_init" text="int (*verify_init) (EVP_PKEY_CTX *ctx)" mod=""/>
    <arg type="int" id="verify" text="int (*verify) (EVP_PKEY_CTX *ctx,&#10;                                             const unsigned char *sig,&#10;                                             size_t siglen,&#10;                                             const unsigned char *tbs,&#10;                                             size_t tbslen)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_verify_recover" text="void EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD *pmeth,&#10;                                      int (*verify_recover_init) (EVP_PKEY_CTX&#10;                                                                  *ctx),&#10;                                      int (*verify_recover) (EVP_PKEY_CTX&#10;                                                             *ctx,&#10;                                                             unsigned char&#10;                                                             *sig,&#10;                                                             size_t *siglen,&#10;                                                             const unsigned&#10;                                                             char *tbs,&#10;                                                             size_t tbslen))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="verify_recover_init" text="int (*verify_recover_init) (EVP_PKEY_CTX&#10;                                                                  *ctx)" mod=""/>
    <arg type="int" id="verify_recover" text="int (*verify_recover) (EVP_PKEY_CTX&#10;                                                             *ctx,&#10;                                                             unsigned char&#10;                                                             *sig,&#10;                                                             size_t *siglen,&#10;                                                             const unsigned&#10;                                                             char *tbs,&#10;                                                             size_t tbslen)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_signctx" text="void EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD *pmeth,&#10;                               int (*signctx_init) (EVP_PKEY_CTX *ctx,&#10;                                                    EVP_MD_CTX *mctx),&#10;                               int (*signctx) (EVP_PKEY_CTX *ctx,&#10;                                               unsigned char *sig,&#10;                                               size_t *siglen,&#10;                                               EVP_MD_CTX *mctx))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="signctx_init" text="int (*signctx_init) (EVP_PKEY_CTX *ctx,&#10;                                                    EVP_MD_CTX *mctx)" mod=""/>
    <arg type="int" id="signctx" text="int (*signctx) (EVP_PKEY_CTX *ctx,&#10;                                               unsigned char *sig,&#10;                                               size_t *siglen,&#10;                                               EVP_MD_CTX *mctx)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_verifyctx" text="void EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD *pmeth,&#10;                                 int (*verifyctx_init) (EVP_PKEY_CTX *ctx,&#10;                                                        EVP_MD_CTX *mctx),&#10;                                 int (*verifyctx) (EVP_PKEY_CTX *ctx,&#10;                                                   const unsigned char *sig,&#10;                                                   int siglen,&#10;                                                   EVP_MD_CTX *mctx))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="verifyctx_init" text="int (*verifyctx_init) (EVP_PKEY_CTX *ctx,&#10;                                                        EVP_MD_CTX *mctx)" mod=""/>
    <arg type="int" id="verifyctx" text="int (*verifyctx) (EVP_PKEY_CTX *ctx,&#10;                                                   const unsigned char *sig,&#10;                                                   int siglen,&#10;                                                   EVP_MD_CTX *mctx)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_encrypt" text="void EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD *pmeth,&#10;                               int (*encrypt_init) (EVP_PKEY_CTX *ctx),&#10;                               int (*encryptfn) (EVP_PKEY_CTX *ctx,&#10;                                                 unsigned char *out,&#10;                                                 size_t *outlen,&#10;                                                 const unsigned char *in,&#10;                                                 size_t inlen))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="encrypt_init" text="int (*encrypt_init) (EVP_PKEY_CTX *ctx)" mod=""/>
    <arg type="int" id="encryptfn" text="int (*encryptfn) (EVP_PKEY_CTX *ctx,&#10;                                                 unsigned char *out,&#10;                                                 size_t *outlen,&#10;                                                 const unsigned char *in,&#10;                                                 size_t inlen)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_decrypt" text="void EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD *pmeth,&#10;                               int (*decrypt_init) (EVP_PKEY_CTX *ctx),&#10;                               int (*decrypt) (EVP_PKEY_CTX *ctx,&#10;                                               unsigned char *out,&#10;                                               size_t *outlen,&#10;                                               const unsigned char *in,&#10;                                               size_t inlen))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="decrypt_init" text="int (*decrypt_init) (EVP_PKEY_CTX *ctx)" mod=""/>
    <arg type="int" id="decrypt" text="int (*decrypt) (EVP_PKEY_CTX *ctx,&#10;                                               unsigned char *out,&#10;                                               size_t *outlen,&#10;                                               const unsigned char *in,&#10;                                               size_t inlen)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_derive" text="void EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD *pmeth,&#10;                              int (*derive_init) (EVP_PKEY_CTX *ctx),&#10;                              int (*derive) (EVP_PKEY_CTX *ctx,&#10;                                             unsigned char *key,&#10;                                             size_t *keylen))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="derive_init" text="int (*derive_init) (EVP_PKEY_CTX *ctx)" mod=""/>
    <arg type="int" id="derive" text="int (*derive) (EVP_PKEY_CTX *ctx,&#10;                                             unsigned char *key,&#10;                                             size_t *keylen)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_PKEY_meth_set_ctrl" text="void EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD *pmeth,&#10;                            int (*ctrl) (EVP_PKEY_CTX *ctx, int type, int p1,&#10;                                         void *p2),&#10;                            int (*ctrl_str) (EVP_PKEY_CTX *ctx,&#10;                                             const char *type,&#10;                                             const char *value))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="EVP_PKEY_METHOD" id="pmeth" text="EVP_PKEY_METHOD *pmeth" mod=""/>
    <arg type="int" id="ctrl" text="int (*ctrl) (EVP_PKEY_CTX *ctx, int type, int p1,&#10;                                         void *p2)" mod=""/>
    <arg type="int" id="ctrl_str" text="int (*ctrl_str) (EVP_PKEY_CTX *ctx,&#10;                                             const char *type,&#10;                                             const char *value)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EVP_add_alg_module" text="void EVP_add_alg_module(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON140" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_EVP_strings" text="void ERR_load_EVP_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/evp.h">
  <args>
    <arg type="void" id="ANON141" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="ENGINE_GEN_FUNC_PTR" text="typedef int (*ENGINE_GEN_FUNC_PTR) (void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_GEN_INT_FUNC_PTR" text="typedef int (*ENGINE_GEN_INT_FUNC_PTR) (ENGINE *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="ANON1" text="ENGINE *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_CTRL_FUNC_PTR" text="typedef int (*ENGINE_CTRL_FUNC_PTR) (ENGINE *, int, long, void *,&#10;                                     void (*f) (void))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="ANON2" text="ENGINE *" mod=""/>
    <arg type="int" id="ANON3" text="int" mod=""/>
    <arg type="long" id="ANON4" text="long" mod=""/>
    <arg type="void" id="ANON5" text="void *" mod=""/>
    <arg type="void" id="f" text="void (*f) (void)" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="ENGINE_LOAD_KEY_PTR" text="typedef EVP_PKEY *(*ENGINE_LOAD_KEY_PTR)(ENGINE *, const char *,&#10;                                         UI_METHOD *ui_method,&#10;                                         void *callback_data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="ANON6" text="ENGINE *" mod=""/>
    <arg type="const char" id="ANON7" text="const char *" mod=""/>
    <arg type="UI_METHOD" id="ui_method" text="UI_METHOD *ui_method" mod=""/>
    <arg type="void" id="callback_data" text="void *callback_data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_SSL_CLIENT_CERT_PTR" text="typedef int (*ENGINE_SSL_CLIENT_CERT_PTR) (ENGINE *, SSL *ssl,&#10;                                           &#10;# 342 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot; 3 4&#10;                                          struct stack_st_X509_NAME &#10;# 342 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot;&#10;                                                              *ca_dn,&#10;                                           X509 **pcert, EVP_PKEY **pkey,&#10;                                           &#10;# 344 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot; 3 4&#10;                                          struct stack_st_X509 &#10;# 344 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot;&#10;                                                         **pother,&#10;                                           UI_METHOD *ui_method,&#10;                                           void *callback_data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="ANON8" text="ENGINE *" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="struct stack_st_X509_NAME" id="ca_dn" text="struct stack_st_X509_NAME &#10;# 342 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot;&#10;                                                              *ca_dn" mod=""/>
    <arg type="X509" id="pcert" text="X509 **pcert" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY **pkey" mod=""/>
    <arg type="struct stack_st_X509" id="pother" text="struct stack_st_X509 &#10;# 344 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot;&#10;                                                         **pother" mod=""/>
    <arg type="UI_METHOD" id="ui_method" text="UI_METHOD *ui_method" mod=""/>
    <arg type="void" id="callback_data" text="void *callback_data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_CIPHERS_PTR" text="typedef int (*ENGINE_CIPHERS_PTR) (ENGINE *, const EVP_CIPHER **,&#10;                                   const int **, int)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="ANON9" text="ENGINE *" mod=""/>
    <arg type="const EVP_CIPHER" id="ANON10" text="const EVP_CIPHER **" mod=""/>
    <arg type="const int" id="ANON11" text="const int **" mod=""/>
    <arg type="int" id="ANON12" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_DIGESTS_PTR" text="typedef int (*ENGINE_DIGESTS_PTR) (ENGINE *, const EVP_MD **, const int **,&#10;                                   int)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="ANON13" text="ENGINE *" mod=""/>
    <arg type="const EVP_MD" id="ANON14" text="const EVP_MD **" mod=""/>
    <arg type="const int" id="ANON15" text="const int **" mod=""/>
    <arg type="int" id="ANON16" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_PKEY_METHS_PTR" text="typedef int (*ENGINE_PKEY_METHS_PTR) (ENGINE *, EVP_PKEY_METHOD **,&#10;                                      const int **, int)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="ANON17" text="ENGINE *" mod=""/>
    <arg type="EVP_PKEY_METHOD" id="ANON18" text="EVP_PKEY_METHOD **" mod=""/>
    <arg type="const int" id="ANON19" text="const int **" mod=""/>
    <arg type="int" id="ANON20" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_PKEY_ASN1_METHS_PTR" text="typedef int (*ENGINE_PKEY_ASN1_METHS_PTR) (ENGINE *, EVP_PKEY_ASN1_METHOD **,&#10;                                           const int **, int)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="ANON21" text="ENGINE *" mod=""/>
    <arg type="EVP_PKEY_ASN1_METHOD" id="ANON22" text="EVP_PKEY_ASN1_METHOD **" mod=""/>
    <arg type="const int" id="ANON23" text="const int **" mod=""/>
    <arg type="int" id="ANON24" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_first" text="ENGINE *ENGINE_get_first(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON25" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_last" text="ENGINE *ENGINE_get_last(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON26" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_next" text="ENGINE *ENGINE_get_next(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_prev" text="ENGINE *ENGINE_get_prev(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_add" text="int ENGINE_add(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_remove" text="int ENGINE_remove(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_by_id" text="ENGINE *ENGINE_by_id(const char *id)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const char" id="id" text="const char *id" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_load_openssl" text="void ENGINE_load_openssl(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON27" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_load_dynamic" text="void ENGINE_load_dynamic(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON28" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_load_cryptodev" text="void ENGINE_load_cryptodev(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON29" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_load_rdrand" text="void ENGINE_load_rdrand(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON30" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_load_builtin_engines" text="void ENGINE_load_builtin_engines(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON31" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned int" id="ENGINE_get_table_flags" text="unsigned int ENGINE_get_table_flags(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON32" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_set_table_flags" text="void ENGINE_set_table_flags(unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_RSA" text="int ENGINE_register_RSA(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_unregister_RSA" text="void ENGINE_unregister_RSA(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_register_all_RSA" text="void ENGINE_register_all_RSA(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON33" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_DSA" text="int ENGINE_register_DSA(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_unregister_DSA" text="void ENGINE_unregister_DSA(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_register_all_DSA" text="void ENGINE_register_all_DSA(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON34" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_ECDH" text="int ENGINE_register_ECDH(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_unregister_ECDH" text="void ENGINE_unregister_ECDH(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_register_all_ECDH" text="void ENGINE_register_all_ECDH(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON35" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_ECDSA" text="int ENGINE_register_ECDSA(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_unregister_ECDSA" text="void ENGINE_unregister_ECDSA(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_register_all_ECDSA" text="void ENGINE_register_all_ECDSA(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON36" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_DH" text="int ENGINE_register_DH(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_unregister_DH" text="void ENGINE_unregister_DH(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_register_all_DH" text="void ENGINE_register_all_DH(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON37" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_RAND" text="int ENGINE_register_RAND(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_unregister_RAND" text="void ENGINE_unregister_RAND(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_register_all_RAND" text="void ENGINE_register_all_RAND(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON38" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_STORE" text="int ENGINE_register_STORE(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_unregister_STORE" text="void ENGINE_unregister_STORE(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_register_all_STORE" text="void ENGINE_register_all_STORE(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON39" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_ciphers" text="int ENGINE_register_ciphers(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_unregister_ciphers" text="void ENGINE_unregister_ciphers(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_register_all_ciphers" text="void ENGINE_register_all_ciphers(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON40" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_digests" text="int ENGINE_register_digests(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_unregister_digests" text="void ENGINE_unregister_digests(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_register_all_digests" text="void ENGINE_register_all_digests(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON41" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_pkey_meths" text="int ENGINE_register_pkey_meths(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_unregister_pkey_meths" text="void ENGINE_unregister_pkey_meths(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_register_all_pkey_meths" text="void ENGINE_register_all_pkey_meths(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON42" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_pkey_asn1_meths" text="int ENGINE_register_pkey_asn1_meths(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_unregister_pkey_asn1_meths" text="void ENGINE_unregister_pkey_asn1_meths(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_register_all_pkey_asn1_meths" text="void ENGINE_register_all_pkey_asn1_meths(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON43" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_complete" text="int ENGINE_register_complete(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_register_all_complete" text="int ENGINE_register_all_complete(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON44" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_ctrl" text="int ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f) (void))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="i" text="long i" mod=""/>
    <arg type="void" id="p" text="void *p" mod=""/>
    <arg type="void" id="f" text="void (*f) (void)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_cmd_is_executable" text="int ENGINE_cmd_is_executable(ENGINE *e, int cmd)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_ctrl_cmd" text="int ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name,&#10;                    long i, void *p, void (*f) (void), int cmd_optional)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const char" id="cmd_name" text="const char *cmd_name" mod=""/>
    <arg type="long" id="i" text="long i" mod=""/>
    <arg type="void" id="p" text="void *p" mod=""/>
    <arg type="void" id="f" text="void (*f) (void)" mod=""/>
    <arg type="int" id="cmd_optional" text="int cmd_optional" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_ctrl_cmd_string" text="int ENGINE_ctrl_cmd_string(ENGINE *e, const char *cmd_name, const char *arg,&#10;                           int cmd_optional)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const char" id="cmd_name" text="const char *cmd_name" mod=""/>
    <arg type="const char" id="arg" text="const char *arg" mod=""/>
    <arg type="int" id="cmd_optional" text="int cmd_optional" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_new" text="ENGINE *ENGINE_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON45" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_free" text="int ENGINE_free(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_up_ref" text="int ENGINE_up_ref(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_id" text="int ENGINE_set_id(ENGINE *e, const char *id)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const char" id="id" text="const char *id" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_name" text="int ENGINE_set_name(ENGINE *e, const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_RSA" text="int ENGINE_set_RSA(ENGINE *e, const RSA_METHOD *rsa_meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const RSA_METHOD" id="rsa_meth" text="const RSA_METHOD *rsa_meth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_DSA" text="int ENGINE_set_DSA(ENGINE *e, const DSA_METHOD *dsa_meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const DSA_METHOD" id="dsa_meth" text="const DSA_METHOD *dsa_meth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_ECDH" text="int ENGINE_set_ECDH(ENGINE *e, const ECDH_METHOD *ecdh_meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const ECDH_METHOD" id="ecdh_meth" text="const ECDH_METHOD *ecdh_meth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_ECDSA" text="int ENGINE_set_ECDSA(ENGINE *e, const ECDSA_METHOD *ecdsa_meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const ECDSA_METHOD" id="ecdsa_meth" text="const ECDSA_METHOD *ecdsa_meth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_DH" text="int ENGINE_set_DH(ENGINE *e, const DH_METHOD *dh_meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const DH_METHOD" id="dh_meth" text="const DH_METHOD *dh_meth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_RAND" text="int ENGINE_set_RAND(ENGINE *e, const RAND_METHOD *rand_meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const RAND_METHOD" id="rand_meth" text="const RAND_METHOD *rand_meth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_STORE" text="int ENGINE_set_STORE(ENGINE *e, const STORE_METHOD *store_meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const STORE_METHOD" id="store_meth" text="const STORE_METHOD *store_meth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_destroy_function" text="int ENGINE_set_destroy_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR destroy_f)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="ENGINE_GEN_INT_FUNC_PTR" id="destroy_f" text="ENGINE_GEN_INT_FUNC_PTR destroy_f" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_init_function" text="int ENGINE_set_init_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR init_f)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="ENGINE_GEN_INT_FUNC_PTR" id="init_f" text="ENGINE_GEN_INT_FUNC_PTR init_f" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_finish_function" text="int ENGINE_set_finish_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR finish_f)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="ENGINE_GEN_INT_FUNC_PTR" id="finish_f" text="ENGINE_GEN_INT_FUNC_PTR finish_f" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_ctrl_function" text="int ENGINE_set_ctrl_function(ENGINE *e, ENGINE_CTRL_FUNC_PTR ctrl_f)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="ENGINE_CTRL_FUNC_PTR" id="ctrl_f" text="ENGINE_CTRL_FUNC_PTR ctrl_f" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_load_privkey_function" text="int ENGINE_set_load_privkey_function(ENGINE *e,&#10;                                     ENGINE_LOAD_KEY_PTR loadpriv_f)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="ENGINE_LOAD_KEY_PTR" id="loadpriv_f" text="ENGINE_LOAD_KEY_PTR loadpriv_f" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_load_pubkey_function" text="int ENGINE_set_load_pubkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpub_f)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="ENGINE_LOAD_KEY_PTR" id="loadpub_f" text="ENGINE_LOAD_KEY_PTR loadpub_f" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_load_ssl_client_cert_function" text="int ENGINE_set_load_ssl_client_cert_function(ENGINE *e,&#10;                                             ENGINE_SSL_CLIENT_CERT_PTR&#10;                                             loadssl_f)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="ENGINE_SSL_CLIENT_CERT_PTR" id="loadssl_f" text="ENGINE_SSL_CLIENT_CERT_PTR&#10;                                             loadssl_f" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_ciphers" text="int ENGINE_set_ciphers(ENGINE *e, ENGINE_CIPHERS_PTR f)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="ENGINE_CIPHERS_PTR" id="f" text="ENGINE_CIPHERS_PTR f" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_digests" text="int ENGINE_set_digests(ENGINE *e, ENGINE_DIGESTS_PTR f)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="ENGINE_DIGESTS_PTR" id="f" text="ENGINE_DIGESTS_PTR f" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_pkey_meths" text="int ENGINE_set_pkey_meths(ENGINE *e, ENGINE_PKEY_METHS_PTR f)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="ENGINE_PKEY_METHS_PTR" id="f" text="ENGINE_PKEY_METHS_PTR f" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_pkey_asn1_meths" text="int ENGINE_set_pkey_asn1_meths(ENGINE *e, ENGINE_PKEY_ASN1_METHS_PTR f)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="ENGINE_PKEY_ASN1_METHS_PTR" id="f" text="ENGINE_PKEY_ASN1_METHS_PTR f" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_flags" text="int ENGINE_set_flags(ENGINE *e, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_cmd_defns" text="int ENGINE_set_cmd_defns(ENGINE *e, const ENGINE_CMD_DEFN *defns)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const ENGINE_CMD_DEFN" id="defns" text="const ENGINE_CMD_DEFN *defns" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_get_ex_new_index" text="int ENGINE_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,&#10;                            CRYPTO_EX_dup *dup_func,&#10;                            CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_ex_data" text="int ENGINE_set_ex_data(ENGINE *e, int idx, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_get_ex_data" text="void *ENGINE_get_ex_data(const ENGINE *e, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_cleanup" text="void ENGINE_cleanup(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON46" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="ENGINE_get_id" text="const char *ENGINE_get_id(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="ENGINE_get_name" text="const char *ENGINE_get_name(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="const RSA_METHOD" id="ENGINE_get_RSA" text="const RSA_METHOD *ENGINE_get_RSA(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="const DSA_METHOD" id="ENGINE_get_DSA" text="const DSA_METHOD *ENGINE_get_DSA(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="const ECDH_METHOD" id="ENGINE_get_ECDH" text="const ECDH_METHOD *ENGINE_get_ECDH(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="const ECDSA_METHOD" id="ENGINE_get_ECDSA" text="const ECDSA_METHOD *ENGINE_get_ECDSA(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="const DH_METHOD" id="ENGINE_get_DH" text="const DH_METHOD *ENGINE_get_DH(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="const RAND_METHOD" id="ENGINE_get_RAND" text="const RAND_METHOD *ENGINE_get_RAND(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="const STORE_METHOD" id="ENGINE_get_STORE" text="const STORE_METHOD *ENGINE_get_STORE(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE_GEN_INT_FUNC_PTR" id="ENGINE_get_destroy_function" text="ENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE_GEN_INT_FUNC_PTR" id="ENGINE_get_init_function" text="ENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE_GEN_INT_FUNC_PTR" id="ENGINE_get_finish_function" text="ENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE_CTRL_FUNC_PTR" id="ENGINE_get_ctrl_function" text="ENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE_LOAD_KEY_PTR" id="ENGINE_get_load_privkey_function" text="ENGINE_LOAD_KEY_PTR ENGINE_get_load_privkey_function(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE_LOAD_KEY_PTR" id="ENGINE_get_load_pubkey_function" text="ENGINE_LOAD_KEY_PTR ENGINE_get_load_pubkey_function(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE_SSL_CLIENT_CERT_PTR" id="ENGINE_get_ssl_client_cert_function" text="ENGINE_SSL_CLIENT_CERT_PTR ENGINE_get_ssl_client_cert_function(const ENGINE&#10;                                                               *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE&#10;                                                               *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE_CIPHERS_PTR" id="ENGINE_get_ciphers" text="ENGINE_CIPHERS_PTR ENGINE_get_ciphers(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE_DIGESTS_PTR" id="ENGINE_get_digests" text="ENGINE_DIGESTS_PTR ENGINE_get_digests(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE_PKEY_METHS_PTR" id="ENGINE_get_pkey_meths" text="ENGINE_PKEY_METHS_PTR ENGINE_get_pkey_meths(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE_PKEY_ASN1_METHS_PTR" id="ENGINE_get_pkey_asn1_meths" text="ENGINE_PKEY_ASN1_METHS_PTR ENGINE_get_pkey_asn1_meths(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_CIPHER" id="ENGINE_get_cipher" text="const EVP_CIPHER *ENGINE_get_cipher(ENGINE *e, int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_MD" id="ENGINE_get_digest" text="const EVP_MD *ENGINE_get_digest(ENGINE *e, int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_PKEY_METHOD" id="ENGINE_get_pkey_meth" text="const EVP_PKEY_METHOD *ENGINE_get_pkey_meth(ENGINE *e, int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_PKEY_ASN1_METHOD" id="ENGINE_get_pkey_asn1_meth" text="const EVP_PKEY_ASN1_METHOD *ENGINE_get_pkey_asn1_meth(ENGINE *e, int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_PKEY_ASN1_METHOD" id="ENGINE_get_pkey_asn1_meth_str" text="const EVP_PKEY_ASN1_METHOD *ENGINE_get_pkey_asn1_meth_str(ENGINE *e,&#10;                                                          const char *str,&#10;                                                          int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="const EVP_PKEY_ASN1_METHOD" id="ENGINE_pkey_asn1_find_str" text="const EVP_PKEY_ASN1_METHOD *ENGINE_pkey_asn1_find_str(ENGINE **pe,&#10;                                                      const char *str,&#10;                                                      int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="pe" text="ENGINE **pe" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="const ENGINE_CMD_DEFN" id="ENGINE_get_cmd_defns" text="const ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_get_flags" text="int ENGINE_get_flags(const ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const ENGINE" id="e" text="const ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_init" text="int ENGINE_init(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_finish" text="int ENGINE_finish(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="ENGINE_load_private_key" text="EVP_PKEY *ENGINE_load_private_key(ENGINE *e, const char *key_id,&#10;                                  UI_METHOD *ui_method, void *callback_data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const char" id="key_id" text="const char *key_id" mod=""/>
    <arg type="UI_METHOD" id="ui_method" text="UI_METHOD *ui_method" mod=""/>
    <arg type="void" id="callback_data" text="void *callback_data" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="ENGINE_load_public_key" text="EVP_PKEY *ENGINE_load_public_key(ENGINE *e, const char *key_id,&#10;                                 UI_METHOD *ui_method, void *callback_data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const char" id="key_id" text="const char *key_id" mod=""/>
    <arg type="UI_METHOD" id="ui_method" text="UI_METHOD *ui_method" mod=""/>
    <arg type="void" id="callback_data" text="void *callback_data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_load_ssl_client_cert" text="int ENGINE_load_ssl_client_cert(ENGINE *e, SSL *s,&#10;                                &#10;# 669 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot; 3 4&#10;                               struct stack_st_X509_NAME &#10;# 669 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot;&#10;                                                   *ca_dn, X509 **pcert,&#10;                                EVP_PKEY **ppkey, &#10;# 670 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot; 3 4&#10;                                                 struct stack_st_X509 &#10;# 670 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot;&#10;                                                                **pother,&#10;                                UI_METHOD *ui_method, void *callback_data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="struct stack_st_X509_NAME" id="ca_dn" text="struct stack_st_X509_NAME &#10;# 669 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot;&#10;                                                   *ca_dn" mod=""/>
    <arg type="X509" id="pcert" text="X509 **pcert" mod=""/>
    <arg type="EVP_PKEY" id="ppkey" text="EVP_PKEY **ppkey" mod=""/>
    <arg type="struct stack_st_X509" id="pother" text="struct stack_st_X509 &#10;# 670 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h&quot;&#10;                                                                **pother" mod=""/>
    <arg type="UI_METHOD" id="ui_method" text="UI_METHOD *ui_method" mod=""/>
    <arg type="void" id="callback_data" text="void *callback_data" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_default_RSA" text="ENGINE *ENGINE_get_default_RSA(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON47" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_default_DSA" text="ENGINE *ENGINE_get_default_DSA(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON48" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_default_ECDH" text="ENGINE *ENGINE_get_default_ECDH(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON49" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_default_ECDSA" text="ENGINE *ENGINE_get_default_ECDSA(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON50" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_default_DH" text="ENGINE *ENGINE_get_default_DH(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON51" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_default_RAND" text="ENGINE *ENGINE_get_default_RAND(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON52" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_cipher_engine" text="ENGINE *ENGINE_get_cipher_engine(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_digest_engine" text="ENGINE *ENGINE_get_digest_engine(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_pkey_meth_engine" text="ENGINE *ENGINE_get_pkey_meth_engine(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="ENGINE" id="ENGINE_get_pkey_asn1_meth_engine" text="ENGINE *ENGINE_get_pkey_asn1_meth_engine(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default_RSA" text="int ENGINE_set_default_RSA(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default_string" text="int ENGINE_set_default_string(ENGINE *e, const char *def_list)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const char" id="def_list" text="const char *def_list" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default_DSA" text="int ENGINE_set_default_DSA(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default_ECDH" text="int ENGINE_set_default_ECDH(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default_ECDSA" text="int ENGINE_set_default_ECDSA(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default_DH" text="int ENGINE_set_default_DH(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default_RAND" text="int ENGINE_set_default_RAND(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default_ciphers" text="int ENGINE_set_default_ciphers(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default_digests" text="int ENGINE_set_default_digests(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default_pkey_meths" text="int ENGINE_set_default_pkey_meths(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default_pkey_asn1_meths" text="int ENGINE_set_default_pkey_asn1_meths(ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ENGINE_set_default" text="int ENGINE_set_default(ENGINE *e, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_add_conf_module" text="void ENGINE_add_conf_module(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON53" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="dyn_MEM_malloc_cb" text="typedef void *(*dyn_MEM_malloc_cb) (size_t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args/>
</fdecl>
<fdecl type="void" id="dyn_MEM_realloc_cb" text="typedef void *(*dyn_MEM_realloc_cb) (void *, size_t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON54" text="void *" mod=""/>
    <arg type="size_t" id="ANON55" text="size_t" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="dyn_MEM_free_cb" text="typedef void (*dyn_MEM_free_cb) (void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON56" text="void *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="dyn_lock_locking_cb" text="typedef void (*dyn_lock_locking_cb) (int, int, const char *, int)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="int" id="ANON57" text="int" mod=""/>
    <arg type="int" id="ANON58" text="int" mod=""/>
    <arg type="const char" id="ANON59" text="const char *" mod=""/>
    <arg type="int" id="ANON60" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="dyn_lock_add_lock_cb" text="typedef int (*dyn_lock_add_lock_cb) (int *, int, int, const char *, int)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="int" id="ANON61" text="int *" mod=""/>
    <arg type="int" id="ANON62" text="int" mod=""/>
    <arg type="int" id="ANON63" text="int" mod=""/>
    <arg type="const char" id="ANON64" text="const char *" mod=""/>
    <arg type="int" id="ANON65" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="struct CRYPTO_dynlock_value" id="dyn_dynlock_create_cb" text="typedef struct CRYPTO_dynlock_value *(*dyn_dynlock_create_cb) (const char *,&#10;                                                               int)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="const char" id="ANON66" text="const char *" mod=""/>
    <arg type="int" id="ANON67" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="dyn_dynlock_lock_cb" text="typedef void (*dyn_dynlock_lock_cb) (int, struct CRYPTO_dynlock_value *,&#10;                                     const char *, int)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="int" id="ANON68" text="int" mod=""/>
    <arg type="struct CRYPTO_dynlock_value" id="ANON69" text="struct CRYPTO_dynlock_value *" mod=""/>
    <arg type="const char" id="ANON70" text="const char *" mod=""/>
    <arg type="int" id="ANON71" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="dyn_dynlock_destroy_cb" text="typedef void (*dyn_dynlock_destroy_cb) (struct CRYPTO_dynlock_value *,&#10;                                        const char *, int)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="struct CRYPTO_dynlock_value" id="ANON72" text="struct CRYPTO_dynlock_value *" mod=""/>
    <arg type="const char" id="ANON73" text="const char *" mod=""/>
    <arg type="int" id="ANON74" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="dynamic_v_check_fn" text="typedef unsigned long (*dynamic_v_check_fn) (unsigned long ossl_version)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="unsigned long" id="ossl_version" text="unsigned long ossl_version" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="dynamic_bind_engine" text="typedef int (*dynamic_bind_engine) (ENGINE *e, const char *id,&#10;                                    const dynamic_fns *fns)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
    <arg type="const char" id="id" text="const char *id" mod=""/>
    <arg type="const dynamic_fns" id="fns" text="const dynamic_fns *fns" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ENGINE_get_static_state" text="void *ENGINE_get_static_state(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON75" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_ENGINE_strings" text="void ERR_load_ENGINE_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/engine.h">
  <args>
    <arg type="void" id="ANON76" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="d2i_of_void" text="typedef void *d2i_of_void(void **,const unsigned char **,long)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON0" text="void **" mod=""/>
    <arg type="const unsigned char" id="ANON1" text="const unsigned char **" mod=""/>
    <arg type="long" id="ANON2" text="long" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_of_void" text="typedef int i2d_of_void(void *,unsigned char **)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON3" text="void *" mod=""/>
    <arg type="unsigned char" id="ANON4" text="unsigned char **" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_SEQUENCE_ANY" id="d2i_ASN1_SEQUENCE_ANY" text="ASN1_SEQUENCE_ANY *d2i_ASN1_SEQUENCE_ANY(ASN1_SEQUENCE_ANY **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_SEQUENCE_ANY" id="a" text="ASN1_SEQUENCE_ANY **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_SEQUENCE_ANY" text="int i2d_ASN1_SEQUENCE_ANY(const ASN1_SEQUENCE_ANY *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_SEQUENCE_ANY" id="a" text="const ASN1_SEQUENCE_ANY *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_SEQUENCE_ANY" id="d2i_ASN1_SET_ANY" text="ASN1_SEQUENCE_ANY *d2i_ASN1_SET_ANY(ASN1_SEQUENCE_ANY **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_SEQUENCE_ANY" id="a" text="ASN1_SEQUENCE_ANY **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_SET_ANY" text="int i2d_ASN1_SET_ANY(const ASN1_SEQUENCE_ANY *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_SEQUENCE_ANY" id="a" text="const ASN1_SEQUENCE_ANY *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TYPE" id="ASN1_TYPE_new" text="ASN1_TYPE *ASN1_TYPE_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_TYPE_free" text="void ASN1_TYPE_free(ASN1_TYPE *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TYPE" id="a" text="ASN1_TYPE *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TYPE" id="d2i_ASN1_TYPE" text="ASN1_TYPE *d2i_ASN1_TYPE(ASN1_TYPE **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TYPE" id="a" text="ASN1_TYPE **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_TYPE" text="int i2d_ASN1_TYPE(ASN1_TYPE *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TYPE" id="a" text="ASN1_TYPE *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_TYPE_get" text="int ASN1_TYPE_get(ASN1_TYPE *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TYPE" id="a" text="ASN1_TYPE *a" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_TYPE_set" text="void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TYPE" id="a" text="ASN1_TYPE *a" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_TYPE_set1" text="int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TYPE" id="a" text="ASN1_TYPE *a" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const void" id="value" text="const void *value" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_TYPE_cmp" text="int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_TYPE" id="a" text="const ASN1_TYPE *a" mod=""/>
    <arg type="const ASN1_TYPE" id="b" text="const ASN1_TYPE *b" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="ASN1_OBJECT_new" text="ASN1_OBJECT *ASN1_OBJECT_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_OBJECT_free" text="void ASN1_OBJECT_free(ASN1_OBJECT *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_OBJECT" id="a" text="ASN1_OBJECT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_OBJECT" text="int i2d_ASN1_OBJECT(ASN1_OBJECT *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_OBJECT" id="a" text="ASN1_OBJECT *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="c2i_ASN1_OBJECT" text="ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,&#10;                             long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_OBJECT" id="a" text="ASN1_OBJECT **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="d2i_ASN1_OBJECT" text="ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,&#10;                             long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_OBJECT" id="a" text="ASN1_OBJECT **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="ASN1_STRING_new" text="ASN1_STRING *ASN1_STRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_STRING_free" text="void ASN1_STRING_free(ASN1_STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_STRING_clear_free" text="void ASN1_STRING_clear_free(ASN1_STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_STRING_copy" text="int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="dst" text="ASN1_STRING *dst" mod=""/>
    <arg type="const ASN1_STRING" id="str" text="const ASN1_STRING *str" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="ASN1_STRING_dup" text="ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_STRING" id="a" text="const ASN1_STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="ASN1_STRING_type_new" text="ASN1_STRING *ASN1_STRING_type_new(int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_STRING_cmp" text="int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_STRING" id="a" text="const ASN1_STRING *a" mod=""/>
    <arg type="const ASN1_STRING" id="b" text="const ASN1_STRING *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_STRING_set" text="int ASN1_STRING_set(ASN1_STRING *str, const void *data, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="str" text="ASN1_STRING *str" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_STRING_set0" text="void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="str" text="ASN1_STRING *str" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_STRING_length" text="int ASN1_STRING_length(const ASN1_STRING *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_STRING" id="x" text="const ASN1_STRING *x" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_STRING_length_set" text="void ASN1_STRING_length_set(ASN1_STRING *x, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="x" text="ASN1_STRING *x" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_STRING_type" text="int ASN1_STRING_type(ASN1_STRING *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="x" text="ASN1_STRING *x" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="ASN1_STRING_data" text="unsigned char *ASN1_STRING_data(ASN1_STRING *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="x" text="ASN1_STRING *x" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_BIT_STRING" id="ASN1_BIT_STRING_new" text="ASN1_BIT_STRING *ASN1_BIT_STRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_BIT_STRING_free" text="void ASN1_BIT_STRING_free(ASN1_BIT_STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BIT_STRING" id="a" text="ASN1_BIT_STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_BIT_STRING" id="d2i_ASN1_BIT_STRING" text="ASN1_BIT_STRING *d2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BIT_STRING" id="a" text="ASN1_BIT_STRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_BIT_STRING" text="int i2d_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BIT_STRING" id="a" text="ASN1_BIT_STRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2c_ASN1_BIT_STRING" text="int i2c_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BIT_STRING" id="a" text="ASN1_BIT_STRING *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_BIT_STRING" id="c2i_ASN1_BIT_STRING" text="ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a,&#10;                                     const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BIT_STRING" id="a" text="ASN1_BIT_STRING **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_BIT_STRING_set" text="int ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned char *d, int length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BIT_STRING" id="a" text="ASN1_BIT_STRING *a" mod=""/>
    <arg type="unsigned char" id="d" text="unsigned char *d" mod=""/>
    <arg type="int" id="length" text="int length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_BIT_STRING_set_bit" text="int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BIT_STRING" id="a" text="ASN1_BIT_STRING *a" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
    <arg type="int" id="value" text="int value" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_BIT_STRING_get_bit" text="int ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING *a, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BIT_STRING" id="a" text="ASN1_BIT_STRING *a" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_BIT_STRING_check" text="int ASN1_BIT_STRING_check(ASN1_BIT_STRING *a,&#10;                          unsigned char *flags, int flags_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BIT_STRING" id="a" text="ASN1_BIT_STRING *a" mod=""/>
    <arg type="unsigned char" id="flags" text="unsigned char *flags" mod=""/>
    <arg type="int" id="flags_len" text="int flags_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_BIT_STRING_name_print" text="int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,&#10;                               BIT_STRING_BITNAME *tbl, int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="ASN1_BIT_STRING" id="bs" text="ASN1_BIT_STRING *bs" mod=""/>
    <arg type="BIT_STRING_BITNAME" id="tbl" text="BIT_STRING_BITNAME *tbl" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_BIT_STRING_num_asc" text="int ASN1_BIT_STRING_num_asc(char *name, BIT_STRING_BITNAME *tbl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="char" id="name" text="char *name" mod=""/>
    <arg type="BIT_STRING_BITNAME" id="tbl" text="BIT_STRING_BITNAME *tbl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_BIT_STRING_set_asc" text="int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, char *name, int value,&#10;                            BIT_STRING_BITNAME *tbl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BIT_STRING" id="bs" text="ASN1_BIT_STRING *bs" mod=""/>
    <arg type="char" id="name" text="char *name" mod=""/>
    <arg type="int" id="value" text="int value" mod=""/>
    <arg type="BIT_STRING_BITNAME" id="tbl" text="BIT_STRING_BITNAME *tbl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_BOOLEAN" text="int i2d_ASN1_BOOLEAN(int a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="int" id="a" text="int a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="d2i_ASN1_BOOLEAN" text="int d2i_ASN1_BOOLEAN(int *a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="int" id="a" text="int *a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_INTEGER" id="ASN1_INTEGER_new" text="ASN1_INTEGER *ASN1_INTEGER_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON9" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_INTEGER_free" text="void ASN1_INTEGER_free(ASN1_INTEGER *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_INTEGER" id="a" text="ASN1_INTEGER *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_INTEGER" id="d2i_ASN1_INTEGER" text="ASN1_INTEGER *d2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_INTEGER" id="a" text="ASN1_INTEGER **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_INTEGER" text="int i2d_ASN1_INTEGER(ASN1_INTEGER *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_INTEGER" id="a" text="ASN1_INTEGER *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2c_ASN1_INTEGER" text="int i2c_ASN1_INTEGER(ASN1_INTEGER *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_INTEGER" id="a" text="ASN1_INTEGER *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_INTEGER" id="c2i_ASN1_INTEGER" text="ASN1_INTEGER *c2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned char **pp,&#10;                               long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_INTEGER" id="a" text="ASN1_INTEGER **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_INTEGER" id="d2i_ASN1_UINTEGER" text="ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,&#10;                                long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_INTEGER" id="a" text="ASN1_INTEGER **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_INTEGER" id="ASN1_INTEGER_dup" text="ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_INTEGER" id="x" text="const ASN1_INTEGER *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_INTEGER_cmp" text="int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_INTEGER" id="x" text="const ASN1_INTEGER *x" mod=""/>
    <arg type="const ASN1_INTEGER" id="y" text="const ASN1_INTEGER *y" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_ENUMERATED" id="ASN1_ENUMERATED_new" text="ASN1_ENUMERATED *ASN1_ENUMERATED_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON10" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_ENUMERATED_free" text="void ASN1_ENUMERATED_free(ASN1_ENUMERATED *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_ENUMERATED" id="a" text="ASN1_ENUMERATED *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_ENUMERATED" id="d2i_ASN1_ENUMERATED" text="ASN1_ENUMERATED *d2i_ASN1_ENUMERATED(ASN1_ENUMERATED **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_ENUMERATED" id="a" text="ASN1_ENUMERATED **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_ENUMERATED" text="int i2d_ASN1_ENUMERATED(ASN1_ENUMERATED *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_ENUMERATED" id="a" text="ASN1_ENUMERATED *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_UTCTIME_check" text="int ASN1_UTCTIME_check(const ASN1_UTCTIME *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_UTCTIME" id="a" text="const ASN1_UTCTIME *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_UTCTIME" id="ASN1_UTCTIME_set" text="ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UTCTIME" id="s" text="ASN1_UTCTIME *s" mod=""/>
    <arg type="time_t" id="t" text="time_t t" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_UTCTIME" id="ASN1_UTCTIME_adj" text="ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,&#10;                               int offset_day, long offset_sec)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UTCTIME" id="s" text="ASN1_UTCTIME *s" mod=""/>
    <arg type="time_t" id="t" text="time_t t" mod=""/>
    <arg type="int" id="offset_day" text="int offset_day" mod=""/>
    <arg type="long" id="offset_sec" text="long offset_sec" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_UTCTIME_set_string" text="int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UTCTIME" id="s" text="ASN1_UTCTIME *s" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_UTCTIME_cmp_time_t" text="int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_UTCTIME" id="s" text="const ASN1_UTCTIME *s" mod=""/>
    <arg type="time_t" id="t" text="time_t t" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_GENERALIZEDTIME_check" text="int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_GENERALIZEDTIME" id="a" text="const ASN1_GENERALIZEDTIME *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_GENERALIZEDTIME" id="ASN1_GENERALIZEDTIME_set" text="ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,&#10;                                               time_t t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_GENERALIZEDTIME" id="s" text="ASN1_GENERALIZEDTIME *s" mod=""/>
    <arg type="time_t" id="t" text="time_t t" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_GENERALIZEDTIME" id="ASN1_GENERALIZEDTIME_adj" text="ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,&#10;                                               time_t t, int offset_day,&#10;                                               long offset_sec)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_GENERALIZEDTIME" id="s" text="ASN1_GENERALIZEDTIME *s" mod=""/>
    <arg type="time_t" id="t" text="time_t t" mod=""/>
    <arg type="int" id="offset_day" text="int offset_day" mod=""/>
    <arg type="long" id="offset_sec" text="long offset_sec" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_GENERALIZEDTIME_set_string" text="int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_GENERALIZEDTIME" id="s" text="ASN1_GENERALIZEDTIME *s" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_TIME_diff" text="int ASN1_TIME_diff(int *pday, int *psec,&#10;                   const ASN1_TIME *from, const ASN1_TIME *to)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="int" id="pday" text="int *pday" mod=""/>
    <arg type="int" id="psec" text="int *psec" mod=""/>
    <arg type="const ASN1_TIME" id="from" text="const ASN1_TIME *from" mod=""/>
    <arg type="const ASN1_TIME" id="to" text="const ASN1_TIME *to" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="ASN1_OCTET_STRING_new" text="ASN1_OCTET_STRING *ASN1_OCTET_STRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON11" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_OCTET_STRING_free" text="void ASN1_OCTET_STRING_free(ASN1_OCTET_STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_OCTET_STRING" id="a" text="ASN1_OCTET_STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="d2i_ASN1_OCTET_STRING" text="ASN1_OCTET_STRING *d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_OCTET_STRING" id="a" text="ASN1_OCTET_STRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_OCTET_STRING" text="int i2d_ASN1_OCTET_STRING(ASN1_OCTET_STRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_OCTET_STRING" id="a" text="ASN1_OCTET_STRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="ASN1_OCTET_STRING_dup" text="ASN1_OCTET_STRING *ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_OCTET_STRING" id="a" text="const ASN1_OCTET_STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_OCTET_STRING_cmp" text="int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,&#10;                          const ASN1_OCTET_STRING *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_OCTET_STRING" id="a" text="const ASN1_OCTET_STRING *a" mod=""/>
    <arg type="const ASN1_OCTET_STRING" id="b" text="const ASN1_OCTET_STRING *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_OCTET_STRING_set" text="int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, const unsigned char *data,&#10;                          int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_OCTET_STRING" id="str" text="ASN1_OCTET_STRING *str" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_VISIBLESTRING" id="ASN1_VISIBLESTRING_new" text="ASN1_VISIBLESTRING *ASN1_VISIBLESTRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON12" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_VISIBLESTRING_free" text="void ASN1_VISIBLESTRING_free(ASN1_VISIBLESTRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_VISIBLESTRING" id="a" text="ASN1_VISIBLESTRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_VISIBLESTRING" id="d2i_ASN1_VISIBLESTRING" text="ASN1_VISIBLESTRING *d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_VISIBLESTRING" id="a" text="ASN1_VISIBLESTRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_VISIBLESTRING" text="int i2d_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_VISIBLESTRING" id="a" text="ASN1_VISIBLESTRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_UNIVERSALSTRING" id="ASN1_UNIVERSALSTRING_new" text="ASN1_UNIVERSALSTRING *ASN1_UNIVERSALSTRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON13" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_UNIVERSALSTRING_free" text="void ASN1_UNIVERSALSTRING_free(ASN1_UNIVERSALSTRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UNIVERSALSTRING" id="a" text="ASN1_UNIVERSALSTRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_UNIVERSALSTRING" id="d2i_ASN1_UNIVERSALSTRING" text="ASN1_UNIVERSALSTRING *d2i_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UNIVERSALSTRING" id="a" text="ASN1_UNIVERSALSTRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_UNIVERSALSTRING" text="int i2d_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UNIVERSALSTRING" id="a" text="ASN1_UNIVERSALSTRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_UTF8STRING" id="ASN1_UTF8STRING_new" text="ASN1_UTF8STRING *ASN1_UTF8STRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON14" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_UTF8STRING_free" text="void ASN1_UTF8STRING_free(ASN1_UTF8STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UTF8STRING" id="a" text="ASN1_UTF8STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_UTF8STRING" id="d2i_ASN1_UTF8STRING" text="ASN1_UTF8STRING *d2i_ASN1_UTF8STRING(ASN1_UTF8STRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UTF8STRING" id="a" text="ASN1_UTF8STRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_UTF8STRING" text="int i2d_ASN1_UTF8STRING(ASN1_UTF8STRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UTF8STRING" id="a" text="ASN1_UTF8STRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_NULL" id="ASN1_NULL_new" text="ASN1_NULL *ASN1_NULL_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON15" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_NULL_free" text="void ASN1_NULL_free(ASN1_NULL *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_NULL" id="a" text="ASN1_NULL *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_NULL" id="d2i_ASN1_NULL" text="ASN1_NULL *d2i_ASN1_NULL(ASN1_NULL **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_NULL" id="a" text="ASN1_NULL **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_NULL" text="int i2d_ASN1_NULL(ASN1_NULL *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_NULL" id="a" text="ASN1_NULL *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_BMPSTRING" id="ASN1_BMPSTRING_new" text="ASN1_BMPSTRING *ASN1_BMPSTRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON16" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_BMPSTRING_free" text="void ASN1_BMPSTRING_free(ASN1_BMPSTRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BMPSTRING" id="a" text="ASN1_BMPSTRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_BMPSTRING" id="d2i_ASN1_BMPSTRING" text="ASN1_BMPSTRING *d2i_ASN1_BMPSTRING(ASN1_BMPSTRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BMPSTRING" id="a" text="ASN1_BMPSTRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_BMPSTRING" text="int i2d_ASN1_BMPSTRING(ASN1_BMPSTRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_BMPSTRING" id="a" text="ASN1_BMPSTRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UTF8_getc" text="int UTF8_getc(const unsigned char *str, int len, unsigned long *val)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const unsigned char" id="str" text="const unsigned char *str" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="unsigned long" id="val" text="unsigned long *val" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UTF8_putc" text="int UTF8_putc(unsigned char *str, int len, unsigned long value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="unsigned char" id="str" text="unsigned char *str" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="unsigned long" id="value" text="unsigned long value" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="ASN1_PRINTABLE_new" text="ASN1_STRING *ASN1_PRINTABLE_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON17" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_PRINTABLE_free" text="void ASN1_PRINTABLE_free(ASN1_STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="d2i_ASN1_PRINTABLE" text="ASN1_STRING *d2i_ASN1_PRINTABLE(ASN1_STRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_PRINTABLE" text="int i2d_ASN1_PRINTABLE(ASN1_STRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="DIRECTORYSTRING_new" text="ASN1_STRING *DIRECTORYSTRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON18" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DIRECTORYSTRING_free" text="void DIRECTORYSTRING_free(ASN1_STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="d2i_DIRECTORYSTRING" text="ASN1_STRING *d2i_DIRECTORYSTRING(ASN1_STRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DIRECTORYSTRING" text="int i2d_DIRECTORYSTRING(ASN1_STRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="DISPLAYTEXT_new" text="ASN1_STRING *DISPLAYTEXT_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON19" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DISPLAYTEXT_free" text="void DISPLAYTEXT_free(ASN1_STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="d2i_DISPLAYTEXT" text="ASN1_STRING *d2i_DISPLAYTEXT(ASN1_STRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DISPLAYTEXT" text="int i2d_DISPLAYTEXT(ASN1_STRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_PRINTABLESTRING" id="ASN1_PRINTABLESTRING_new" text="ASN1_PRINTABLESTRING *ASN1_PRINTABLESTRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON20" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_PRINTABLESTRING_free" text="void ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PRINTABLESTRING" id="a" text="ASN1_PRINTABLESTRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_PRINTABLESTRING" id="d2i_ASN1_PRINTABLESTRING" text="ASN1_PRINTABLESTRING *d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PRINTABLESTRING" id="a" text="ASN1_PRINTABLESTRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_PRINTABLESTRING" text="int i2d_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PRINTABLESTRING" id="a" text="ASN1_PRINTABLESTRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_T61STRING" id="ASN1_T61STRING_new" text="ASN1_T61STRING *ASN1_T61STRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON21" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_T61STRING_free" text="void ASN1_T61STRING_free(ASN1_T61STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_T61STRING" id="a" text="ASN1_T61STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_T61STRING" id="d2i_ASN1_T61STRING" text="ASN1_T61STRING *d2i_ASN1_T61STRING(ASN1_T61STRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_T61STRING" id="a" text="ASN1_T61STRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_T61STRING" text="int i2d_ASN1_T61STRING(ASN1_T61STRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_T61STRING" id="a" text="ASN1_T61STRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_IA5STRING" id="ASN1_IA5STRING_new" text="ASN1_IA5STRING *ASN1_IA5STRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON22" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_IA5STRING_free" text="void ASN1_IA5STRING_free(ASN1_IA5STRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_IA5STRING" id="a" text="ASN1_IA5STRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_IA5STRING" id="d2i_ASN1_IA5STRING" text="ASN1_IA5STRING *d2i_ASN1_IA5STRING(ASN1_IA5STRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_IA5STRING" id="a" text="ASN1_IA5STRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_IA5STRING" text="int i2d_ASN1_IA5STRING(ASN1_IA5STRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_IA5STRING" id="a" text="ASN1_IA5STRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_GENERALSTRING" id="ASN1_GENERALSTRING_new" text="ASN1_GENERALSTRING *ASN1_GENERALSTRING_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON23" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_GENERALSTRING_free" text="void ASN1_GENERALSTRING_free(ASN1_GENERALSTRING *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_GENERALSTRING" id="a" text="ASN1_GENERALSTRING *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_GENERALSTRING" id="d2i_ASN1_GENERALSTRING" text="ASN1_GENERALSTRING *d2i_ASN1_GENERALSTRING(ASN1_GENERALSTRING **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_GENERALSTRING" id="a" text="ASN1_GENERALSTRING **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_GENERALSTRING" text="int i2d_ASN1_GENERALSTRING(ASN1_GENERALSTRING *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_GENERALSTRING" id="a" text="ASN1_GENERALSTRING *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_UTCTIME" id="ASN1_UTCTIME_new" text="ASN1_UTCTIME *ASN1_UTCTIME_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON24" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_UTCTIME_free" text="void ASN1_UTCTIME_free(ASN1_UTCTIME *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UTCTIME" id="a" text="ASN1_UTCTIME *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_UTCTIME" id="d2i_ASN1_UTCTIME" text="ASN1_UTCTIME *d2i_ASN1_UTCTIME(ASN1_UTCTIME **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UTCTIME" id="a" text="ASN1_UTCTIME **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_UTCTIME" text="int i2d_ASN1_UTCTIME(ASN1_UTCTIME *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UTCTIME" id="a" text="ASN1_UTCTIME *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_GENERALIZEDTIME" id="ASN1_GENERALIZEDTIME_new" text="ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON25" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_GENERALIZEDTIME_free" text="void ASN1_GENERALIZEDTIME_free(ASN1_GENERALIZEDTIME *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_GENERALIZEDTIME" id="a" text="ASN1_GENERALIZEDTIME *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_GENERALIZEDTIME" id="d2i_ASN1_GENERALIZEDTIME" text="ASN1_GENERALIZEDTIME *d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_GENERALIZEDTIME" id="a" text="ASN1_GENERALIZEDTIME **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_GENERALIZEDTIME" text="int i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_GENERALIZEDTIME" id="a" text="ASN1_GENERALIZEDTIME *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TIME" id="ASN1_TIME_new" text="ASN1_TIME *ASN1_TIME_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON26" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_TIME_free" text="void ASN1_TIME_free(ASN1_TIME *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TIME" id="a" text="ASN1_TIME *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TIME" id="d2i_ASN1_TIME" text="ASN1_TIME *d2i_ASN1_TIME(ASN1_TIME **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TIME" id="a" text="ASN1_TIME **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_TIME" text="int i2d_ASN1_TIME(ASN1_TIME *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TIME" id="a" text="ASN1_TIME *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TIME" id="ASN1_TIME_set" text="ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TIME" id="s" text="ASN1_TIME *s" mod=""/>
    <arg type="time_t" id="t" text="time_t t" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TIME" id="ASN1_TIME_adj" text="ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,&#10;                         int offset_day, long offset_sec)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TIME" id="s" text="ASN1_TIME *s" mod=""/>
    <arg type="time_t" id="t" text="time_t t" mod=""/>
    <arg type="int" id="offset_day" text="int offset_day" mod=""/>
    <arg type="long" id="offset_sec" text="long offset_sec" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_TIME_check" text="int ASN1_TIME_check(ASN1_TIME *t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TIME" id="t" text="ASN1_TIME *t" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_GENERALIZEDTIME" id="ASN1_TIME_to_generalizedtime" text="ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(ASN1_TIME *t, ASN1_GENERALIZEDTIME&#10;                                                   **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TIME" id="t" text="ASN1_TIME *t" mod=""/>
    <arg type="ASN1_GENERALIZEDTIME" id="out" text="ASN1_GENERALIZEDTIME&#10;                                                   **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_TIME_set_string" text="int ASN1_TIME_set_string(ASN1_TIME *s, const char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TIME" id="s" text="ASN1_TIME *s" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_SET" text="int i2d_ASN1_SET(&#10;# 904 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot; 3 4&#10;                struct stack_st_OPENSSL_BLOCK &#10;# 904 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot;&#10;                                        *a, unsigned char **pp,&#10;                 i2d_of_void *i2d, int ex_tag, int ex_class, int is_set)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="struct stack_st_OPENSSL_BLOCK" id="a" text="struct stack_st_OPENSSL_BLOCK &#10;# 904 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot;&#10;                                        *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
    <arg type="i2d_of_void" id="i2d" text="i2d_of_void *i2d" mod=""/>
    <arg type="int" id="ex_tag" text="int ex_tag" mod=""/>
    <arg type="int" id="ex_class" text="int ex_class" mod=""/>
    <arg type="int" id="is_set" text="int is_set" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_OPENSSL_BLOCK" id="d2i_ASN1_SET" text="struct stack_st_OPENSSL_BLOCK &#10;# 906 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot;&#10;                       *d2i_ASN1_SET(&#10;# 906 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot; 3 4&#10;                                     struct stack_st_OPENSSL_BLOCK &#10;# 906 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot;&#10;                                                             **a,&#10;                                      const unsigned char **pp,&#10;                                      long length, d2i_of_void *d2i,&#10;                                      void (*free_func) (OPENSSL_BLOCK),&#10;                                      int ex_tag, int ex_class)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="struct stack_st_OPENSSL_BLOCK" id="a" text="struct stack_st_OPENSSL_BLOCK &#10;# 906 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot;&#10;                                                             **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="d2i_of_void" id="d2i" text="d2i_of_void *d2i" mod=""/>
    <arg type="void" id="free_func" text="void (*free_func) (OPENSSL_BLOCK)" mod=""/>
    <arg type="int" id="ex_tag" text="int ex_tag" mod=""/>
    <arg type="int" id="ex_class" text="int ex_class" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2a_ASN1_INTEGER" text="int i2a_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="ASN1_INTEGER" id="a" text="ASN1_INTEGER *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="a2i_ASN1_INTEGER" text="int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="ASN1_INTEGER" id="bs" text="ASN1_INTEGER *bs" mod=""/>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2a_ASN1_ENUMERATED" text="int i2a_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="ASN1_ENUMERATED" id="a" text="ASN1_ENUMERATED *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="a2i_ASN1_ENUMERATED" text="int a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="ASN1_ENUMERATED" id="bs" text="ASN1_ENUMERATED *bs" mod=""/>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2a_ASN1_OBJECT" text="int i2a_ASN1_OBJECT(BIO *bp, ASN1_OBJECT *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="ASN1_OBJECT" id="a" text="ASN1_OBJECT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="a2i_ASN1_STRING" text="int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="ASN1_STRING" id="bs" text="ASN1_STRING *bs" mod=""/>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2a_ASN1_STRING" text="int i2a_ASN1_STRING(BIO *bp, ASN1_STRING *a, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING *a" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2t_ASN1_OBJECT" text="int i2t_ASN1_OBJECT(char *buf, int buf_len, ASN1_OBJECT *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="buf_len" text="int buf_len" mod=""/>
    <arg type="ASN1_OBJECT" id="a" text="ASN1_OBJECT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="a2d_ASN1_OBJECT" text="int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="olen" text="int olen" mod=""/>
    <arg type="const char" id="buf" text="const char *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="ASN1_OBJECT_create" text="ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data, int len,&#10;                                const char *sn, const char *ln)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="const char" id="sn" text="const char *sn" mod=""/>
    <arg type="const char" id="ln" text="const char *ln" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_INTEGER_set" text="int ASN1_INTEGER_set(ASN1_INTEGER *a, long v)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_INTEGER" id="a" text="ASN1_INTEGER *a" mod=""/>
    <arg type="long" id="v" text="long v" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="ASN1_INTEGER_get" text="long ASN1_INTEGER_get(const ASN1_INTEGER *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_INTEGER" id="a" text="const ASN1_INTEGER *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_INTEGER" id="BN_to_ASN1_INTEGER" text="ASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const BIGNUM" id="bn" text="const BIGNUM *bn" mod=""/>
    <arg type="ASN1_INTEGER" id="ai" text="ASN1_INTEGER *ai" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="ASN1_INTEGER_to_BN" text="BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_INTEGER" id="ai" text="const ASN1_INTEGER *ai" mod=""/>
    <arg type="BIGNUM" id="bn" text="BIGNUM *bn" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_ENUMERATED_set" text="int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_ENUMERATED" id="a" text="ASN1_ENUMERATED *a" mod=""/>
    <arg type="long" id="v" text="long v" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="ASN1_ENUMERATED_get" text="long ASN1_ENUMERATED_get(ASN1_ENUMERATED *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_ENUMERATED" id="a" text="ASN1_ENUMERATED *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_ENUMERATED" id="BN_to_ASN1_ENUMERATED" text="ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(BIGNUM *bn, ASN1_ENUMERATED *ai)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIGNUM" id="bn" text="BIGNUM *bn" mod=""/>
    <arg type="ASN1_ENUMERATED" id="ai" text="ASN1_ENUMERATED *ai" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="ASN1_ENUMERATED_to_BN" text="BIGNUM *ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED *ai, BIGNUM *bn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_ENUMERATED" id="ai" text="ASN1_ENUMERATED *ai" mod=""/>
    <arg type="BIGNUM" id="bn" text="BIGNUM *bn" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_PRINTABLE_type" text="int ASN1_PRINTABLE_type(const unsigned char *s, int max)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const unsigned char" id="s" text="const unsigned char *s" mod=""/>
    <arg type="int" id="max" text="int max" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_bytes" text="int i2d_ASN1_bytes(ASN1_STRING *a, unsigned char **pp, int tag, int xclass)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
    <arg type="int" id="tag" text="int tag" mod=""/>
    <arg type="int" id="xclass" text="int xclass" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="d2i_ASN1_bytes" text="ASN1_STRING *d2i_ASN1_bytes(ASN1_STRING **a, const unsigned char **pp,&#10;                            long length, int Ptag, int Pclass)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="int" id="Ptag" text="int Ptag" mod=""/>
    <arg type="int" id="Pclass" text="int Pclass" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ASN1_tag2bit" text="unsigned long ASN1_tag2bit(int tag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="int" id="tag" text="int tag" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="d2i_ASN1_type_bytes" text="ASN1_STRING *d2i_ASN1_type_bytes(ASN1_STRING **a, const unsigned char **pp,&#10;                                 long length, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="a" text="ASN1_STRING **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="asn1_Finish" text="int asn1_Finish(ASN1_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_CTX" id="c" text="ASN1_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="asn1_const_Finish" text="int asn1_const_Finish(ASN1_const_CTX *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_const_CTX" id="c" text="ASN1_const_CTX *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_get_object" text="int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,&#10;                    int *pclass, long omax)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="plength" text="long *plength" mod=""/>
    <arg type="int" id="ptag" text="int *ptag" mod=""/>
    <arg type="int" id="pclass" text="int *pclass" mod=""/>
    <arg type="long" id="omax" text="long omax" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_check_infinite_end" text="int ASN1_check_infinite_end(unsigned char **p, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="unsigned char" id="p" text="unsigned char **p" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_const_check_infinite_end" text="int ASN1_const_check_infinite_end(const unsigned char **p, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const unsigned char" id="p" text="const unsigned char **p" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_put_object" text="void ASN1_put_object(unsigned char **pp, int constructed, int length,&#10;                     int tag, int xclass)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
    <arg type="int" id="constructed" text="int constructed" mod=""/>
    <arg type="int" id="length" text="int length" mod=""/>
    <arg type="int" id="tag" text="int tag" mod=""/>
    <arg type="int" id="xclass" text="int xclass" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_put_eoc" text="int ASN1_put_eoc(unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_object_size" text="int ASN1_object_size(int constructed, int length, int tag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="int" id="constructed" text="int constructed" mod=""/>
    <arg type="int" id="length" text="int length" mod=""/>
    <arg type="int" id="tag" text="int tag" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_dup" text="void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="i2d_of_void" id="i2d" text="i2d_of_void *i2d" mod=""/>
    <arg type="d2i_of_void" id="d2i" text="d2i_of_void *d2i" mod=""/>
    <arg type="void" id="x" text="void *x" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_item_dup" text="void *ASN1_item_dup(const ASN1_ITEM *it, void *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="void" id="x" text="void *x" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_d2i_fp" text="void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="xnew" text="void *(*xnew) (void)" mod=""/>
    <arg type="d2i_of_void" id="d2i" text="d2i_of_void *d2i" mod=""/>
    <arg type="FILE" id="in" text="FILE *in" mod=""/>
    <arg type="void" id="x" text="void **x" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_item_d2i_fp" text="void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="FILE" id="in" text="FILE *in" mod=""/>
    <arg type="void" id="x" text="void *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_i2d_fp" text="int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="i2d_of_void" id="i2d" text="i2d_of_void *i2d" mod=""/>
    <arg type="FILE" id="out" text="FILE *out" mod=""/>
    <arg type="void" id="x" text="void *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_i2d_fp" text="int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="FILE" id="out" text="FILE *out" mod=""/>
    <arg type="void" id="x" text="void *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_STRING_print_ex_fp" text="int ASN1_STRING_print_ex_fp(FILE *fp, ASN1_STRING *str, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="ASN1_STRING" id="str" text="ASN1_STRING *str" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_STRING_to_UTF8" text="int ASN1_STRING_to_UTF8(unsigned char **out, ASN1_STRING *in)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
    <arg type="ASN1_STRING" id="in" text="ASN1_STRING *in" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_d2i_bio" text="void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="xnew" text="void *(*xnew) (void)" mod=""/>
    <arg type="d2i_of_void" id="d2i" text="d2i_of_void *d2i" mod=""/>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="void" id="x" text="void **x" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_item_d2i_bio" text="void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="void" id="x" text="void *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_i2d_bio" text="int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="i2d_of_void" id="i2d" text="i2d_of_void *i2d" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="unsigned char" id="x" text="unsigned char *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_i2d_bio" text="int ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="void" id="x" text="void *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_UTCTIME_print" text="int ASN1_UTCTIME_print(BIO *fp, const ASN1_UTCTIME *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="const ASN1_UTCTIME" id="a" text="const ASN1_UTCTIME *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_GENERALIZEDTIME_print" text="int ASN1_GENERALIZEDTIME_print(BIO *fp, const ASN1_GENERALIZEDTIME *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="const ASN1_GENERALIZEDTIME" id="a" text="const ASN1_GENERALIZEDTIME *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_TIME_print" text="int ASN1_TIME_print(BIO *fp, const ASN1_TIME *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="const ASN1_TIME" id="a" text="const ASN1_TIME *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_STRING_print" text="int ASN1_STRING_print(BIO *bp, const ASN1_STRING *v)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const ASN1_STRING" id="v" text="const ASN1_STRING *v" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_STRING_print_ex" text="int ASN1_STRING_print_ex(BIO *out, ASN1_STRING *str, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="ASN1_STRING" id="str" text="ASN1_STRING *str" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_bn_print" text="int ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,&#10;                  unsigned char *buf, int off)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const char" id="number" text="const char *number" mod=""/>
    <arg type="const BIGNUM" id="num" text="const BIGNUM *num" mod=""/>
    <arg type="unsigned char" id="buf" text="unsigned char *buf" mod=""/>
    <arg type="int" id="off" text="int off" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_parse" text="int ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char *pp" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_parse_dump" text="int ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,&#10;                    int dump)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char *pp" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="int" id="dump" text="int dump" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="ASN1_tag2str" text="const char *ASN1_tag2str(int tag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="int" id="tag" text="int tag" mod=""/>
  </args>
</fdecl>
<fdecl type="NETSCAPE_X509" id="NETSCAPE_X509_new" text="NETSCAPE_X509 *NETSCAPE_X509_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON27" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="NETSCAPE_X509_free" text="void NETSCAPE_X509_free(NETSCAPE_X509 *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="NETSCAPE_X509" id="a" text="NETSCAPE_X509 *a" mod=""/>
  </args>
</fdecl>
<fdecl type="NETSCAPE_X509" id="d2i_NETSCAPE_X509" text="NETSCAPE_X509 *d2i_NETSCAPE_X509(NETSCAPE_X509 **a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="NETSCAPE_X509" id="a" text="NETSCAPE_X509 **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_NETSCAPE_X509" text="int i2d_NETSCAPE_X509(NETSCAPE_X509 *a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="NETSCAPE_X509" id="a" text="NETSCAPE_X509 *a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_UNIVERSALSTRING_to_string" text="int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_UNIVERSALSTRING" id="s" text="ASN1_UNIVERSALSTRING *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_TYPE_set_octetstring" text="int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TYPE" id="a" text="ASN1_TYPE *a" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_TYPE_get_octetstring" text="int ASN1_TYPE_get_octetstring(ASN1_TYPE *a, unsigned char *data, int max_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TYPE" id="a" text="ASN1_TYPE *a" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char *data" mod=""/>
    <arg type="int" id="max_len" text="int max_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_TYPE_set_int_octetstring" text="int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num,&#10;                                  unsigned char *data, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TYPE" id="a" text="ASN1_TYPE *a" mod=""/>
    <arg type="long" id="num" text="long num" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_TYPE_get_int_octetstring" text="int ASN1_TYPE_get_int_octetstring(ASN1_TYPE *a, long *num,&#10;                                  unsigned char *data, int max_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_TYPE" id="a" text="ASN1_TYPE *a" mod=""/>
    <arg type="long" id="num" text="long *num" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char *data" mod=""/>
    <arg type="int" id="max_len" text="int max_len" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_OPENSSL_BLOCK" id="ASN1_seq_unpack" text="struct stack_st_OPENSSL_BLOCK &#10;# 1061 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot;&#10;                       *ASN1_seq_unpack(const unsigned char *buf, int len,&#10;                                         d2i_of_void *d2i,&#10;                                         void (*free_func) (OPENSSL_BLOCK))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const unsigned char" id="buf" text="const unsigned char *buf" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="d2i_of_void" id="d2i" text="d2i_of_void *d2i" mod=""/>
    <arg type="void" id="free_func" text="void (*free_func) (OPENSSL_BLOCK)" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="ASN1_seq_pack" text="unsigned char *ASN1_seq_pack(&#10;# 1064 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot; 3 4&#10;                            struct stack_st_OPENSSL_BLOCK &#10;# 1064 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot;&#10;                                                    *safes, i2d_of_void *i2d,&#10;                             unsigned char **buf, int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="struct stack_st_OPENSSL_BLOCK" id="safes" text="struct stack_st_OPENSSL_BLOCK &#10;# 1064 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot;&#10;                                                    *safes" mod=""/>
    <arg type="i2d_of_void" id="i2d" text="i2d_of_void *i2d" mod=""/>
    <arg type="unsigned char" id="buf" text="unsigned char **buf" mod=""/>
    <arg type="int" id="len" text="int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_unpack_string" text="void *ASN1_unpack_string(ASN1_STRING *oct, d2i_of_void *d2i)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="oct" text="ASN1_STRING *oct" mod=""/>
    <arg type="d2i_of_void" id="d2i" text="d2i_of_void *d2i" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_item_unpack" text="void *ASN1_item_unpack(ASN1_STRING *oct, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="oct" text="ASN1_STRING *oct" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="ASN1_pack_string" text="ASN1_STRING *ASN1_pack_string(void *obj, i2d_of_void *i2d,&#10;                              ASN1_OCTET_STRING **oct)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="obj" text="void *obj" mod=""/>
    <arg type="i2d_of_void" id="i2d" text="i2d_of_void *i2d" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="oct" text="ASN1_OCTET_STRING **oct" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="ASN1_item_pack" text="ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it,&#10;                            ASN1_OCTET_STRING **oct)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="obj" text="void *obj" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="oct" text="ASN1_OCTET_STRING **oct" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_STRING_set_default_mask" text="void ASN1_STRING_set_default_mask(unsigned long mask)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="unsigned long" id="mask" text="unsigned long mask" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_STRING_set_default_mask_asc" text="int ASN1_STRING_set_default_mask_asc(const char *p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const char" id="p" text="const char *p" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ASN1_STRING_get_default_mask" text="unsigned long ASN1_STRING_get_default_mask(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON28" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_mbstring_copy" text="int ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,&#10;                       int inform, unsigned long mask)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="out" text="ASN1_STRING **out" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="inform" text="int inform" mod=""/>
    <arg type="unsigned long" id="mask" text="unsigned long mask" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_mbstring_ncopy" text="int ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,&#10;                        int inform, unsigned long mask,&#10;                        long minsize, long maxsize)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="out" text="ASN1_STRING **out" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="inform" text="int inform" mod=""/>
    <arg type="unsigned long" id="mask" text="unsigned long mask" mod=""/>
    <arg type="long" id="minsize" text="long minsize" mod=""/>
    <arg type="long" id="maxsize" text="long maxsize" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="ASN1_STRING_set_by_NID" text="ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,&#10;                                    const unsigned char *in, int inlen,&#10;                                    int inform, int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_STRING" id="out" text="ASN1_STRING **out" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="int" id="inlen" text="int inlen" mod=""/>
    <arg type="int" id="inform" text="int inform" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING_TABLE" id="ASN1_STRING_TABLE_get" text="ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_STRING_TABLE_add" text="int ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="int" id="ANON29" text="int" mod=""/>
    <arg type="long" id="ANON30" text="long" mod=""/>
    <arg type="long" id="ANON31" text="long" mod=""/>
    <arg type="unsigned long" id="ANON32" text="unsigned long" mod=""/>
    <arg type="unsigned long" id="ANON33" text="unsigned long" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_STRING_TABLE_cleanup" text="void ASN1_STRING_TABLE_cleanup(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON34" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_VALUE" id="ASN1_item_new" text="ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_item_free" text="void ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_VALUE" id="val" text="ASN1_VALUE *val" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_VALUE" id="ASN1_item_d2i" text="ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **val, const unsigned char **in,&#10;                          long len, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_VALUE" id="val" text="ASN1_VALUE **val" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_i2d" text="int ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_VALUE" id="val" text="ASN1_VALUE *val" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_ndef_i2d" text="int ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,&#10;                       const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_VALUE" id="val" text="ASN1_VALUE *val" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_add_oid_module" text="void ASN1_add_oid_module(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON35" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TYPE" id="ASN1_generate_nconf" text="ASN1_TYPE *ASN1_generate_nconf(char *str, CONF *nconf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="char" id="str" text="char *str" mod=""/>
    <arg type="CONF" id="nconf" text="CONF *nconf" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TYPE" id="ASN1_generate_v3" text="ASN1_TYPE *ASN1_generate_v3(char *str, X509V3_CTX *cnf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="char" id="str" text="char *str" mod=""/>
    <arg type="X509V3_CTX" id="cnf" text="X509V3_CTX *cnf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_print" text="int ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,&#10;                    const ASN1_ITEM *it, const ASN1_PCTX *pctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="ASN1_VALUE" id="ifld" text="ASN1_VALUE *ifld" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="const ASN1_PCTX" id="pctx" text="const ASN1_PCTX *pctx" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_PCTX" id="ASN1_PCTX_new" text="ASN1_PCTX *ASN1_PCTX_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON36" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_PCTX_free" text="void ASN1_PCTX_free(ASN1_PCTX *p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PCTX" id="p" text="ASN1_PCTX *p" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ASN1_PCTX_get_flags" text="unsigned long ASN1_PCTX_get_flags(ASN1_PCTX *p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PCTX" id="p" text="ASN1_PCTX *p" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_PCTX_set_flags" text="void ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PCTX" id="p" text="ASN1_PCTX *p" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ASN1_PCTX_get_nm_flags" text="unsigned long ASN1_PCTX_get_nm_flags(ASN1_PCTX *p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PCTX" id="p" text="ASN1_PCTX *p" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_PCTX_set_nm_flags" text="void ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PCTX" id="p" text="ASN1_PCTX *p" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ASN1_PCTX_get_cert_flags" text="unsigned long ASN1_PCTX_get_cert_flags(ASN1_PCTX *p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PCTX" id="p" text="ASN1_PCTX *p" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_PCTX_set_cert_flags" text="void ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PCTX" id="p" text="ASN1_PCTX *p" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ASN1_PCTX_get_oid_flags" text="unsigned long ASN1_PCTX_get_oid_flags(ASN1_PCTX *p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PCTX" id="p" text="ASN1_PCTX *p" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_PCTX_set_oid_flags" text="void ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PCTX" id="p" text="ASN1_PCTX *p" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="ASN1_PCTX_get_str_flags" text="unsigned long ASN1_PCTX_get_str_flags(ASN1_PCTX *p)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PCTX" id="p" text="ASN1_PCTX *p" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_PCTX_set_str_flags" text="void ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="ASN1_PCTX" id="p" text="ASN1_PCTX *p" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_f_asn1" text="BIO_METHOD *BIO_f_asn1(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON37" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_NDEF" text="BIO *BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="ASN1_VALUE" id="val" text="ASN1_VALUE *val" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ASN1_bio_stream" text="int i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,&#10;                        const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="ASN1_VALUE" id="val" text="ASN1_VALUE *val" mod=""/>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_ASN1_stream" text="int PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,&#10;                              const char *hdr, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="ASN1_VALUE" id="val" text="ASN1_VALUE *val" mod=""/>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="const char" id="hdr" text="const char *hdr" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SMIME_write_ASN1" text="int SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,&#10;                     int ctype_nid, int econt_nid,&#10;                     &#10;# 1157 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot; 3 4&#10;                    struct stack_st_X509_ALGOR &#10;# 1157 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot;&#10;                                         *mdalgs, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="ASN1_VALUE" id="val" text="ASN1_VALUE *val" mod=""/>
    <arg type="BIO" id="data" text="BIO *data" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="int" id="ctype_nid" text="int ctype_nid" mod=""/>
    <arg type="int" id="econt_nid" text="int econt_nid" mod=""/>
    <arg type="struct stack_st_X509_ALGOR" id="mdalgs" text="struct stack_st_X509_ALGOR &#10;# 1157 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h&quot;&#10;                                         *mdalgs" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_VALUE" id="SMIME_read_ASN1" text="ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="BIO" id="bcont" text="BIO **bcont" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SMIME_crlf_copy" text="int SMIME_crlf_copy(BIO *in, BIO *out, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SMIME_text" text="int SMIME_text(BIO *in, BIO *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_ASN1_strings" text="void ERR_load_ASN1_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1.h">
  <args>
    <arg type="void" id="ANON38" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="ASN1_VALUE" id="ASN1_new_func" text="typedef ASN1_VALUE *ASN1_new_func(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_free_func" text="typedef void ASN1_free_func(ASN1_VALUE *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="a" text="ASN1_VALUE *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_VALUE" id="ASN1_d2i_func" text="typedef ASN1_VALUE *ASN1_d2i_func(ASN1_VALUE **a, const unsigned char **in,&#10;                                  long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="a" text="ASN1_VALUE **a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_i2d_func" text="typedef int ASN1_i2d_func(ASN1_VALUE *a, unsigned char **in)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="a" text="ASN1_VALUE *a" mod=""/>
    <arg type="unsigned char" id="in" text="unsigned char **in" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_ex_d2i" text="typedef int ASN1_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,&#10;                        const ASN1_ITEM *it, int tag, int aclass, char opt,&#10;                        ASN1_TLC *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="int" id="tag" text="int tag" mod=""/>
    <arg type="int" id="aclass" text="int aclass" mod=""/>
    <arg type="char" id="opt" text="char opt" mod=""/>
    <arg type="ASN1_TLC" id="ctx" text="ASN1_TLC *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_ex_i2d" text="typedef int ASN1_ex_i2d(ASN1_VALUE **pval, unsigned char **out,&#10;                        const ASN1_ITEM *it, int tag, int aclass)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="int" id="tag" text="int tag" mod=""/>
    <arg type="int" id="aclass" text="int aclass" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_ex_new_func" text="typedef int ASN1_ex_new_func(ASN1_VALUE **pval, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_ex_free_func" text="typedef void ASN1_ex_free_func(ASN1_VALUE **pval, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_ex_print_func" text="typedef int ASN1_ex_print_func(BIO *out, ASN1_VALUE **pval,&#10;                               int indent, const char *fname,&#10;                               const ASN1_PCTX *pctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="const char" id="fname" text="const char *fname" mod=""/>
    <arg type="const ASN1_PCTX" id="pctx" text="const ASN1_PCTX *pctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_primitive_i2c" text="typedef int ASN1_primitive_i2c(ASN1_VALUE **pval, unsigned char *cont,&#10;                               int *putype, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="unsigned char" id="cont" text="unsigned char *cont" mod=""/>
    <arg type="int" id="putype" text="int *putype" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_primitive_c2i" text="typedef int ASN1_primitive_c2i(ASN1_VALUE **pval, const unsigned char *cont,&#10;                               int len, int utype, char *free_cont,&#10;                               const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const unsigned char" id="cont" text="const unsigned char *cont" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="utype" text="int utype" mod=""/>
    <arg type="char" id="free_cont" text="char *free_cont" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_primitive_print" text="typedef int ASN1_primitive_print(BIO *out, ASN1_VALUE **pval,&#10;                                 const ASN1_ITEM *it, int indent,&#10;                                 const ASN1_PCTX *pctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="const ASN1_PCTX" id="pctx" text="const ASN1_PCTX *pctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_aux_cb" text="typedef int ASN1_aux_cb(int operation, ASN1_VALUE **in, const ASN1_ITEM *it,&#10;                        void *exarg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="int" id="operation" text="int operation" mod=""/>
    <arg type="ASN1_VALUE" id="in" text="ASN1_VALUE **in" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="void" id="exarg" text="void *exarg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_ex_new" text="int ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_item_ex_free" text="void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_template_new" text="int ASN1_template_new(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_TEMPLATE" id="tt" text="const ASN1_TEMPLATE *tt" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_primitive_new" text="int ASN1_primitive_new(ASN1_VALUE **pval, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_template_free" text="void ASN1_template_free(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_TEMPLATE" id="tt" text="const ASN1_TEMPLATE *tt" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_template_d2i" text="int ASN1_template_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,&#10;                      const ASN1_TEMPLATE *tt)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
    <arg type="const ASN1_TEMPLATE" id="tt" text="const ASN1_TEMPLATE *tt" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_ex_d2i" text="int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,&#10;                     const ASN1_ITEM *it, int tag, int aclass, char opt,&#10;                     ASN1_TLC *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="int" id="tag" text="int tag" mod=""/>
    <arg type="int" id="aclass" text="int aclass" mod=""/>
    <arg type="char" id="opt" text="char opt" mod=""/>
    <arg type="ASN1_TLC" id="ctx" text="ASN1_TLC *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_ex_i2d" text="int ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,&#10;                     const ASN1_ITEM *it, int tag, int aclass)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="int" id="tag" text="int tag" mod=""/>
    <arg type="int" id="aclass" text="int aclass" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_template_i2d" text="int ASN1_template_i2d(ASN1_VALUE **pval, unsigned char **out,&#10;                      const ASN1_TEMPLATE *tt)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
    <arg type="const ASN1_TEMPLATE" id="tt" text="const ASN1_TEMPLATE *tt" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ASN1_primitive_free" text="void ASN1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="asn1_ex_i2c" text="int asn1_ex_i2c(ASN1_VALUE **pval, unsigned char *cont, int *putype,&#10;                const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="unsigned char" id="cont" text="unsigned char *cont" mod=""/>
    <arg type="int" id="putype" text="int *putype" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="asn1_ex_c2i" text="int asn1_ex_c2i(ASN1_VALUE **pval, const unsigned char *cont, int len,&#10;                int utype, char *free_cont, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const unsigned char" id="cont" text="const unsigned char *cont" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="utype" text="int utype" mod=""/>
    <arg type="char" id="free_cont" text="char *free_cont" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="asn1_get_choice_selector" text="int asn1_get_choice_selector(ASN1_VALUE **pval, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="asn1_set_choice_selector" text="int asn1_set_choice_selector(ASN1_VALUE **pval, int value,&#10;                             const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="int" id="value" text="int value" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_VALUE" id="asn1_get_field_ptr" text="ASN1_VALUE **asn1_get_field_ptr(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_TEMPLATE" id="tt" text="const ASN1_TEMPLATE *tt" mod=""/>
  </args>
</fdecl>
<fdecl type="const ASN1_TEMPLATE" id="asn1_do_adb" text="const ASN1_TEMPLATE *asn1_do_adb(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt,&#10;                                 int nullerr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_TEMPLATE" id="tt" text="const ASN1_TEMPLATE *tt" mod=""/>
    <arg type="int" id="nullerr" text="int nullerr" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="asn1_do_lock" text="int asn1_do_lock(ASN1_VALUE **pval, int op, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="int" id="op" text="int op" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="asn1_enc_init" text="void asn1_enc_init(ASN1_VALUE **pval, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="asn1_enc_free" text="void asn1_enc_free(ASN1_VALUE **pval, const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="asn1_enc_restore" text="int asn1_enc_restore(int *len, unsigned char **out, ASN1_VALUE **pval,&#10;                     const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="int" id="len" text="int *len" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="asn1_enc_save" text="int asn1_enc_save(ASN1_VALUE **pval, const unsigned char *in, int inlen,&#10;                  const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1t.h">
  <args>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="int" id="inlen" text="int inlen" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="asn1_GetSequence" text="int asn1_GetSequence(ASN1_const_CTX *c, long *length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1_mac.h">
  <args>
    <arg type="ASN1_const_CTX" id="c" text="ASN1_const_CTX *c" mod=""/>
    <arg type="long" id="length" text="long *length" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="asn1_add_error" text="void asn1_add_error(const unsigned char *address, int offset)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/asn1_mac.h">
  <args>
    <arg type="const unsigned char" id="address" text="const unsigned char *address" mod=""/>
    <arg type="int" id="offset" text="int offset" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="ERR_load_PEM_strings" text="void ERR_load_PEM_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem2.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="pem_password_cb" text="typedef int pem_password_cb (char *buf, int size, int rwflag, void *userdata)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
    <arg type="int" id="rwflag" text="int rwflag" mod=""/>
    <arg type="void" id="userdata" text="void *userdata" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_get_EVP_CIPHER_INFO" text="int PEM_get_EVP_CIPHER_INFO(char *header, EVP_CIPHER_INFO *cipher)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="char" id="header" text="char *header" mod=""/>
    <arg type="EVP_CIPHER_INFO" id="cipher" text="EVP_CIPHER_INFO *cipher" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_do_header" text="int PEM_do_header(EVP_CIPHER_INFO *cipher, unsigned char *data, long *len,&#10;                  pem_password_cb *callback, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="EVP_CIPHER_INFO" id="cipher" text="EVP_CIPHER_INFO *cipher" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char *data" mod=""/>
    <arg type="long" id="len" text="long *len" mod=""/>
    <arg type="pem_password_cb" id="callback" text="pem_password_cb *callback" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_read_bio" text="int PEM_read_bio(BIO *bp, char **name, char **header,&#10;                 unsigned char **data, long *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="char" id="name" text="char **name" mod=""/>
    <arg type="char" id="header" text="char **header" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char **data" mod=""/>
    <arg type="long" id="len" text="long *len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio" text="int PEM_write_bio(BIO *bp, const char *name, const char *hdr,&#10;                  const unsigned char *data, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="const char" id="hdr" text="const char *hdr" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_bytes_read_bio" text="int PEM_bytes_read_bio(unsigned char **pdata, long *plen, char **pnm,&#10;                       const char *name, BIO *bp, pem_password_cb *cb,&#10;                       void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="unsigned char" id="pdata" text="unsigned char **pdata" mod=""/>
    <arg type="long" id="plen" text="long *plen" mod=""/>
    <arg type="char" id="pnm" text="char **pnm" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PEM_ASN1_read_bio" text="void *PEM_ASN1_read_bio(d2i_of_void *d2i, const char *name, BIO *bp, void **x,&#10;                        pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="d2i_of_void" id="d2i" text="d2i_of_void *d2i" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="void" id="x" text="void **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_ASN1_write_bio" text="int PEM_ASN1_write_bio(i2d_of_void *i2d, const char *name, BIO *bp, void *x,&#10;                       const EVP_CIPHER *enc, unsigned char *kstr, int klen,&#10;                       pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="i2d_of_void" id="i2d" text="i2d_of_void *i2d" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="void" id="x" text="void *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="unsigned char" id="kstr" text="unsigned char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_INFO" id="PEM_X509_INFO_read_bio" text="struct stack_st_X509_INFO &#10;# 413 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h&quot;&#10;                   *PEM_X509_INFO_read_bio(BIO *bp, &#10;# 413 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h&quot; 3 4&#10;                                                    struct stack_st_X509_INFO &#10;# 413 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h&quot;&#10;                                                                        *sk,&#10;                                            pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="struct stack_st_X509_INFO" id="sk" text="struct stack_st_X509_INFO &#10;# 413 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h&quot;&#10;                                                                        *sk" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_X509_INFO_write_bio" text="int PEM_X509_INFO_write_bio(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc,&#10;                            unsigned char *kstr, int klen,&#10;                            pem_password_cb *cd, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_INFO" id="xi" text="X509_INFO *xi" mod=""/>
    <arg type="EVP_CIPHER" id="enc" text="EVP_CIPHER *enc" mod=""/>
    <arg type="unsigned char" id="kstr" text="unsigned char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cd" text="pem_password_cb *cd" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_read" text="int PEM_read(FILE *fp, char **name, char **header,&#10;             unsigned char **data, long *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="char" id="name" text="char **name" mod=""/>
    <arg type="char" id="header" text="char **header" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char **data" mod=""/>
    <arg type="long" id="len" text="long *len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write" text="int PEM_write(FILE *fp, const char *name, const char *hdr,&#10;              const unsigned char *data, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="const char" id="hdr" text="const char *hdr" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PEM_ASN1_read" text="void *PEM_ASN1_read(d2i_of_void *d2i, const char *name, FILE *fp, void **x,&#10;                    pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="d2i_of_void" id="d2i" text="d2i_of_void *d2i" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="void" id="x" text="void **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_ASN1_write" text="int PEM_ASN1_write(i2d_of_void *i2d, const char *name, FILE *fp,&#10;                   void *x, const EVP_CIPHER *enc, unsigned char *kstr,&#10;                   int klen, pem_password_cb *callback, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="i2d_of_void" id="i2d" text="i2d_of_void *i2d" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="void" id="x" text="void *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="unsigned char" id="kstr" text="unsigned char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="callback" text="pem_password_cb *callback" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_INFO" id="PEM_X509_INFO_read" text="struct stack_st_X509_INFO &#10;# 429 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h&quot;&#10;                   *PEM_X509_INFO_read(FILE *fp, &#10;# 429 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h&quot; 3 4&#10;                                                 struct stack_st_X509_INFO &#10;# 429 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h&quot;&#10;                                                                     *sk,&#10;                                        pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="struct stack_st_X509_INFO" id="sk" text="struct stack_st_X509_INFO &#10;# 429 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h&quot;&#10;                                                                     *sk" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_SealInit" text="int PEM_SealInit(PEM_ENCODE_SEAL_CTX *ctx, EVP_CIPHER *type,&#10;                 EVP_MD *md_type, unsigned char **ek, int *ekl,&#10;                 unsigned char *iv, EVP_PKEY **pubk, int npubk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="PEM_ENCODE_SEAL_CTX" id="ctx" text="PEM_ENCODE_SEAL_CTX *ctx" mod=""/>
    <arg type="EVP_CIPHER" id="type" text="EVP_CIPHER *type" mod=""/>
    <arg type="EVP_MD" id="md_type" text="EVP_MD *md_type" mod=""/>
    <arg type="unsigned char" id="ek" text="unsigned char **ek" mod=""/>
    <arg type="int" id="ekl" text="int *ekl" mod=""/>
    <arg type="unsigned char" id="iv" text="unsigned char *iv" mod=""/>
    <arg type="EVP_PKEY" id="pubk" text="EVP_PKEY **pubk" mod=""/>
    <arg type="int" id="npubk" text="int npubk" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PEM_SealUpdate" text="void PEM_SealUpdate(PEM_ENCODE_SEAL_CTX *ctx, unsigned char *out, int *outl,&#10;                    unsigned char *in, int inl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="PEM_ENCODE_SEAL_CTX" id="ctx" text="PEM_ENCODE_SEAL_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
    <arg type="unsigned char" id="in" text="unsigned char *in" mod=""/>
    <arg type="int" id="inl" text="int inl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_SealFinal" text="int PEM_SealFinal(PEM_ENCODE_SEAL_CTX *ctx, unsigned char *sig, int *sigl,&#10;                  unsigned char *out, int *outl, EVP_PKEY *priv)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="PEM_ENCODE_SEAL_CTX" id="ctx" text="PEM_ENCODE_SEAL_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="sig" text="unsigned char *sig" mod=""/>
    <arg type="int" id="sigl" text="int *sigl" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="outl" text="int *outl" mod=""/>
    <arg type="EVP_PKEY" id="priv" text="EVP_PKEY *priv" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PEM_SignInit" text="void PEM_SignInit(EVP_MD_CTX *ctx, EVP_MD *type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="EVP_MD" id="type" text="EVP_MD *type" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PEM_SignUpdate" text="void PEM_SignUpdate(EVP_MD_CTX *ctx, unsigned char *d, unsigned int cnt)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="d" text="unsigned char *d" mod=""/>
    <arg type="unsigned int" id="cnt" text="unsigned int cnt" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_SignFinal" text="int PEM_SignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,&#10;                  unsigned int *siglen, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="sigret" text="unsigned char *sigret" mod=""/>
    <arg type="unsigned int" id="siglen" text="unsigned int *siglen" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_def_callback" text="int PEM_def_callback(char *buf, int num, int w, void *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="int" id="w" text="int w" mod=""/>
    <arg type="void" id="key" text="void *key" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PEM_proc_type" text="void PEM_proc_type(char *buf, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PEM_dek_info" text="void PEM_dek_info(char *buf, const char *type, int len, char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="const char" id="type" text="const char *type" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="char" id="str" text="char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="PEM_read_bio_X509" text="X509 *PEM_read_bio_X509(BIO *bp, X509 **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509" id="x" text="X509 **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="PEM_read_X509" text="X509 *PEM_read_X509(FILE *fp, X509 **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509" id="x" text="X509 **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_X509" text="int PEM_write_bio_X509(BIO *bp, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_X509" text="int PEM_write_X509(FILE *fp, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="PEM_read_bio_X509_AUX" text="X509 *PEM_read_bio_X509_AUX(BIO *bp, X509 **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509" id="x" text="X509 **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="PEM_read_X509_AUX" text="X509 *PEM_read_X509_AUX(FILE *fp, X509 **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509" id="x" text="X509 **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_X509_AUX" text="int PEM_write_bio_X509_AUX(BIO *bp, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_X509_AUX" text="int PEM_write_X509_AUX(FILE *fp, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CERT_PAIR" id="PEM_read_bio_X509_CERT_PAIR" text="X509_CERT_PAIR *PEM_read_bio_X509_CERT_PAIR(BIO *bp, X509_CERT_PAIR **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_CERT_PAIR" id="x" text="X509_CERT_PAIR **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CERT_PAIR" id="PEM_read_X509_CERT_PAIR" text="X509_CERT_PAIR *PEM_read_X509_CERT_PAIR(FILE *fp, X509_CERT_PAIR **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_CERT_PAIR" id="x" text="X509_CERT_PAIR **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_X509_CERT_PAIR" text="int PEM_write_bio_X509_CERT_PAIR(BIO *bp, X509_CERT_PAIR *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_CERT_PAIR" id="x" text="X509_CERT_PAIR *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_X509_CERT_PAIR" text="int PEM_write_X509_CERT_PAIR(FILE *fp, X509_CERT_PAIR *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_CERT_PAIR" id="x" text="X509_CERT_PAIR *x" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REQ" id="PEM_read_bio_X509_REQ" text="X509_REQ *PEM_read_bio_X509_REQ(BIO *bp, X509_REQ **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_REQ" id="x" text="X509_REQ **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REQ" id="PEM_read_X509_REQ" text="X509_REQ *PEM_read_X509_REQ(FILE *fp, X509_REQ **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_REQ" id="x" text="X509_REQ **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_X509_REQ" text="int PEM_write_bio_X509_REQ(BIO *bp, X509_REQ *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_REQ" id="x" text="X509_REQ *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_X509_REQ" text="int PEM_write_X509_REQ(FILE *fp, X509_REQ *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_REQ" id="x" text="X509_REQ *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_X509_REQ_NEW" text="int PEM_write_bio_X509_REQ_NEW(BIO *bp, X509_REQ *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_REQ" id="x" text="X509_REQ *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_X509_REQ_NEW" text="int PEM_write_X509_REQ_NEW(FILE *fp, X509_REQ *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_REQ" id="x" text="X509_REQ *x" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL" id="PEM_read_bio_X509_CRL" text="X509_CRL *PEM_read_bio_X509_CRL(BIO *bp, X509_CRL **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_CRL" id="x" text="X509_CRL **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL" id="PEM_read_X509_CRL" text="X509_CRL *PEM_read_X509_CRL(FILE *fp, X509_CRL **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_CRL" id="x" text="X509_CRL **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_X509_CRL" text="int PEM_write_bio_X509_CRL(BIO *bp, X509_CRL *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_X509_CRL" text="int PEM_write_X509_CRL(FILE *fp, X509_CRL *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="PEM_read_bio_PKCS7" text="PKCS7 *PEM_read_bio_PKCS7(BIO *bp, PKCS7 **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="PKCS7" id="x" text="PKCS7 **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="PEM_read_PKCS7" text="PKCS7 *PEM_read_PKCS7(FILE *fp, PKCS7 **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="PKCS7" id="x" text="PKCS7 **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_PKCS7" text="int PEM_write_bio_PKCS7(BIO *bp, PKCS7 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="PKCS7" id="x" text="PKCS7 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_PKCS7" text="int PEM_write_PKCS7(FILE *fp, PKCS7 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="PKCS7" id="x" text="PKCS7 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="NETSCAPE_CERT_SEQUENCE" id="PEM_read_bio_NETSCAPE_CERT_SEQUENCE" text="NETSCAPE_CERT_SEQUENCE *PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO *bp, NETSCAPE_CERT_SEQUENCE **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="NETSCAPE_CERT_SEQUENCE" id="x" text="NETSCAPE_CERT_SEQUENCE **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="NETSCAPE_CERT_SEQUENCE" id="PEM_read_NETSCAPE_CERT_SEQUENCE" text="NETSCAPE_CERT_SEQUENCE *PEM_read_NETSCAPE_CERT_SEQUENCE(FILE *fp, NETSCAPE_CERT_SEQUENCE **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="NETSCAPE_CERT_SEQUENCE" id="x" text="NETSCAPE_CERT_SEQUENCE **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_NETSCAPE_CERT_SEQUENCE" text="int PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO *bp, NETSCAPE_CERT_SEQUENCE *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="NETSCAPE_CERT_SEQUENCE" id="x" text="NETSCAPE_CERT_SEQUENCE *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_NETSCAPE_CERT_SEQUENCE" text="int PEM_write_NETSCAPE_CERT_SEQUENCE(FILE *fp, NETSCAPE_CERT_SEQUENCE *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="NETSCAPE_CERT_SEQUENCE" id="x" text="NETSCAPE_CERT_SEQUENCE *x" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_SIG" id="PEM_read_bio_PKCS8" text="X509_SIG *PEM_read_bio_PKCS8(BIO *bp, X509_SIG **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_SIG" id="x" text="X509_SIG **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_SIG" id="PEM_read_PKCS8" text="X509_SIG *PEM_read_PKCS8(FILE *fp, X509_SIG **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_SIG" id="x" text="X509_SIG **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_PKCS8" text="int PEM_write_bio_PKCS8(BIO *bp, X509_SIG *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_SIG" id="x" text="X509_SIG *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_PKCS8" text="int PEM_write_PKCS8(FILE *fp, X509_SIG *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_SIG" id="x" text="X509_SIG *x" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS8_PRIV_KEY_INFO" id="PEM_read_bio_PKCS8_PRIV_KEY_INFO" text="PKCS8_PRIV_KEY_INFO *PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO *bp, PKCS8_PRIV_KEY_INFO **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="PKCS8_PRIV_KEY_INFO" id="x" text="PKCS8_PRIV_KEY_INFO **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS8_PRIV_KEY_INFO" id="PEM_read_PKCS8_PRIV_KEY_INFO" text="PKCS8_PRIV_KEY_INFO *PEM_read_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="PKCS8_PRIV_KEY_INFO" id="x" text="PKCS8_PRIV_KEY_INFO **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_PKCS8_PRIV_KEY_INFO" text="int PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO *bp, PKCS8_PRIV_KEY_INFO *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="PKCS8_PRIV_KEY_INFO" id="x" text="PKCS8_PRIV_KEY_INFO *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_PKCS8_PRIV_KEY_INFO" text="int PEM_write_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="PKCS8_PRIV_KEY_INFO" id="x" text="PKCS8_PRIV_KEY_INFO *x" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="PEM_read_bio_RSAPrivateKey" text="RSA *PEM_read_bio_RSAPrivateKey(BIO *bp, RSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="RSA" id="x" text="RSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="PEM_read_RSAPrivateKey" text="RSA *PEM_read_RSAPrivateKey(FILE *fp, RSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="RSA" id="x" text="RSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_RSAPrivateKey" text="int PEM_write_bio_RSAPrivateKey(BIO *bp, RSA *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="RSA" id="x" text="RSA *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="unsigned char" id="kstr" text="unsigned char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_RSAPrivateKey" text="int PEM_write_RSAPrivateKey(FILE *fp, RSA *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="RSA" id="x" text="RSA *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="unsigned char" id="kstr" text="unsigned char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="PEM_read_bio_RSAPublicKey" text="RSA *PEM_read_bio_RSAPublicKey(BIO *bp, RSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="RSA" id="x" text="RSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="PEM_read_RSAPublicKey" text="RSA *PEM_read_RSAPublicKey(FILE *fp, RSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="RSA" id="x" text="RSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_RSAPublicKey" text="int PEM_write_bio_RSAPublicKey(BIO *bp, const RSA *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const RSA" id="x" text="const RSA *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_RSAPublicKey" text="int PEM_write_RSAPublicKey(FILE *fp, const RSA *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const RSA" id="x" text="const RSA *x" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="PEM_read_bio_RSA_PUBKEY" text="RSA *PEM_read_bio_RSA_PUBKEY(BIO *bp, RSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="RSA" id="x" text="RSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="PEM_read_RSA_PUBKEY" text="RSA *PEM_read_RSA_PUBKEY(FILE *fp, RSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="RSA" id="x" text="RSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_RSA_PUBKEY" text="int PEM_write_bio_RSA_PUBKEY(BIO *bp, RSA *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="RSA" id="x" text="RSA *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_RSA_PUBKEY" text="int PEM_write_RSA_PUBKEY(FILE *fp, RSA *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="RSA" id="x" text="RSA *x" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="PEM_read_bio_DSAPrivateKey" text="DSA *PEM_read_bio_DSAPrivateKey(BIO *bp, DSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="DSA" id="x" text="DSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="PEM_read_DSAPrivateKey" text="DSA *PEM_read_DSAPrivateKey(FILE *fp, DSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="DSA" id="x" text="DSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_DSAPrivateKey" text="int PEM_write_bio_DSAPrivateKey(BIO *bp, DSA *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="DSA" id="x" text="DSA *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="unsigned char" id="kstr" text="unsigned char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_DSAPrivateKey" text="int PEM_write_DSAPrivateKey(FILE *fp, DSA *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="DSA" id="x" text="DSA *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="unsigned char" id="kstr" text="unsigned char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="PEM_read_bio_DSA_PUBKEY" text="DSA *PEM_read_bio_DSA_PUBKEY(BIO *bp, DSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="DSA" id="x" text="DSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="PEM_read_DSA_PUBKEY" text="DSA *PEM_read_DSA_PUBKEY(FILE *fp, DSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="DSA" id="x" text="DSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_DSA_PUBKEY" text="int PEM_write_bio_DSA_PUBKEY(BIO *bp, DSA *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="DSA" id="x" text="DSA *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_DSA_PUBKEY" text="int PEM_write_DSA_PUBKEY(FILE *fp, DSA *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="DSA" id="x" text="DSA *x" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="PEM_read_bio_DSAparams" text="DSA *PEM_read_bio_DSAparams(BIO *bp, DSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="DSA" id="x" text="DSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="PEM_read_DSAparams" text="DSA *PEM_read_DSAparams(FILE *fp, DSA **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="DSA" id="x" text="DSA **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_DSAparams" text="int PEM_write_bio_DSAparams(BIO *bp, const DSA *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const DSA" id="x" text="const DSA *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_DSAparams" text="int PEM_write_DSAparams(FILE *fp, const DSA *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const DSA" id="x" text="const DSA *x" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_GROUP" id="PEM_read_bio_ECPKParameters" text="EC_GROUP *PEM_read_bio_ECPKParameters(BIO *bp, EC_GROUP **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EC_GROUP" id="x" text="EC_GROUP **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_GROUP" id="PEM_read_ECPKParameters" text="EC_GROUP *PEM_read_ECPKParameters(FILE *fp, EC_GROUP **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EC_GROUP" id="x" text="EC_GROUP **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_ECPKParameters" text="int PEM_write_bio_ECPKParameters(BIO *bp, const EC_GROUP *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const EC_GROUP" id="x" text="const EC_GROUP *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_ECPKParameters" text="int PEM_write_ECPKParameters(FILE *fp, const EC_GROUP *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const EC_GROUP" id="x" text="const EC_GROUP *x" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="PEM_read_bio_ECPrivateKey" text="EC_KEY *PEM_read_bio_ECPrivateKey(BIO *bp, EC_KEY **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EC_KEY" id="x" text="EC_KEY **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="PEM_read_ECPrivateKey" text="EC_KEY *PEM_read_ECPrivateKey(FILE *fp, EC_KEY **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EC_KEY" id="x" text="EC_KEY **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_ECPrivateKey" text="int PEM_write_bio_ECPrivateKey(BIO *bp, EC_KEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EC_KEY" id="x" text="EC_KEY *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="unsigned char" id="kstr" text="unsigned char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_ECPrivateKey" text="int PEM_write_ECPrivateKey(FILE *fp, EC_KEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EC_KEY" id="x" text="EC_KEY *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="unsigned char" id="kstr" text="unsigned char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="PEM_read_bio_EC_PUBKEY" text="EC_KEY *PEM_read_bio_EC_PUBKEY(BIO *bp, EC_KEY **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EC_KEY" id="x" text="EC_KEY **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="PEM_read_EC_PUBKEY" text="EC_KEY *PEM_read_EC_PUBKEY(FILE *fp, EC_KEY **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EC_KEY" id="x" text="EC_KEY **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_EC_PUBKEY" text="int PEM_write_bio_EC_PUBKEY(BIO *bp, EC_KEY *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EC_KEY" id="x" text="EC_KEY *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_EC_PUBKEY" text="int PEM_write_EC_PUBKEY(FILE *fp, EC_KEY *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EC_KEY" id="x" text="EC_KEY *x" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="PEM_read_bio_DHparams" text="DH *PEM_read_bio_DHparams(BIO *bp, DH **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="DH" id="x" text="DH **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="DH" id="PEM_read_DHparams" text="DH *PEM_read_DHparams(FILE *fp, DH **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="DH" id="x" text="DH **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_DHparams" text="int PEM_write_bio_DHparams(BIO *bp, const DH *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const DH" id="x" text="const DH *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_DHparams" text="int PEM_write_DHparams(FILE *fp, const DH *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const DH" id="x" text="const DH *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_DHxparams" text="int PEM_write_bio_DHxparams(BIO *bp, const DH *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const DH" id="x" text="const DH *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_DHxparams" text="int PEM_write_DHxparams(FILE *fp, const DH *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const DH" id="x" text="const DH *x" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="PEM_read_bio_PrivateKey" text="EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="PEM_read_PrivateKey" text="EVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_PrivateKey" text="int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="unsigned char" id="kstr" text="unsigned char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_PrivateKey" text="int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned char *kstr, int klen, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="unsigned char" id="kstr" text="unsigned char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="PEM_read_bio_PUBKEY" text="EVP_PKEY *PEM_read_bio_PUBKEY(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="PEM_read_PUBKEY" text="EVP_PKEY *PEM_read_PUBKEY(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_PUBKEY" text="int PEM_write_bio_PUBKEY(BIO *bp, EVP_PKEY *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_PUBKEY" text="int PEM_write_PUBKEY(FILE *fp, EVP_PKEY *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_PKCS8PrivateKey_nid" text="int PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid,&#10;                                      char *kstr, int klen,&#10;                                      pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="char" id="kstr" text="char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_PKCS8PrivateKey" text="int PEM_write_bio_PKCS8PrivateKey(BIO *, EVP_PKEY *, const EVP_CIPHER *,&#10;                                  char *, int, pem_password_cb *, void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="ANON0" text="BIO *" mod=""/>
    <arg type="EVP_PKEY" id="ANON1" text="EVP_PKEY *" mod=""/>
    <arg type="const EVP_CIPHER" id="ANON2" text="const EVP_CIPHER *" mod=""/>
    <arg type="char" id="ANON3" text="char *" mod=""/>
    <arg type="int" id="ANON4" text="int" mod=""/>
    <arg type="pem_password_cb" id="ANON5" text="pem_password_cb *" mod=""/>
    <arg type="void" id="ANON6" text="void *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS8PrivateKey_bio" text="int i2d_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,&#10;                            char *kstr, int klen,&#10;                            pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="char" id="kstr" text="char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS8PrivateKey_nid_bio" text="int i2d_PKCS8PrivateKey_nid_bio(BIO *bp, EVP_PKEY *x, int nid,&#10;                                char *kstr, int klen,&#10;                                pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="char" id="kstr" text="char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="d2i_PKCS8PrivateKey_bio" text="EVP_PKEY *d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb,&#10;                                  void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS8PrivateKey_fp" text="int i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,&#10;                           char *kstr, int klen,&#10;                           pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="char" id="kstr" text="char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS8PrivateKey_nid_fp" text="int i2d_PKCS8PrivateKey_nid_fp(FILE *fp, EVP_PKEY *x, int nid,&#10;                               char *kstr, int klen,&#10;                               pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="char" id="kstr" text="char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_PKCS8PrivateKey_nid" text="int PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid,&#10;                                  char *kstr, int klen,&#10;                                  pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="char" id="kstr" text="char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="d2i_PKCS8PrivateKey_fp" text="EVP_PKEY *d2i_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY **x, pem_password_cb *cb,&#10;                                 void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY **x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_PKCS8PrivateKey" text="int PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,&#10;                              char *kstr, int klen, pem_password_cb *cd,&#10;                              void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
    <arg type="const EVP_CIPHER" id="enc" text="const EVP_CIPHER *enc" mod=""/>
    <arg type="char" id="kstr" text="char *kstr" mod=""/>
    <arg type="int" id="klen" text="int klen" mod=""/>
    <arg type="pem_password_cb" id="cd" text="pem_password_cb *cd" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="PEM_read_bio_Parameters" text="EVP_PKEY *PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY **x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_Parameters" text="int PEM_write_bio_Parameters(BIO *bp, EVP_PKEY *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="x" text="EVP_PKEY *x" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="b2i_PrivateKey" text="EVP_PKEY *b2i_PrivateKey(const unsigned char **in, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="b2i_PublicKey" text="EVP_PKEY *b2i_PublicKey(const unsigned char **in, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="b2i_PrivateKey_bio" text="EVP_PKEY *b2i_PrivateKey_bio(BIO *in)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="b2i_PublicKey_bio" text="EVP_PKEY *b2i_PublicKey_bio(BIO *in)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2b_PrivateKey_bio" text="int i2b_PrivateKey_bio(BIO *out, EVP_PKEY *pk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="EVP_PKEY" id="pk" text="EVP_PKEY *pk" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2b_PublicKey_bio" text="int i2b_PublicKey_bio(BIO *out, EVP_PKEY *pk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="EVP_PKEY" id="pk" text="EVP_PKEY *pk" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="b2i_PVK_bio" text="EVP_PKEY *b2i_PVK_bio(BIO *in, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2b_PVK_bio" text="int i2b_PVK_bio(BIO *out, EVP_PKEY *pk, int enclevel,&#10;                pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="EVP_PKEY" id="pk" text="EVP_PKEY *pk" mod=""/>
    <arg type="int" id="enclevel" text="int enclevel" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_PEM_strings" text="void ERR_load_PEM_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pem.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="X509_LOOKUP" id="X509_LOOKUP_METHOD" text="typedef struct x509_lookup_method_st {&#10;    const char *name;&#10;    int (*new_item) (X509_LOOKUP *ctx);&#10;    void (*free) (X509_LOOKUP *ctx);&#10;    int (*init) (X509_LOOKUP *ctx);&#10;    int (*shutdown) (X509_LOOKUP *ctx);&#10;    int (*ctrl) (X509_LOOKUP *ctx, int cmd, const char *argc, long argl,&#10;                 char **ret);&#10;    int (*get_by_subject) (X509_LOOKUP *ctx, int type, X509_NAME *name,&#10;                           X509_OBJECT *ret);&#10;    int (*get_by_issuer_serial) (X509_LOOKUP *ctx, int type, X509_NAME *name,&#10;                                 ASN1_INTEGER *serial, X509_OBJECT *ret);&#10;    int (*get_by_fingerprint) (X509_LOOKUP *ctx, int type,&#10;                               unsigned char *bytes, int len,&#10;                               X509_OBJECT *ret);&#10;    int (*get_by_alias) (X509_LOOKUP *ctx, int type, char *str, int len,&#10;                         X509_OBJECT *ret);&#10;} X509_LOOKUP_METHOD" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="const char" id="argc" text="const char *argc" mod=""/>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="char" id="ret" text="char **ret" mod=""/>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="X509_OBJECT" id="ret" text="X509_OBJECT *ret" mod=""/>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="ASN1_INTEGER" id="serial" text="ASN1_INTEGER *serial" mod=""/>
    <arg type="X509_OBJECT" id="ret" text="X509_OBJECT *ret" mod=""/>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="unsigned char" id="bytes" text="unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="X509_OBJECT" id="ret" text="X509_OBJECT *ret" mod=""/>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="char" id="str" text="char *str" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="X509_OBJECT" id="ret" text="X509_OBJECT *ret" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_STORE_CTX" id="ANON0" text="struct x509_store_st {&#10;&#10;    int cache;&#10;    struct stack_st_X509_OBJECT *objs;&#10;&#10;    struct stack_st_X509_LOOKUP *get_cert_methods;&#10;    X509_VERIFY_PARAM *param;&#10;&#10;&#10;    int (*verify) (X509_STORE_CTX *ctx);&#10;&#10;    int (*verify_cb) (int ok, X509_STORE_CTX *ctx);&#10;&#10;    int (*get_issuer) (X509 **issuer, X509_STORE_CTX *ctx, X509 *x);&#10;&#10;    int (*check_issued) (X509_STORE_CTX *ctx, X509 *x, X509 *issuer);&#10;&#10;    int (*check_revocation) (X509_STORE_CTX *ctx);&#10;&#10;    int (*get_crl) (X509_STORE_CTX *ctx, X509_CRL **crl, X509 *x);&#10;&#10;    int (*check_crl) (X509_STORE_CTX *ctx, X509_CRL *crl);&#10;&#10;    int (*cert_crl) (X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);&#10;    struct stack_st_X509 *(*lookup_certs) (X509_STORE_CTX *ctx, X509_NAME *nm);&#10;    struct stack_st_X509_CRL *(*lookup_crls) (X509_STORE_CTX *ctx, X509_NAME *nm);&#10;    int (*cleanup) (X509_STORE_CTX *ctx);&#10;    CRYPTO_EX_DATA ex_data;&#10;    int references;&#10;}" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="int" id="ok" text="int ok" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509" id="issuer" text="X509 **issuer" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="X509" id="issuer" text="X509 *issuer" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL **crl" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_NAME" id="nm" text="X509_NAME *nm" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_NAME" id="nm" text="X509_NAME *nm" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_set_depth" text="int X509_STORE_set_depth(X509_STORE *store, int depth)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="store" text="X509_STORE *store" mod=""/>
    <arg type="int" id="depth" text="int depth" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_STORE_CTX" id="ANON1" text="struct x509_store_ctx_st {&#10;    X509_STORE *ctx;&#10;&#10;    int current_method;&#10;&#10;&#10;    X509 *cert;&#10;&#10;    struct stack_st_X509 *untrusted;&#10;&#10;    struct stack_st_X509_CRL *crls;&#10;    X509_VERIFY_PARAM *param;&#10;&#10;    void *other_ctx;&#10;&#10;&#10;    int (*verify) (X509_STORE_CTX *ctx);&#10;&#10;    int (*verify_cb) (int ok, X509_STORE_CTX *ctx);&#10;&#10;    int (*get_issuer) (X509 **issuer, X509_STORE_CTX *ctx, X509 *x);&#10;&#10;    int (*check_issued) (X509_STORE_CTX *ctx, X509 *x, X509 *issuer);&#10;&#10;    int (*check_revocation) (X509_STORE_CTX *ctx);&#10;&#10;    int (*get_crl) (X509_STORE_CTX *ctx, X509_CRL **crl, X509 *x);&#10;&#10;    int (*check_crl) (X509_STORE_CTX *ctx, X509_CRL *crl);&#10;&#10;    int (*cert_crl) (X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);&#10;    int (*check_policy) (X509_STORE_CTX *ctx);&#10;    struct stack_st_X509 *(*lookup_certs) (X509_STORE_CTX *ctx, X509_NAME *nm);&#10;    struct stack_st_X509_CRL *(*lookup_crls) (X509_STORE_CTX *ctx, X509_NAME *nm);&#10;    int (*cleanup) (X509_STORE_CTX *ctx);&#10;&#10;&#10;    int valid;&#10;&#10;    int last_untrusted;&#10;&#10;    struct stack_st_X509 *chain;&#10;&#10;    X509_POLICY_TREE *tree;&#10;&#10;    int explicit_policy;&#10;&#10;    int error_depth;&#10;    int error;&#10;    X509 *current_cert;&#10;&#10;    X509 *current_issuer;&#10;&#10;    X509_CRL *current_crl;&#10;&#10;    int current_crl_score;&#10;&#10;    unsigned int current_reasons;&#10;&#10;    X509_STORE_CTX *parent;&#10;    CRYPTO_EX_DATA ex_data;&#10;}" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="int" id="ok" text="int ok" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509" id="issuer" text="X509 **issuer" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="X509" id="issuer" text="X509 *issuer" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL **crl" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_NAME" id="nm" text="X509_NAME *nm" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_NAME" id="nm" text="X509_NAME *nm" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_set_depth" text="void X509_STORE_CTX_set_depth(X509_STORE_CTX *ctx, int depth)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="int" id="depth" text="int depth" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_OBJECT_idx_by_subject" text="int X509_OBJECT_idx_by_subject(struct stack_st_X509_OBJECT *h, int type,&#10;                               X509_NAME *name)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="struct stack_st_X509_OBJECT" id="h" text="struct stack_st_X509_OBJECT *h" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_OBJECT" id="X509_OBJECT_retrieve_by_subject" text="X509_OBJECT *X509_OBJECT_retrieve_by_subject(struct stack_st_X509_OBJECT *h,&#10;                                             int type, X509_NAME *name)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="struct stack_st_X509_OBJECT" id="h" text="struct stack_st_X509_OBJECT *h" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_OBJECT" id="X509_OBJECT_retrieve_match" text="X509_OBJECT *X509_OBJECT_retrieve_match(struct stack_st_X509_OBJECT *h,&#10;                                        X509_OBJECT *x)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="struct stack_st_X509_OBJECT" id="h" text="struct stack_st_X509_OBJECT *h" mod=""/>
    <arg type="X509_OBJECT" id="x" text="X509_OBJECT *x" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_OBJECT_up_ref_count" text="void X509_OBJECT_up_ref_count(X509_OBJECT *a)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_OBJECT" id="a" text="X509_OBJECT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_OBJECT_free_contents" text="void X509_OBJECT_free_contents(X509_OBJECT *a)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_OBJECT" id="a" text="X509_OBJECT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_STORE" id="X509_STORE_new" text="X509_STORE *X509_STORE_new(void)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_free" text="void X509_STORE_free(X509_STORE *v)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="v" text="X509_STORE *v" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509" id="X509_STORE_get1_certs" text="struct stack_st_X509 *X509_STORE_get1_certs(X509_STORE_CTX *st, X509_NAME *nm)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="st" text="X509_STORE_CTX *st" mod=""/>
    <arg type="X509_NAME" id="nm" text="X509_NAME *nm" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_CRL" id="X509_STORE_get1_crls" text="struct stack_st_X509_CRL *X509_STORE_get1_crls(X509_STORE_CTX *st, X509_NAME *nm)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="st" text="X509_STORE_CTX *st" mod=""/>
    <arg type="X509_NAME" id="nm" text="X509_NAME *nm" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_set_flags" text="int X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="ctx" text="X509_STORE *ctx" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_set_purpose" text="int X509_STORE_set_purpose(X509_STORE *ctx, int purpose)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="ctx" text="X509_STORE *ctx" mod=""/>
    <arg type="int" id="purpose" text="int purpose" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_set_trust" text="int X509_STORE_set_trust(X509_STORE *ctx, int trust)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="ctx" text="X509_STORE *ctx" mod=""/>
    <arg type="int" id="trust" text="int trust" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_set1_param" text="int X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *pm)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="ctx" text="X509_STORE *ctx" mod=""/>
    <arg type="X509_VERIFY_PARAM" id="pm" text="X509_VERIFY_PARAM *pm" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_set_verify_cb" text="void X509_STORE_set_verify_cb(X509_STORE *ctx,&#10;                              int (*verify_cb) (int, X509_STORE_CTX *))" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="ctx" text="X509_STORE *ctx" mod=""/>
    <arg type="int" id="verify_cb" text="int (*verify_cb) (int, X509_STORE_CTX *)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_set_lookup_crls_cb" text="void X509_STORE_set_lookup_crls_cb(X509_STORE *ctx,&#10;                                   struct stack_st_X509_CRL *(*cb) (X509_STORE_CTX&#10;                                                              *ctx,&#10;                                                              X509_NAME *nm))" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="ctx" text="X509_STORE *ctx" mod=""/>
    <arg type="struct stack_st_X509_CRL" id="cb" text="struct stack_st_X509_CRL *(*cb) (X509_STORE_CTX&#10;                                                              *ctx,&#10;                                                              X509_NAME *nm)" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_STORE_CTX" id="X509_STORE_CTX_new" text="X509_STORE_CTX *X509_STORE_CTX_new(void)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_CTX_get1_issuer" text="int X509_STORE_CTX_get1_issuer(X509 **issuer, X509_STORE_CTX *ctx, X509 *x)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509" id="issuer" text="X509 **issuer" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_free" text="void X509_STORE_CTX_free(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_CTX_init" text="int X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store,&#10;                        X509 *x509, struct stack_st_X509 *chain)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_STORE" id="store" text="X509_STORE *store" mod=""/>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
    <arg type="struct stack_st_X509" id="chain" text="struct stack_st_X509 *chain" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_trusted_stack" text="void X509_STORE_CTX_trusted_stack(X509_STORE_CTX *ctx, struct stack_st_X509 *sk)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="struct stack_st_X509" id="sk" text="struct stack_st_X509 *sk" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_cleanup" text="void X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_STORE" id="X509_STORE_CTX_get0_store" text="X509_STORE *X509_STORE_CTX_get0_store(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_LOOKUP" id="X509_STORE_add_lookup" text="X509_LOOKUP *X509_STORE_add_lookup(X509_STORE *v, X509_LOOKUP_METHOD *m)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="v" text="X509_STORE *v" mod=""/>
    <arg type="X509_LOOKUP_METHOD" id="m" text="X509_LOOKUP_METHOD *m" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_LOOKUP_METHOD" id="X509_LOOKUP_hash_dir" text="X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir(void)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_LOOKUP_METHOD" id="X509_LOOKUP_file" text="X509_LOOKUP_METHOD *X509_LOOKUP_file(void)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_add_cert" text="int X509_STORE_add_cert(X509_STORE *ctx, X509 *x)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="ctx" text="X509_STORE *ctx" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_add_crl" text="int X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="ctx" text="X509_STORE *ctx" mod=""/>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_get_by_subject" text="int X509_STORE_get_by_subject(X509_STORE_CTX *vs, int type, X509_NAME *name,&#10;                              X509_OBJECT *ret)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="vs" text="X509_STORE_CTX *vs" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="X509_OBJECT" id="ret" text="X509_OBJECT *ret" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_LOOKUP_ctrl" text="int X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,&#10;                     long argl, char **ret)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="const char" id="argc" text="const char *argc" mod=""/>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="char" id="ret" text="char **ret" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_load_cert_file" text="int X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_load_crl_file" text="int X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_load_cert_crl_file" text="int X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_LOOKUP" id="X509_LOOKUP_new" text="X509_LOOKUP *X509_LOOKUP_new(X509_LOOKUP_METHOD *method)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP_METHOD" id="method" text="X509_LOOKUP_METHOD *method" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_LOOKUP_free" text="void X509_LOOKUP_free(X509_LOOKUP *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_LOOKUP_init" text="int X509_LOOKUP_init(X509_LOOKUP *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_LOOKUP_by_subject" text="int X509_LOOKUP_by_subject(X509_LOOKUP *ctx, int type, X509_NAME *name,&#10;                           X509_OBJECT *ret)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="X509_OBJECT" id="ret" text="X509_OBJECT *ret" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_LOOKUP_by_issuer_serial" text="int X509_LOOKUP_by_issuer_serial(X509_LOOKUP *ctx, int type, X509_NAME *name,&#10;                                 ASN1_INTEGER *serial, X509_OBJECT *ret)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="ASN1_INTEGER" id="serial" text="ASN1_INTEGER *serial" mod=""/>
    <arg type="X509_OBJECT" id="ret" text="X509_OBJECT *ret" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_LOOKUP_by_fingerprint" text="int X509_LOOKUP_by_fingerprint(X509_LOOKUP *ctx, int type,&#10;                               unsigned char *bytes, int len,&#10;                               X509_OBJECT *ret)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="unsigned char" id="bytes" text="unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="X509_OBJECT" id="ret" text="X509_OBJECT *ret" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_LOOKUP_by_alias" text="int X509_LOOKUP_by_alias(X509_LOOKUP *ctx, int type, char *str, int len,&#10;                         X509_OBJECT *ret)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="char" id="str" text="char *str" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="X509_OBJECT" id="ret" text="X509_OBJECT *ret" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_LOOKUP_shutdown" text="int X509_LOOKUP_shutdown(X509_LOOKUP *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_LOOKUP" id="ctx" text="X509_LOOKUP *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_load_locations" text="int X509_STORE_load_locations(X509_STORE *ctx,&#10;                              const char *file, const char *dir)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="ctx" text="X509_STORE *ctx" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="const char" id="dir" text="const char *dir" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_set_default_paths" text="int X509_STORE_set_default_paths(X509_STORE *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE" id="ctx" text="X509_STORE *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_CTX_get_ex_new_index" text="int X509_STORE_CTX_get_ex_new_index(long argl, void *argp,&#10;                                    CRYPTO_EX_new *new_func,&#10;                                    CRYPTO_EX_dup *dup_func,&#10;                                    CRYPTO_EX_free *free_func)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_CTX_set_ex_data" text="int X509_STORE_CTX_set_ex_data(X509_STORE_CTX *ctx, int idx, void *data)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_get_ex_data" text="void *X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx, int idx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_CTX_get_error" text="int X509_STORE_CTX_get_error(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_set_error" text="void X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int s)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="int" id="s" text="int s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_CTX_get_error_depth" text="int X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="X509_STORE_CTX_get_current_cert" text="X509 *X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="X509_STORE_CTX_get0_current_issuer" text="X509 *X509_STORE_CTX_get0_current_issuer(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL" id="X509_STORE_CTX_get0_current_crl" text="X509_CRL *X509_STORE_CTX_get0_current_crl(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_STORE_CTX" id="X509_STORE_CTX_get0_parent_ctx" text="X509_STORE_CTX *X509_STORE_CTX_get0_parent_ctx(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509" id="X509_STORE_CTX_get_chain" text="struct stack_st_X509 *X509_STORE_CTX_get_chain(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509" id="X509_STORE_CTX_get1_chain" text="struct stack_st_X509 *X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_set_cert" text="void X509_STORE_CTX_set_cert(X509_STORE_CTX *c, X509 *x)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="c" text="X509_STORE_CTX *c" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_set_chain" text="void X509_STORE_CTX_set_chain(X509_STORE_CTX *c, struct stack_st_X509 *sk)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="c" text="X509_STORE_CTX *c" mod=""/>
    <arg type="struct stack_st_X509" id="sk" text="struct stack_st_X509 *sk" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_set0_crls" text="void X509_STORE_CTX_set0_crls(X509_STORE_CTX *c, struct stack_st_X509_CRL *sk)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="c" text="X509_STORE_CTX *c" mod=""/>
    <arg type="struct stack_st_X509_CRL" id="sk" text="struct stack_st_X509_CRL *sk" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_CTX_set_purpose" text="int X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="int" id="purpose" text="int purpose" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_CTX_set_trust" text="int X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="int" id="trust" text="int trust" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_CTX_purpose_inherit" text="int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose,&#10;                                   int purpose, int trust)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="int" id="def_purpose" text="int def_purpose" mod=""/>
    <arg type="int" id="purpose" text="int purpose" mod=""/>
    <arg type="int" id="trust" text="int trust" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_set_flags" text="void X509_STORE_CTX_set_flags(X509_STORE_CTX *ctx, unsigned long flags)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_set_time" text="void X509_STORE_CTX_set_time(X509_STORE_CTX *ctx, unsigned long flags,&#10;                             time_t t)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
    <arg type="time_t" id="t" text="time_t t" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_set_verify_cb" text="void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx,&#10;                                  int (*verify_cb) (int, X509_STORE_CTX *))" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="int" id="verify_cb" text="int (*verify_cb) (int, X509_STORE_CTX *)" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_POLICY_TREE" id="X509_STORE_CTX_get0_policy_tree" text="X509_POLICY_TREE *X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_CTX_get_explicit_policy" text="int X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_VERIFY_PARAM" id="X509_STORE_CTX_get0_param" text="X509_VERIFY_PARAM *X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_STORE_CTX_set0_param" text="void X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_STORE_CTX_set_default" text="int X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_VERIFY_PARAM" id="X509_VERIFY_PARAM_new" text="X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_VERIFY_PARAM_free" text="void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_inherit" text="int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *to,&#10;                              const X509_VERIFY_PARAM *from)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="to" text="X509_VERIFY_PARAM *to" mod=""/>
    <arg type="const X509_VERIFY_PARAM" id="from" text="const X509_VERIFY_PARAM *from" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_set1" text="int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to,&#10;                           const X509_VERIFY_PARAM *from)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="to" text="X509_VERIFY_PARAM *to" mod=""/>
    <arg type="const X509_VERIFY_PARAM" id="from" text="const X509_VERIFY_PARAM *from" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_set1_name" text="int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, const char *name)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_set_flags" text="int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param,&#10;                                unsigned long flags)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_clear_flags" text="int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param,&#10;                                  unsigned long flags)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="X509_VERIFY_PARAM_get_flags" text="unsigned long X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_set_purpose" text="int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="int" id="purpose" text="int purpose" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_set_trust" text="int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="int" id="trust" text="int trust" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_VERIFY_PARAM_set_depth" text="void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="int" id="depth" text="int depth" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_VERIFY_PARAM_set_time" text="void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="time_t" id="t" text="time_t t" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_add0_policy" text="int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param,&#10;                                  ASN1_OBJECT *policy)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="ASN1_OBJECT" id="policy" text="ASN1_OBJECT *policy" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_set1_policies" text="int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param,&#10;                                    struct stack_st_ASN1_OBJECT *policies)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="struct stack_st_ASN1_OBJECT" id="policies" text="struct stack_st_ASN1_OBJECT *policies" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_set1_host" text="int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM *param,&#10;                                const char *name, size_t namelen)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="size_t" id="namelen" text="size_t namelen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_add1_host" text="int X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM *param,&#10;                                const char *name, size_t namelen)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="size_t" id="namelen" text="size_t namelen" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_VERIFY_PARAM_set_hostflags" text="void X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM *param,&#10;                                     unsigned int flags)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="X509_VERIFY_PARAM_get0_peername" text="char *X509_VERIFY_PARAM_get0_peername(X509_VERIFY_PARAM *)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="ANON7" text="X509_VERIFY_PARAM *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_set1_email" text="int X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM *param,&#10;                                 const char *email, size_t emaillen)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="const char" id="email" text="const char *email" mod=""/>
    <arg type="size_t" id="emaillen" text="size_t emaillen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_set1_ip" text="int X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM *param,&#10;                              const unsigned char *ip, size_t iplen)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="const unsigned char" id="ip" text="const unsigned char *ip" mod=""/>
    <arg type="size_t" id="iplen" text="size_t iplen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_set1_ip_asc" text="int X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM *param,&#10;                                  const char *ipasc)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
    <arg type="const char" id="ipasc" text="const char *ipasc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_get_depth" text="int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="const X509_VERIFY_PARAM" id="param" text="const X509_VERIFY_PARAM *param" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="X509_VERIFY_PARAM_get0_name" text="const char *X509_VERIFY_PARAM_get0_name(const X509_VERIFY_PARAM *param)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="const X509_VERIFY_PARAM" id="param" text="const X509_VERIFY_PARAM *param" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_add0_table" text="int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_VERIFY_PARAM" id="param" text="X509_VERIFY_PARAM *param" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_VERIFY_PARAM_get_count" text="int X509_VERIFY_PARAM_get_count(void)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const X509_VERIFY_PARAM" id="X509_VERIFY_PARAM_get0" text="const X509_VERIFY_PARAM *X509_VERIFY_PARAM_get0(int id)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="int" id="id" text="int id" mod=""/>
  </args>
</fdecl>
<fdecl type="const X509_VERIFY_PARAM" id="X509_VERIFY_PARAM_lookup" text="const X509_VERIFY_PARAM *X509_VERIFY_PARAM_lookup(const char *name)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_VERIFY_PARAM_table_cleanup" text="void X509_VERIFY_PARAM_table_cleanup(void)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="void" id="ANON9" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_policy_check" text="int X509_policy_check(X509_POLICY_TREE **ptree, int *pexplicit_policy,&#10;                      struct stack_st_X509 *certs,&#10;                      struct stack_st_ASN1_OBJECT *policy_oids, unsigned int flags)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_POLICY_TREE" id="ptree" text="X509_POLICY_TREE **ptree" mod=""/>
    <arg type="int" id="pexplicit_policy" text="int *pexplicit_policy" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 *certs" mod=""/>
    <arg type="struct stack_st_ASN1_OBJECT" id="policy_oids" text="struct stack_st_ASN1_OBJECT *policy_oids" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_policy_tree_free" text="void X509_policy_tree_free(X509_POLICY_TREE *tree)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_POLICY_TREE" id="tree" text="X509_POLICY_TREE *tree" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_policy_tree_level_count" text="int X509_policy_tree_level_count(const X509_POLICY_TREE *tree)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="const X509_POLICY_TREE" id="tree" text="const X509_POLICY_TREE *tree" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_POLICY_LEVEL" id="X509_policy_tree_get0_level" text="X509_POLICY_LEVEL *X509_policy_tree_get0_level(const X509_POLICY_TREE *tree,&#10;                                               int i)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="const X509_POLICY_TREE" id="tree" text="const X509_POLICY_TREE *tree" mod=""/>
    <arg type="int" id="i" text="int i" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_POLICY_NODE" id="X509_policy_tree_get0_policies" text="struct stack_st_X509_POLICY_NODE *X509_policy_tree_get0_policies(const&#10;                                                           X509_POLICY_TREE&#10;                                                           *tree)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="const&#10;                                                           X509_POLICY_TREE" id="tree" text="const&#10;                                                           X509_POLICY_TREE&#10;                                                           *tree" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_POLICY_NODE" id="X509_policy_tree_get0_user_policies" text="struct stack_st_X509_POLICY_NODE *X509_policy_tree_get0_user_policies(const&#10;                                                                X509_POLICY_TREE&#10;                                                                *tree)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="const&#10;                                                                X509_POLICY_TREE" id="tree" text="const&#10;                                                                X509_POLICY_TREE&#10;                                                                *tree" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_policy_level_node_count" text="int X509_policy_level_node_count(X509_POLICY_LEVEL *level)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_POLICY_LEVEL" id="level" text="X509_POLICY_LEVEL *level" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_POLICY_NODE" id="X509_policy_level_get0_node" text="X509_POLICY_NODE *X509_policy_level_get0_node(X509_POLICY_LEVEL *level,&#10;                                              int i)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="X509_POLICY_LEVEL" id="level" text="X509_POLICY_LEVEL *level" mod=""/>
    <arg type="int" id="i" text="int i" mod=""/>
  </args>
</fdecl>
<fdecl type="const ASN1_OBJECT" id="X509_policy_node_get0_policy" text="const ASN1_OBJECT *X509_policy_node_get0_policy(const X509_POLICY_NODE *node)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="const X509_POLICY_NODE" id="node" text="const X509_POLICY_NODE *node" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_POLICYQUALINFO" id="X509_policy_node_get0_qualifiers" text="struct stack_st_POLICYQUALINFO *X509_policy_node_get0_qualifiers(const&#10;                                                           X509_POLICY_NODE&#10;                                                           *node)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="const&#10;                                                           X509_POLICY_NODE" id="node" text="const&#10;                                                           X509_POLICY_NODE&#10;                                                           *node" mod=""/>
  </args>
</fdecl>
<fdecl type="const X509_POLICY_NODE" id="X509_policy_node_get0_parent" text="const X509_POLICY_NODE *X509_policy_node_get0_parent(const X509_POLICY_NODE&#10;                                                     *node)" file="/usr/include/openssl/x509_vfy.h">
  <args>
    <arg type="const X509_POLICY_NODE" id="node" text="const X509_POLICY_NODE&#10;                                                     *node" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="X509_OBJECTS" text="typedef struct X509_objects_st {&#10;    int nid;&#10;    int (*a2i) (void);&#10;    int (*i2a) (void);&#10;} X509_OBJECTS" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="struct x509_trust_st" id="X509_TRUST" text="typedef struct x509_trust_st {&#10;    int trust;&#10;    int flags;&#10;    int (*check_trust) (struct x509_trust_st *, X509 *, int);&#10;    char *name;&#10;    int arg1;&#10;    void *arg2;&#10;} X509_TRUST" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct x509_trust_st" id="ANON2" text="struct x509_trust_st *" mod=""/>
    <arg type="X509" id="ANON3" text="X509 *" mod=""/>
    <arg type="int" id="ANON4" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_CRL_set_default_method" text="void X509_CRL_set_default_method(const X509_CRL_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_CRL_METHOD" id="meth" text="const X509_CRL_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL_METHOD" id="X509_CRL_METHOD_new" text="X509_CRL_METHOD *X509_CRL_METHOD_new(int (*crl_init) (X509_CRL *crl),&#10;                                     int (*crl_free) (X509_CRL *crl),&#10;                                     int (*crl_lookup) (X509_CRL *crl,&#10;                                                        X509_REVOKED **ret,&#10;                                                        ASN1_INTEGER *ser,&#10;                                                        X509_NAME *issuer),&#10;                                     int (*crl_verify) (X509_CRL *crl,&#10;                                                        EVP_PKEY *pk))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="crl_init" text="int (*crl_init) (X509_CRL *crl)" mod=""/>
    <arg type="int" id="crl_free" text="int (*crl_free) (X509_CRL *crl)" mod=""/>
    <arg type="int" id="crl_lookup" text="int (*crl_lookup) (X509_CRL *crl,&#10;                                                        X509_REVOKED **ret,&#10;                                                        ASN1_INTEGER *ser,&#10;                                                        X509_NAME *issuer)" mod=""/>
    <arg type="int" id="crl_verify" text="int (*crl_verify) (X509_CRL *crl,&#10;                                                        EVP_PKEY *pk)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_CRL_METHOD_free" text="void X509_CRL_METHOD_free(X509_CRL_METHOD *m)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL_METHOD" id="m" text="X509_CRL_METHOD *m" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_CRL_set_meth_data" text="void X509_CRL_set_meth_data(X509_CRL *crl, void *dat)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
    <arg type="void" id="dat" text="void *dat" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_CRL_get_meth_data" text="void *X509_CRL_get_meth_data(X509_CRL *crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="X509_verify_cert_error_string" text="const char *X509_verify_cert_error_string(long n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="long" id="n" text="long n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_verify" text="int X509_verify(X509 *a, EVP_PKEY *r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="a" text="X509 *a" mod=""/>
    <arg type="EVP_PKEY" id="r" text="EVP_PKEY *r" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_verify" text="int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="a" text="X509_REQ *a" mod=""/>
    <arg type="EVP_PKEY" id="r" text="EVP_PKEY *r" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_verify" text="int X509_CRL_verify(X509_CRL *a, EVP_PKEY *r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="a" text="X509_CRL *a" mod=""/>
    <arg type="EVP_PKEY" id="r" text="EVP_PKEY *r" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="NETSCAPE_SPKI_verify" text="int NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_SPKI" id="a" text="NETSCAPE_SPKI *a" mod=""/>
    <arg type="EVP_PKEY" id="r" text="EVP_PKEY *r" mod=""/>
  </args>
</fdecl>
<fdecl type="NETSCAPE_SPKI" id="NETSCAPE_SPKI_b64_decode" text="NETSCAPE_SPKI *NETSCAPE_SPKI_b64_decode(const char *str, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="NETSCAPE_SPKI_b64_encode" text="char *NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_SPKI" id="x" text="NETSCAPE_SPKI *x" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="NETSCAPE_SPKI_get_pubkey" text="EVP_PKEY *NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_SPKI" id="x" text="NETSCAPE_SPKI *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="NETSCAPE_SPKI_set_pubkey" text="int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_SPKI" id="x" text="NETSCAPE_SPKI *x" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="NETSCAPE_SPKI_print" text="int NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="NETSCAPE_SPKI" id="spki" text="NETSCAPE_SPKI *spki" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_signature_dump" text="int X509_signature_dump(BIO *bp, const ASN1_STRING *sig, int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const ASN1_STRING" id="sig" text="const ASN1_STRING *sig" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_signature_print" text="int X509_signature_print(BIO *bp, X509_ALGOR *alg, ASN1_STRING *sig)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_ALGOR" id="alg" text="X509_ALGOR *alg" mod=""/>
    <arg type="ASN1_STRING" id="sig" text="ASN1_STRING *sig" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_sign" text="int X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_sign_ctx" text="int X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_http_nbio" text="int X509_http_nbio(OCSP_REQ_CTX *rctx, X509 **pcert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
    <arg type="X509" id="pcert" text="X509 **pcert" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_sign" text="int X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="x" text="X509_REQ *x" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_sign_ctx" text="int X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="x" text="X509_REQ *x" mod=""/>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_sign" text="int X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_sign_ctx" text="int X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_http_nbio" text="int X509_CRL_http_nbio(OCSP_REQ_CTX *rctx, X509_CRL **pcrl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
    <arg type="X509_CRL" id="pcrl" text="X509_CRL **pcrl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="NETSCAPE_SPKI_sign" text="int NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_SPKI" id="x" text="NETSCAPE_SPKI *x" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_pubkey_digest" text="int X509_pubkey_digest(const X509 *data, const EVP_MD *type,&#10;                       unsigned char *md, unsigned int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509" id="data" text="const X509 *data" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="len" text="unsigned int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_digest" text="int X509_digest(const X509 *data, const EVP_MD *type,&#10;                unsigned char *md, unsigned int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509" id="data" text="const X509 *data" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="len" text="unsigned int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_digest" text="int X509_CRL_digest(const X509_CRL *data, const EVP_MD *type,&#10;                    unsigned char *md, unsigned int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_CRL" id="data" text="const X509_CRL *data" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="len" text="unsigned int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_digest" text="int X509_REQ_digest(const X509_REQ *data, const EVP_MD *type,&#10;                    unsigned char *md, unsigned int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_REQ" id="data" text="const X509_REQ *data" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="len" text="unsigned int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_digest" text="int X509_NAME_digest(const X509_NAME *data, const EVP_MD *type,&#10;                     unsigned char *md, unsigned int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_NAME" id="data" text="const X509_NAME *data" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="len" text="unsigned int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="d2i_X509_fp" text="X509 *d2i_X509_fp(FILE *fp, X509 **x509)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509" id="x509" text="X509 **x509" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_fp" text="int i2d_X509_fp(FILE *fp, X509 *x509)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL" id="d2i_X509_CRL_fp" text="X509_CRL *d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL **crl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_CRL_fp" text="int i2d_X509_CRL_fp(FILE *fp, X509_CRL *crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REQ" id="d2i_X509_REQ_fp" text="X509_REQ *d2i_X509_REQ_fp(FILE *fp, X509_REQ **req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_REQ" id="req" text="X509_REQ **req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_REQ_fp" text="int i2d_X509_REQ_fp(FILE *fp, X509_REQ *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="d2i_RSAPrivateKey_fp" text="RSA *d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA **rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSAPrivateKey_fp" text="int i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="d2i_RSAPublicKey_fp" text="RSA *d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA **rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSAPublicKey_fp" text="int i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="d2i_RSA_PUBKEY_fp" text="RSA *d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA **rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSA_PUBKEY_fp" text="int i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="d2i_DSA_PUBKEY_fp" text="DSA *d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="DSA" id="dsa" text="DSA **dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DSA_PUBKEY_fp" text="int i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="d2i_DSAPrivateKey_fp" text="DSA *d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="DSA" id="dsa" text="DSA **dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DSAPrivateKey_fp" text="int i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="d2i_EC_PUBKEY_fp" text="EC_KEY *d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY **eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_EC_PUBKEY_fp" text="int i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="d2i_ECPrivateKey_fp" text="EC_KEY *d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY **eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ECPrivateKey_fp" text="int i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_SIG" id="d2i_PKCS8_fp" text="X509_SIG *d2i_PKCS8_fp(FILE *fp, X509_SIG **p8)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_SIG" id="p8" text="X509_SIG **p8" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS8_fp" text="int i2d_PKCS8_fp(FILE *fp, X509_SIG *p8)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_SIG" id="p8" text="X509_SIG *p8" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS8_PRIV_KEY_INFO" id="d2i_PKCS8_PRIV_KEY_INFO_fp" text="PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,&#10;                                                PKCS8_PRIV_KEY_INFO **p8inf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="PKCS8_PRIV_KEY_INFO" id="p8inf" text="PKCS8_PRIV_KEY_INFO **p8inf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS8_PRIV_KEY_INFO_fp" text="int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="PKCS8_PRIV_KEY_INFO" id="p8inf" text="PKCS8_PRIV_KEY_INFO *p8inf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS8PrivateKeyInfo_fp" text="int i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="key" text="EVP_PKEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PrivateKey_fp" text="int i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="d2i_PrivateKey_fp" text="EVP_PKEY *d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="a" text="EVP_PKEY **a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PUBKEY_fp" text="int i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="d2i_PUBKEY_fp" text="EVP_PKEY *d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="EVP_PKEY" id="a" text="EVP_PKEY **a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="d2i_X509_bio" text="X509 *d2i_X509_bio(BIO *bp, X509 **x509)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509" id="x509" text="X509 **x509" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_bio" text="int i2d_X509_bio(BIO *bp, X509 *x509)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL" id="d2i_X509_CRL_bio" text="X509_CRL *d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL **crl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_CRL_bio" text="int i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REQ" id="d2i_X509_REQ_bio" text="X509_REQ *d2i_X509_REQ_bio(BIO *bp, X509_REQ **req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_REQ" id="req" text="X509_REQ **req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_REQ_bio" text="int i2d_X509_REQ_bio(BIO *bp, X509_REQ *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="d2i_RSAPrivateKey_bio" text="RSA *d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA **rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSAPrivateKey_bio" text="int i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="d2i_RSAPublicKey_bio" text="RSA *d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA **rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSAPublicKey_bio" text="int i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="d2i_RSA_PUBKEY_bio" text="RSA *d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA **rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSA_PUBKEY_bio" text="int i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="d2i_DSA_PUBKEY_bio" text="DSA *d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="DSA" id="dsa" text="DSA **dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DSA_PUBKEY_bio" text="int i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="d2i_DSAPrivateKey_bio" text="DSA *d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="DSA" id="dsa" text="DSA **dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DSAPrivateKey_bio" text="int i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="DSA" id="dsa" text="DSA *dsa" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="d2i_EC_PUBKEY_bio" text="EC_KEY *d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY **eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_EC_PUBKEY_bio" text="int i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="d2i_ECPrivateKey_bio" text="EC_KEY *d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY **eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ECPrivateKey_bio" text="int i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EC_KEY" id="eckey" text="EC_KEY *eckey" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_SIG" id="d2i_PKCS8_bio" text="X509_SIG *d2i_PKCS8_bio(BIO *bp, X509_SIG **p8)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_SIG" id="p8" text="X509_SIG **p8" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS8_bio" text="int i2d_PKCS8_bio(BIO *bp, X509_SIG *p8)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_SIG" id="p8" text="X509_SIG *p8" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS8_PRIV_KEY_INFO" id="d2i_PKCS8_PRIV_KEY_INFO_bio" text="PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,&#10;                                                 PKCS8_PRIV_KEY_INFO **p8inf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="PKCS8_PRIV_KEY_INFO" id="p8inf" text="PKCS8_PRIV_KEY_INFO **p8inf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS8_PRIV_KEY_INFO_bio" text="int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="PKCS8_PRIV_KEY_INFO" id="p8inf" text="PKCS8_PRIV_KEY_INFO *p8inf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS8PrivateKeyInfo_bio" text="int i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="key" text="EVP_PKEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PrivateKey_bio" text="int i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="d2i_PrivateKey_bio" text="EVP_PKEY *d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="a" text="EVP_PKEY **a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PUBKEY_bio" text="int i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="d2i_PUBKEY_bio" text="EVP_PKEY *d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="EVP_PKEY" id="a" text="EVP_PKEY **a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="X509_dup" text="X509 *X509_dup(X509 *x509)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="X509_ATTRIBUTE_dup" text="X509_ATTRIBUTE *X509_ATTRIBUTE_dup(X509_ATTRIBUTE *xa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="xa" text="X509_ATTRIBUTE *xa" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509_EXTENSION_dup" text="X509_EXTENSION *X509_EXTENSION_dup(X509_EXTENSION *ex)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL" id="X509_CRL_dup" text="X509_CRL *X509_CRL_dup(X509_CRL *crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REVOKED" id="X509_REVOKED_dup" text="X509_REVOKED *X509_REVOKED_dup(X509_REVOKED *rev)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="rev" text="X509_REVOKED *rev" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REQ" id="X509_REQ_dup" text="X509_REQ *X509_REQ_dup(X509_REQ *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ALGOR" id="X509_ALGOR_dup" text="X509_ALGOR *X509_ALGOR_dup(X509_ALGOR *xn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ALGOR" id="xn" text="X509_ALGOR *xn" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_ALGOR_set0" text="int X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype,&#10;                    void *pval)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ALGOR" id="alg" text="X509_ALGOR *alg" mod=""/>
    <arg type="ASN1_OBJECT" id="aobj" text="ASN1_OBJECT *aobj" mod=""/>
    <arg type="int" id="ptype" text="int ptype" mod=""/>
    <arg type="void" id="pval" text="void *pval" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_ALGOR_get0" text="void X509_ALGOR_get0(ASN1_OBJECT **paobj, int *pptype, void **ppval,&#10;                     X509_ALGOR *algor)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="ASN1_OBJECT" id="paobj" text="ASN1_OBJECT **paobj" mod=""/>
    <arg type="int" id="pptype" text="int *pptype" mod=""/>
    <arg type="void" id="ppval" text="void **ppval" mod=""/>
    <arg type="X509_ALGOR" id="algor" text="X509_ALGOR *algor" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_ALGOR_set_md" text="void X509_ALGOR_set_md(X509_ALGOR *alg, const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ALGOR" id="alg" text="X509_ALGOR *alg" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_ALGOR_cmp" text="int X509_ALGOR_cmp(const X509_ALGOR *a, const X509_ALGOR *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_ALGOR" id="a" text="const X509_ALGOR *a" mod=""/>
    <arg type="const X509_ALGOR" id="b" text="const X509_ALGOR *b" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME" id="X509_NAME_dup" text="X509_NAME *X509_NAME_dup(X509_NAME *xn)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="xn" text="X509_NAME *xn" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME_ENTRY" id="X509_NAME_ENTRY_dup" text="X509_NAME_ENTRY *X509_NAME_ENTRY_dup(X509_NAME_ENTRY *ne)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME_ENTRY" id="ne" text="X509_NAME_ENTRY *ne" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_cmp_time" text="int X509_cmp_time(const ASN1_TIME *s, time_t *t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const ASN1_TIME" id="s" text="const ASN1_TIME *s" mod=""/>
    <arg type="time_t" id="t" text="time_t *t" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_cmp_current_time" text="int X509_cmp_current_time(const ASN1_TIME *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const ASN1_TIME" id="s" text="const ASN1_TIME *s" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TIME" id="X509_time_adj" text="ASN1_TIME *X509_time_adj(ASN1_TIME *s, long adj, time_t *t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="ASN1_TIME" id="s" text="ASN1_TIME *s" mod=""/>
    <arg type="long" id="adj" text="long adj" mod=""/>
    <arg type="time_t" id="t" text="time_t *t" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TIME" id="X509_time_adj_ex" text="ASN1_TIME *X509_time_adj_ex(ASN1_TIME *s,&#10;                            int offset_day, long offset_sec, time_t *t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="ASN1_TIME" id="s" text="ASN1_TIME *s" mod=""/>
    <arg type="int" id="offset_day" text="int offset_day" mod=""/>
    <arg type="long" id="offset_sec" text="long offset_sec" mod=""/>
    <arg type="time_t" id="t" text="time_t *t" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TIME" id="X509_gmtime_adj" text="ASN1_TIME *X509_gmtime_adj(ASN1_TIME *s, long adj)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="ASN1_TIME" id="s" text="ASN1_TIME *s" mod=""/>
    <arg type="long" id="adj" text="long adj" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="X509_get_default_cert_area" text="const char *X509_get_default_cert_area(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="X509_get_default_cert_dir" text="const char *X509_get_default_cert_dir(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="X509_get_default_cert_file" text="const char *X509_get_default_cert_file(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="X509_get_default_cert_dir_env" text="const char *X509_get_default_cert_dir_env(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="X509_get_default_cert_file_env" text="const char *X509_get_default_cert_file_env(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON9" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="X509_get_default_private_dir" text="const char *X509_get_default_private_dir(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON10" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REQ" id="X509_to_X509_REQ" text="X509_REQ *X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="X509_REQ_to_X509" text="X509 *X509_REQ_to_X509(X509_REQ *r, int days, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="r" text="X509_REQ *r" mod=""/>
    <arg type="int" id="days" text="int days" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ALGOR" id="X509_ALGOR_new" text="X509_ALGOR &#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ALGOR_new&#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON11" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_ALGOR_free" text="void &#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ALGOR_free&#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ALGOR &#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ALGOR" id="a" text="X509_ALGOR &#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ALGOR" id="d2i_X509_ALGOR" text="X509_ALGOR &#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_ALGOR(&#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ALGOR &#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ALGOR" id="a" text="X509_ALGOR &#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_ALGOR" text="int i2d_X509_ALGOR(&#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ALGOR &#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ALGOR" id="a" text="X509_ALGOR &#10;# 781 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ALGORS" id="d2i_X509_ALGORS" text="X509_ALGORS &#10;# 782 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_ALGORS(&#10;# 782 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ALGORS &#10;# 782 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ALGORS" id="a" text="X509_ALGORS &#10;# 782 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_ALGORS" text="int i2d_X509_ALGORS(&#10;# 782 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ALGORS &#10;# 782 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ALGORS" id="a" text="X509_ALGORS &#10;# 782 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_VAL" id="X509_VAL_new" text="X509_VAL &#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_VAL_new&#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON12" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_VAL_free" text="void &#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_VAL_free&#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_VAL &#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_VAL" id="a" text="X509_VAL &#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_VAL" id="d2i_X509_VAL" text="X509_VAL &#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_VAL(&#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_VAL &#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_VAL" id="a" text="X509_VAL &#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_VAL" text="int i2d_X509_VAL(&#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_VAL &#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_VAL" id="a" text="X509_VAL &#10;# 783 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_PUBKEY" id="X509_PUBKEY_new" text="X509_PUBKEY &#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_PUBKEY_new&#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON13" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_PUBKEY_free" text="void &#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_PUBKEY_free&#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_PUBKEY &#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_PUBKEY" id="a" text="X509_PUBKEY &#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_PUBKEY" id="d2i_X509_PUBKEY" text="X509_PUBKEY &#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_PUBKEY(&#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_PUBKEY &#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_PUBKEY" id="a" text="X509_PUBKEY &#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_PUBKEY" text="int i2d_X509_PUBKEY(&#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_PUBKEY &#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_PUBKEY" id="a" text="X509_PUBKEY &#10;# 785 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_PUBKEY_set" text="int X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_PUBKEY" id="x" text="X509_PUBKEY **x" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="X509_PUBKEY_get" text="EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_PUBKEY" id="key" text="X509_PUBKEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_get_pubkey_parameters" text="int X509_get_pubkey_parameters(EVP_PKEY *pkey, &#10;# 789 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                              struct stack_st_X509 &#10;# 789 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                             *chain)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="struct stack_st_X509" id="chain" text="struct stack_st_X509 &#10;# 789 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                             *chain" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PUBKEY" text="int i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EVP_PKEY" id="a" text="EVP_PKEY *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="d2i_PUBKEY" text="EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EVP_PKEY" id="a" text="EVP_PKEY **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_RSA_PUBKEY" text="int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="RSA" id="a" text="RSA *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="RSA" id="d2i_RSA_PUBKEY" text="RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="RSA" id="a" text="RSA **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DSA_PUBKEY" text="int i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="DSA" id="a" text="DSA *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="DSA" id="d2i_DSA_PUBKEY" text="DSA *d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="DSA" id="a" text="DSA **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_EC_PUBKEY" text="int i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EC_KEY" id="a" text="EC_KEY *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="EC_KEY" id="d2i_EC_PUBKEY" text="EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EC_KEY" id="a" text="EC_KEY **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_SIG" id="X509_SIG_new" text="X509_SIG &#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_SIG_new&#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON14" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_SIG_free" text="void &#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_SIG_free&#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_SIG &#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_SIG" id="a" text="X509_SIG &#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_SIG" id="d2i_X509_SIG" text="X509_SIG &#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_SIG(&#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_SIG &#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_SIG" id="a" text="X509_SIG &#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_SIG" text="int i2d_X509_SIG(&#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_SIG &#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_SIG" id="a" text="X509_SIG &#10;# 805 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REQ_INFO" id="X509_REQ_INFO_new" text="X509_REQ_INFO &#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REQ_INFO_new&#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON15" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_REQ_INFO_free" text="void &#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REQ_INFO_free&#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REQ_INFO &#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ_INFO" id="a" text="X509_REQ_INFO &#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REQ_INFO" id="d2i_X509_REQ_INFO" text="X509_REQ_INFO &#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_REQ_INFO(&#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REQ_INFO &#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ_INFO" id="a" text="X509_REQ_INFO &#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_REQ_INFO" text="int i2d_X509_REQ_INFO(&#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REQ_INFO &#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ_INFO" id="a" text="X509_REQ_INFO &#10;# 806 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REQ" id="X509_REQ_new" text="X509_REQ &#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REQ_new&#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON16" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_REQ_free" text="void &#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REQ_free&#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REQ &#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="a" text="X509_REQ &#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REQ" id="d2i_X509_REQ" text="X509_REQ &#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_REQ(&#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REQ &#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="a" text="X509_REQ &#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_REQ" text="int i2d_X509_REQ(&#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REQ &#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="a" text="X509_REQ &#10;# 807 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="X509_ATTRIBUTE_new" text="X509_ATTRIBUTE &#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ATTRIBUTE_new&#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON17" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_ATTRIBUTE_free" text="void &#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ATTRIBUTE_free&#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ATTRIBUTE &#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="a" text="X509_ATTRIBUTE &#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="d2i_X509_ATTRIBUTE" text="X509_ATTRIBUTE &#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_ATTRIBUTE(&#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ATTRIBUTE &#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="a" text="X509_ATTRIBUTE &#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_ATTRIBUTE" text="int i2d_X509_ATTRIBUTE(&#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_ATTRIBUTE &#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="a" text="X509_ATTRIBUTE &#10;# 809 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="X509_ATTRIBUTE_create" text="X509_ATTRIBUTE *X509_ATTRIBUTE_create(int nid, int atrtype, void *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="atrtype" text="int atrtype" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509_EXTENSION_new" text="X509_EXTENSION &#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_EXTENSION_new&#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON18" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_EXTENSION_free" text="void &#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_EXTENSION_free&#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_EXTENSION &#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="a" text="X509_EXTENSION &#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="d2i_X509_EXTENSION" text="X509_EXTENSION &#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_EXTENSION(&#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_EXTENSION &#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="a" text="X509_EXTENSION &#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_EXTENSION" text="int i2d_X509_EXTENSION(&#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_EXTENSION &#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="a" text="X509_EXTENSION &#10;# 812 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSIONS" id="d2i_X509_EXTENSIONS" text="X509_EXTENSIONS &#10;# 813 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_EXTENSIONS(&#10;# 813 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_EXTENSIONS &#10;# 813 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSIONS" id="a" text="X509_EXTENSIONS &#10;# 813 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_EXTENSIONS" text="int i2d_X509_EXTENSIONS(&#10;# 813 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_EXTENSIONS &#10;# 813 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSIONS" id="a" text="X509_EXTENSIONS &#10;# 813 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME_ENTRY" id="X509_NAME_ENTRY_new" text="X509_NAME_ENTRY &#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_NAME_ENTRY_new&#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON19" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_NAME_ENTRY_free" text="void &#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_NAME_ENTRY_free&#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_NAME_ENTRY &#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME_ENTRY" id="a" text="X509_NAME_ENTRY &#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME_ENTRY" id="d2i_X509_NAME_ENTRY" text="X509_NAME_ENTRY &#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_NAME_ENTRY(&#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_NAME_ENTRY &#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME_ENTRY" id="a" text="X509_NAME_ENTRY &#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_NAME_ENTRY" text="int i2d_X509_NAME_ENTRY(&#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_NAME_ENTRY &#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME_ENTRY" id="a" text="X509_NAME_ENTRY &#10;# 815 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME" id="X509_NAME_new" text="X509_NAME &#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_NAME_new&#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON20" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_NAME_free" text="void &#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_NAME_free&#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_NAME &#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="a" text="X509_NAME &#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME" id="d2i_X509_NAME" text="X509_NAME &#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_NAME(&#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_NAME &#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="a" text="X509_NAME &#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_NAME" text="int i2d_X509_NAME(&#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_NAME &#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="a" text="X509_NAME &#10;# 817 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_set" text="int X509_NAME_set(X509_NAME **xn, X509_NAME *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="xn" text="X509_NAME **xn" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CINF" id="X509_CINF_new" text="X509_CINF &#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CINF_new&#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON21" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_CINF_free" text="void &#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CINF_free&#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CINF &#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CINF" id="a" text="X509_CINF &#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CINF" id="d2i_X509_CINF" text="X509_CINF &#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_CINF(&#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CINF &#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CINF" id="a" text="X509_CINF &#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_CINF" text="int i2d_X509_CINF(&#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CINF &#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CINF" id="a" text="X509_CINF &#10;# 821 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="X509_new" text="X509 &#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_new&#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON22" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_free" text="void &#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_free&#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509 &#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="a" text="X509 &#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="d2i_X509" text="X509 &#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509(&#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509 &#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="a" text="X509 &#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509" text="int i2d_X509(&#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509 &#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="a" text="X509 &#10;# 823 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CERT_AUX" id="X509_CERT_AUX_new" text="X509_CERT_AUX &#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CERT_AUX_new&#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON23" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_CERT_AUX_free" text="void &#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CERT_AUX_free&#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CERT_AUX &#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CERT_AUX" id="a" text="X509_CERT_AUX &#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CERT_AUX" id="d2i_X509_CERT_AUX" text="X509_CERT_AUX &#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_CERT_AUX(&#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CERT_AUX &#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CERT_AUX" id="a" text="X509_CERT_AUX &#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_CERT_AUX" text="int i2d_X509_CERT_AUX(&#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CERT_AUX &#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CERT_AUX" id="a" text="X509_CERT_AUX &#10;# 824 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CERT_PAIR" id="X509_CERT_PAIR_new" text="X509_CERT_PAIR &#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CERT_PAIR_new&#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON24" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_CERT_PAIR_free" text="void &#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CERT_PAIR_free&#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CERT_PAIR &#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CERT_PAIR" id="a" text="X509_CERT_PAIR &#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CERT_PAIR" id="d2i_X509_CERT_PAIR" text="X509_CERT_PAIR &#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_CERT_PAIR(&#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CERT_PAIR &#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CERT_PAIR" id="a" text="X509_CERT_PAIR &#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_CERT_PAIR" text="int i2d_X509_CERT_PAIR(&#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CERT_PAIR &#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CERT_PAIR" id="a" text="X509_CERT_PAIR &#10;# 826 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_get_ex_new_index" text="int X509_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,&#10;                          CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_set_ex_data" text="int X509_set_ex_data(X509 *r, int idx, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="r" text="X509 *r" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_get_ex_data" text="void *X509_get_ex_data(X509 *r, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="r" text="X509 *r" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_AUX" text="int i2d_X509_AUX(X509 *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="a" text="X509 *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="d2i_X509_AUX" text="X509 *d2i_X509_AUX(X509 **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="a" text="X509 **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_re_X509_tbs" text="int i2d_re_X509_tbs(X509 *x, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_get0_signature" text="void X509_get0_signature(ASN1_BIT_STRING **psig, X509_ALGOR **palg,&#10;                         const X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="ASN1_BIT_STRING" id="psig" text="ASN1_BIT_STRING **psig" mod=""/>
    <arg type="X509_ALGOR" id="palg" text="X509_ALGOR **palg" mod=""/>
    <arg type="const X509" id="x" text="const X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_get_signature_nid" text="int X509_get_signature_nid(const X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509" id="x" text="const X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_alias_set1" text="int X509_alias_set1(X509 *x, unsigned char *name, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="unsigned char" id="name" text="unsigned char *name" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_keyid_set1" text="int X509_keyid_set1(X509 *x, unsigned char *id, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="unsigned char" id="id" text="unsigned char *id" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="X509_alias_get0" text="unsigned char *X509_alias_get0(X509 *x, int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="int" id="len" text="int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="X509_keyid_get0" text="unsigned char *X509_keyid_get0(X509 *x, int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="int" id="len" text="int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_TRUST_set_default" text="int (*X509_TRUST_set_default(int (*trust) (int, X509 *, int))) (int, X509 *,&#10;                                                                int)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="trust" text="int (*trust) (int, X509 *, int)" mod=""/>
    <arg type="int" id="ANON25" text="int" mod=""/>
    <arg type="X509" id="ANON26" text="X509 *" mod=""/>
    <arg type="int" id="ANON27" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_TRUST_set" text="int X509_TRUST_set(int *t, int trust)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="t" text="int *t" mod=""/>
    <arg type="int" id="trust" text="int trust" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_add1_trust_object" text="int X509_add1_trust_object(X509 *x, ASN1_OBJECT *obj)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_add1_reject_object" text="int X509_add1_reject_object(X509 *x, ASN1_OBJECT *obj)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_trust_clear" text="void X509_trust_clear(X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_reject_clear" text="void X509_reject_clear(X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REVOKED" id="X509_REVOKED_new" text="X509_REVOKED &#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REVOKED_new&#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON28" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_REVOKED_free" text="void &#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REVOKED_free&#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REVOKED &#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="a" text="X509_REVOKED &#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_REVOKED" id="d2i_X509_REVOKED" text="X509_REVOKED &#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_REVOKED(&#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REVOKED &#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="a" text="X509_REVOKED &#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_REVOKED" text="int i2d_X509_REVOKED(&#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_REVOKED &#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="a" text="X509_REVOKED &#10;# 853 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL_INFO" id="X509_CRL_INFO_new" text="X509_CRL_INFO &#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CRL_INFO_new&#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON29" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_CRL_INFO_free" text="void &#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CRL_INFO_free&#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CRL_INFO &#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL_INFO" id="a" text="X509_CRL_INFO &#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL_INFO" id="d2i_X509_CRL_INFO" text="X509_CRL_INFO &#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_CRL_INFO(&#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CRL_INFO &#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL_INFO" id="a" text="X509_CRL_INFO &#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_CRL_INFO" text="int i2d_X509_CRL_INFO(&#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CRL_INFO &#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL_INFO" id="a" text="X509_CRL_INFO &#10;# 854 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL" id="X509_CRL_new" text="X509_CRL &#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CRL_new&#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON30" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_CRL_free" text="void &#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CRL_free&#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CRL &#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="a" text="X509_CRL &#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL" id="d2i_X509_CRL" text="X509_CRL &#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_X509_CRL(&#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CRL &#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="a" text="X509_CRL &#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_CRL" text="int i2d_X509_CRL(&#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;X509_CRL &#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="a" text="X509_CRL &#10;# 855 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_add0_revoked" text="int X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
    <arg type="X509_REVOKED" id="rev" text="X509_REVOKED *rev" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_get0_by_serial" text="int X509_CRL_get0_by_serial(X509_CRL *crl,&#10;                            X509_REVOKED **ret, ASN1_INTEGER *serial)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
    <arg type="X509_REVOKED" id="ret" text="X509_REVOKED **ret" mod=""/>
    <arg type="ASN1_INTEGER" id="serial" text="ASN1_INTEGER *serial" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_get0_by_cert" text="int X509_CRL_get0_by_cert(X509_CRL *crl, X509_REVOKED **ret, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
    <arg type="X509_REVOKED" id="ret" text="X509_REVOKED **ret" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_PKEY" id="X509_PKEY_new" text="X509_PKEY *X509_PKEY_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON31" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_PKEY_free" text="void X509_PKEY_free(X509_PKEY *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_PKEY" id="a" text="X509_PKEY *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_X509_PKEY" text="int i2d_X509_PKEY(X509_PKEY *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_PKEY" id="a" text="X509_PKEY *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_PKEY" id="d2i_X509_PKEY" text="X509_PKEY *d2i_X509_PKEY(X509_PKEY **a, const unsigned char **pp,&#10;                         long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_PKEY" id="a" text="X509_PKEY **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="NETSCAPE_SPKI" id="NETSCAPE_SPKI_new" text="NETSCAPE_SPKI &#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_SPKI_new&#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON32" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="NETSCAPE_SPKI_free" text="void &#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_SPKI_free&#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_SPKI &#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_SPKI" id="a" text="NETSCAPE_SPKI &#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="NETSCAPE_SPKI" id="d2i_NETSCAPE_SPKI" text="NETSCAPE_SPKI &#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_NETSCAPE_SPKI(&#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_SPKI &#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_SPKI" id="a" text="NETSCAPE_SPKI &#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_NETSCAPE_SPKI" text="int i2d_NETSCAPE_SPKI(&#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_SPKI &#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_SPKI" id="a" text="NETSCAPE_SPKI &#10;# 868 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="NETSCAPE_SPKAC" id="NETSCAPE_SPKAC_new" text="NETSCAPE_SPKAC &#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_SPKAC_new&#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON33" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="NETSCAPE_SPKAC_free" text="void &#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_SPKAC_free&#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_SPKAC &#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_SPKAC" id="a" text="NETSCAPE_SPKAC &#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="NETSCAPE_SPKAC" id="d2i_NETSCAPE_SPKAC" text="NETSCAPE_SPKAC &#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_NETSCAPE_SPKAC(&#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_SPKAC &#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_SPKAC" id="a" text="NETSCAPE_SPKAC &#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_NETSCAPE_SPKAC" text="int i2d_NETSCAPE_SPKAC(&#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_SPKAC &#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_SPKAC" id="a" text="NETSCAPE_SPKAC &#10;# 869 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="NETSCAPE_CERT_SEQUENCE" id="NETSCAPE_CERT_SEQUENCE_new" text="NETSCAPE_CERT_SEQUENCE &#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_CERT_SEQUENCE_new&#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON34" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="NETSCAPE_CERT_SEQUENCE_free" text="void &#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_CERT_SEQUENCE_free&#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_CERT_SEQUENCE &#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_CERT_SEQUENCE" id="a" text="NETSCAPE_CERT_SEQUENCE &#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="NETSCAPE_CERT_SEQUENCE" id="d2i_NETSCAPE_CERT_SEQUENCE" text="NETSCAPE_CERT_SEQUENCE &#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_NETSCAPE_CERT_SEQUENCE(&#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_CERT_SEQUENCE &#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_CERT_SEQUENCE" id="a" text="NETSCAPE_CERT_SEQUENCE &#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_NETSCAPE_CERT_SEQUENCE" text="int i2d_NETSCAPE_CERT_SEQUENCE(&#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;NETSCAPE_CERT_SEQUENCE &#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="NETSCAPE_CERT_SEQUENCE" id="a" text="NETSCAPE_CERT_SEQUENCE &#10;# 870 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_INFO" id="X509_INFO_new" text="X509_INFO *X509_INFO_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON35" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_INFO_free" text="void X509_INFO_free(X509_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_INFO" id="a" text="X509_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="X509_NAME_oneline" text="char *X509_NAME_oneline(X509_NAME *a, char *buf, int size)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="a" text="X509_NAME *a" mod=""/>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_verify" text="int ASN1_verify(i2d_of_void *i2d, X509_ALGOR *algor1,&#10;                ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="i2d_of_void" id="i2d" text="i2d_of_void *i2d" mod=""/>
    <arg type="X509_ALGOR" id="algor1" text="X509_ALGOR *algor1" mod=""/>
    <arg type="ASN1_BIT_STRING" id="signature" text="ASN1_BIT_STRING *signature" mod=""/>
    <arg type="char" id="data" text="char *data" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_digest" text="int ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data,&#10;                unsigned char *md, unsigned int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="i2d_of_void" id="i2d" text="i2d_of_void *i2d" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="char" id="data" text="char *data" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="len" text="unsigned int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_sign" text="int ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1,&#10;              X509_ALGOR *algor2, ASN1_BIT_STRING *signature,&#10;              char *data, EVP_PKEY *pkey, const EVP_MD *type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="i2d_of_void" id="i2d" text="i2d_of_void *i2d" mod=""/>
    <arg type="X509_ALGOR" id="algor1" text="X509_ALGOR *algor1" mod=""/>
    <arg type="X509_ALGOR" id="algor2" text="X509_ALGOR *algor2" mod=""/>
    <arg type="ASN1_BIT_STRING" id="signature" text="ASN1_BIT_STRING *signature" mod=""/>
    <arg type="char" id="data" text="char *data" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_digest" text="int ASN1_item_digest(const ASN1_ITEM *it, const EVP_MD *type, void *data,&#10;                     unsigned char *md, unsigned int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="len" text="unsigned int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_verify" text="int ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *algor1,&#10;                     ASN1_BIT_STRING *signature, void *data, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="X509_ALGOR" id="algor1" text="X509_ALGOR *algor1" mod=""/>
    <arg type="ASN1_BIT_STRING" id="signature" text="ASN1_BIT_STRING *signature" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_sign" text="int ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1,&#10;                   X509_ALGOR *algor2, ASN1_BIT_STRING *signature, void *data,&#10;                   EVP_PKEY *pkey, const EVP_MD *type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="X509_ALGOR" id="algor1" text="X509_ALGOR *algor1" mod=""/>
    <arg type="X509_ALGOR" id="algor2" text="X509_ALGOR *algor2" mod=""/>
    <arg type="ASN1_BIT_STRING" id="signature" text="ASN1_BIT_STRING *signature" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="ASN1_item_sign_ctx" text="int ASN1_item_sign_ctx(const ASN1_ITEM *it, X509_ALGOR *algor1,&#10;                       X509_ALGOR *algor2, ASN1_BIT_STRING *signature,&#10;                       void *asn, EVP_MD_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="X509_ALGOR" id="algor1" text="X509_ALGOR *algor1" mod=""/>
    <arg type="X509_ALGOR" id="algor2" text="X509_ALGOR *algor2" mod=""/>
    <arg type="ASN1_BIT_STRING" id="signature" text="ASN1_BIT_STRING *signature" mod=""/>
    <arg type="void" id="asn" text="void *asn" mod=""/>
    <arg type="EVP_MD_CTX" id="ctx" text="EVP_MD_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_set_version" text="int X509_set_version(X509 *x, long version)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="long" id="version" text="long version" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_set_serialNumber" text="int X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="ASN1_INTEGER" id="serial" text="ASN1_INTEGER *serial" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_INTEGER" id="X509_get_serialNumber" text="ASN1_INTEGER *X509_get_serialNumber(X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_set_issuer_name" text="int X509_set_issuer_name(X509 *x, X509_NAME *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME" id="X509_get_issuer_name" text="X509_NAME *X509_get_issuer_name(X509 *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="a" text="X509 *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_set_subject_name" text="int X509_set_subject_name(X509 *x, X509_NAME *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME" id="X509_get_subject_name" text="X509_NAME *X509_get_subject_name(X509 *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="a" text="X509 *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_set_notBefore" text="int X509_set_notBefore(X509 *x, const ASN1_TIME *tm)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="const ASN1_TIME" id="tm" text="const ASN1_TIME *tm" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_set_notAfter" text="int X509_set_notAfter(X509 *x, const ASN1_TIME *tm)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="const ASN1_TIME" id="tm" text="const ASN1_TIME *tm" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_set_pubkey" text="int X509_set_pubkey(X509 *x, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="X509_get_pubkey" text="EVP_PKEY *X509_get_pubkey(X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_BIT_STRING" id="X509_get0_pubkey_bitstr" text="ASN1_BIT_STRING *X509_get0_pubkey_bitstr(const X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509" id="x" text="const X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_certificate_type" text="int X509_certificate_type(X509 *x, EVP_PKEY *pubkey )" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="EVP_PKEY" id="pubkey" text="EVP_PKEY *pubkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_set_version" text="int X509_REQ_set_version(X509_REQ *x, long version)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="x" text="X509_REQ *x" mod=""/>
    <arg type="long" id="version" text="long version" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_set_subject_name" text="int X509_REQ_set_subject_name(X509_REQ *req, X509_NAME *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_set_pubkey" text="int X509_REQ_set_pubkey(X509_REQ *x, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="x" text="X509_REQ *x" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="X509_REQ_get_pubkey" text="EVP_PKEY *X509_REQ_get_pubkey(X509_REQ *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_extension_nid" text="int X509_REQ_extension_nid(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_get_extension_nids" text="int *X509_REQ_get_extension_nids(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON36" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_REQ_set_extension_nids" text="void X509_REQ_set_extension_nids(int *nids)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="nids" text="int *nids" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_EXTENSION" id="X509_REQ_get_extensions" text="struct stack_st_X509_EXTENSION &#10;# 922 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                        *X509_REQ_get_extensions(X509_REQ *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_add_extensions_nid" text="int X509_REQ_add_extensions_nid(X509_REQ *req, &#10;# 923 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                              struct stack_st_X509_EXTENSION &#10;# 923 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                                       *exts,&#10;                                int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
    <arg type="struct stack_st_X509_EXTENSION" id="exts" text="struct stack_st_X509_EXTENSION &#10;# 923 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                                       *exts" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_add_extensions" text="int X509_REQ_add_extensions(X509_REQ *req, &#10;# 925 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                          struct stack_st_X509_EXTENSION &#10;# 925 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                                   *exts)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
    <arg type="struct stack_st_X509_EXTENSION" id="exts" text="struct stack_st_X509_EXTENSION &#10;# 925 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                                   *exts" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_get_attr_count" text="int X509_REQ_get_attr_count(const X509_REQ *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_REQ" id="req" text="const X509_REQ *req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_get_attr_by_NID" text="int X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_REQ" id="req" text="const X509_REQ *req" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_get_attr_by_OBJ" text="int X509_REQ_get_attr_by_OBJ(const X509_REQ *req, ASN1_OBJECT *obj,&#10;                             int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_REQ" id="req" text="const X509_REQ *req" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="X509_REQ_get_attr" text="X509_ATTRIBUTE *X509_REQ_get_attr(const X509_REQ *req, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_REQ" id="req" text="const X509_REQ *req" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="X509_REQ_delete_attr" text="X509_ATTRIBUTE *X509_REQ_delete_attr(X509_REQ *req, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_add1_attr" text="int X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE *attr" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_add1_attr_by_OBJ" text="int X509_REQ_add1_attr_by_OBJ(X509_REQ *req,&#10;                              const ASN1_OBJECT *obj, int type,&#10;                              const unsigned char *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
    <arg type="const ASN1_OBJECT" id="obj" text="const ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_add1_attr_by_NID" text="int X509_REQ_add1_attr_by_NID(X509_REQ *req,&#10;                              int nid, int type,&#10;                              const unsigned char *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_add1_attr_by_txt" text="int X509_REQ_add1_attr_by_txt(X509_REQ *req,&#10;                              const char *attrname, int type,&#10;                              const unsigned char *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
    <arg type="const char" id="attrname" text="const char *attrname" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_set_version" text="int X509_CRL_set_version(X509_CRL *x, long version)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="long" id="version" text="long version" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_set_issuer_name" text="int X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_set_lastUpdate" text="int X509_CRL_set_lastUpdate(X509_CRL *x, const ASN1_TIME *tm)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="const ASN1_TIME" id="tm" text="const ASN1_TIME *tm" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_set_nextUpdate" text="int X509_CRL_set_nextUpdate(X509_CRL *x, const ASN1_TIME *tm)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="const ASN1_TIME" id="tm" text="const ASN1_TIME *tm" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_sort" text="int X509_CRL_sort(X509_CRL *crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REVOKED_set_serialNumber" text="int X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="x" text="X509_REVOKED *x" mod=""/>
    <arg type="ASN1_INTEGER" id="serial" text="ASN1_INTEGER *serial" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REVOKED_set_revocationDate" text="int X509_REVOKED_set_revocationDate(X509_REVOKED *r, ASN1_TIME *tm)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="r" text="X509_REVOKED *r" mod=""/>
    <arg type="ASN1_TIME" id="tm" text="ASN1_TIME *tm" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL" id="X509_CRL_diff" text="X509_CRL *X509_CRL_diff(X509_CRL *base, X509_CRL *newer,&#10;                        EVP_PKEY *skey, const EVP_MD *md, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="base" text="X509_CRL *base" mod=""/>
    <arg type="X509_CRL" id="newer" text="X509_CRL *newer" mod=""/>
    <arg type="EVP_PKEY" id="skey" text="EVP_PKEY *skey" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_check_private_key" text="int X509_REQ_check_private_key(X509_REQ *x509, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REQ" id="x509" text="X509_REQ *x509" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_check_private_key" text="int X509_check_private_key(X509 *x509, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_chain_check_suiteb" text="int X509_chain_check_suiteb(int *perror_depth,&#10;                            X509 *x, &#10;# 959 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                    struct stack_st_X509 &#10;# 959 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                   *chain,&#10;                            unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="perror_depth" text="int *perror_depth" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="struct stack_st_X509" id="chain" text="struct stack_st_X509 &#10;# 959 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                   *chain" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_check_suiteb" text="int X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
    <arg type="EVP_PKEY" id="pk" text="EVP_PKEY *pk" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509" id="X509_chain_up_ref" text="struct stack_st_X509 &#10;# 962 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;              *X509_chain_up_ref(&#10;# 962 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                 struct stack_st_X509 &#10;# 962 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                *chain)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct stack_st_X509" id="chain" text="struct stack_st_X509 &#10;# 962 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                *chain" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_issuer_and_serial_cmp" text="int X509_issuer_and_serial_cmp(const X509 *a, const X509 *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509" id="a" text="const X509 *a" mod=""/>
    <arg type="const X509" id="b" text="const X509 *b" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="X509_issuer_and_serial_hash" text="unsigned long X509_issuer_and_serial_hash(X509 *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="a" text="X509 *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_issuer_name_cmp" text="int X509_issuer_name_cmp(const X509 *a, const X509 *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509" id="a" text="const X509 *a" mod=""/>
    <arg type="const X509" id="b" text="const X509 *b" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="X509_issuer_name_hash" text="unsigned long X509_issuer_name_hash(X509 *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="a" text="X509 *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_subject_name_cmp" text="int X509_subject_name_cmp(const X509 *a, const X509 *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509" id="a" text="const X509 *a" mod=""/>
    <arg type="const X509" id="b" text="const X509 *b" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="X509_subject_name_hash" text="unsigned long X509_subject_name_hash(X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="X509_issuer_name_hash_old" text="unsigned long X509_issuer_name_hash_old(X509 *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="a" text="X509 *a" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="X509_subject_name_hash_old" text="unsigned long X509_subject_name_hash_old(X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_cmp" text="int X509_cmp(const X509 *a, const X509 *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509" id="a" text="const X509 *a" mod=""/>
    <arg type="const X509" id="b" text="const X509 *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_cmp" text="int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_NAME" id="a" text="const X509_NAME *a" mod=""/>
    <arg type="const X509_NAME" id="b" text="const X509_NAME *b" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="X509_NAME_hash" text="unsigned long X509_NAME_hash(X509_NAME *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="x" text="X509_NAME *x" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="X509_NAME_hash_old" text="unsigned long X509_NAME_hash_old(X509_NAME *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="x" text="X509_NAME *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_cmp" text="int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_CRL" id="a" text="const X509_CRL *a" mod=""/>
    <arg type="const X509_CRL" id="b" text="const X509_CRL *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_match" text="int X509_CRL_match(const X509_CRL *a, const X509_CRL *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const X509_CRL" id="a" text="const X509_CRL *a" mod=""/>
    <arg type="const X509_CRL" id="b" text="const X509_CRL *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_print_ex_fp" text="int X509_print_ex_fp(FILE *bp, X509 *x, unsigned long nmflag,&#10;                     unsigned long cflag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="bp" text="FILE *bp" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="unsigned long" id="nmflag" text="unsigned long nmflag" mod=""/>
    <arg type="unsigned long" id="cflag" text="unsigned long cflag" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_print_fp" text="int X509_print_fp(FILE *bp, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="bp" text="FILE *bp" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_print_fp" text="int X509_CRL_print_fp(FILE *bp, X509_CRL *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="bp" text="FILE *bp" mod=""/>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_print_fp" text="int X509_REQ_print_fp(FILE *bp, X509_REQ *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="bp" text="FILE *bp" mod=""/>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_print_ex_fp" text="int X509_NAME_print_ex_fp(FILE *fp, X509_NAME *nm, int indent,&#10;                          unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="X509_NAME" id="nm" text="X509_NAME *nm" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_print" text="int X509_NAME_print(BIO *bp, X509_NAME *name, int obase)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="int" id="obase" text="int obase" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_print_ex" text="int X509_NAME_print_ex(BIO *out, X509_NAME *nm, int indent,&#10;                       unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="X509_NAME" id="nm" text="X509_NAME *nm" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_print_ex" text="int X509_print_ex(BIO *bp, X509 *x, unsigned long nmflag,&#10;                  unsigned long cflag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="unsigned long" id="nmflag" text="unsigned long nmflag" mod=""/>
    <arg type="unsigned long" id="cflag" text="unsigned long cflag" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_print" text="int X509_print(BIO *bp, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_ocspid_print" text="int X509_ocspid_print(BIO *bp, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CERT_AUX_print" text="int X509_CERT_AUX_print(BIO *bp, X509_CERT_AUX *x, int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_CERT_AUX" id="x" text="X509_CERT_AUX *x" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_print" text="int X509_CRL_print(BIO *bp, X509_CRL *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_print_ex" text="int X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflag,&#10;                      unsigned long cflag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_REQ" id="x" text="X509_REQ *x" mod=""/>
    <arg type="unsigned long" id="nmflag" text="unsigned long nmflag" mod=""/>
    <arg type="unsigned long" id="cflag" text="unsigned long cflag" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REQ_print" text="int X509_REQ_print(BIO *bp, X509_REQ *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_entry_count" text="int X509_NAME_entry_count(X509_NAME *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_get_text_by_NID" text="int X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_get_text_by_OBJ" text="int X509_NAME_get_text_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj,&#10;                              char *buf, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_get_index_by_NID" text="int X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_get_index_by_OBJ" text="int X509_NAME_get_index_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj,&#10;                               int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME_ENTRY" id="X509_NAME_get_entry" text="X509_NAME_ENTRY *X509_NAME_get_entry(X509_NAME *name, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME_ENTRY" id="X509_NAME_delete_entry" text="X509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *name, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_add_entry" text="int X509_NAME_add_entry(X509_NAME *name, X509_NAME_ENTRY *ne,&#10;                        int loc, int set)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="X509_NAME_ENTRY" id="ne" text="X509_NAME_ENTRY *ne" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
    <arg type="int" id="set" text="int set" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_add_entry_by_OBJ" text="int X509_NAME_add_entry_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, int type,&#10;                               unsigned char *bytes, int len, int loc,&#10;                               int set)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="unsigned char" id="bytes" text="unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
    <arg type="int" id="set" text="int set" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_add_entry_by_NID" text="int X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,&#10;                               unsigned char *bytes, int len, int loc,&#10;                               int set)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="unsigned char" id="bytes" text="unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
    <arg type="int" id="set" text="int set" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME_ENTRY" id="X509_NAME_ENTRY_create_by_txt" text="X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne,&#10;                                               const char *field, int type,&#10;                                               const unsigned char *bytes,&#10;                                               int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME_ENTRY" id="ne" text="X509_NAME_ENTRY **ne" mod=""/>
    <arg type="const char" id="field" text="const char *field" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME_ENTRY" id="X509_NAME_ENTRY_create_by_NID" text="X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid,&#10;                                               int type, unsigned char *bytes,&#10;                                               int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME_ENTRY" id="ne" text="X509_NAME_ENTRY **ne" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="unsigned char" id="bytes" text="unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_add_entry_by_txt" text="int X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,&#10;                               const unsigned char *bytes, int len, int loc,&#10;                               int set)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="const char" id="field" text="const char *field" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
    <arg type="int" id="set" text="int set" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_NAME_ENTRY" id="X509_NAME_ENTRY_create_by_OBJ" text="X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne,&#10;                                               ASN1_OBJECT *obj, int type,&#10;                                               const unsigned char *bytes,&#10;                                               int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME_ENTRY" id="ne" text="X509_NAME_ENTRY **ne" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_ENTRY_set_object" text="int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, ASN1_OBJECT *obj)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME_ENTRY" id="ne" text="X509_NAME_ENTRY *ne" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_NAME_ENTRY_set_data" text="int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,&#10;                             const unsigned char *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME_ENTRY" id="ne" text="X509_NAME_ENTRY *ne" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="X509_NAME_ENTRY_get_object" text="ASN1_OBJECT *X509_NAME_ENTRY_get_object(X509_NAME_ENTRY *ne)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME_ENTRY" id="ne" text="X509_NAME_ENTRY *ne" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_STRING" id="X509_NAME_ENTRY_get_data" text="ASN1_STRING *X509_NAME_ENTRY_get_data(X509_NAME_ENTRY *ne)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_NAME_ENTRY" id="ne" text="X509_NAME_ENTRY *ne" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509v3_get_ext_count" text="int X509v3_get_ext_count(const &#10;# 1052 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                              struct stack_st_X509_EXTENSION &#10;# 1052 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                       *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const &#10;# 1052 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                              struct stack_st_X509_EXTENSION" id="x" text="const &#10;# 1052 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                              struct stack_st_X509_EXTENSION &#10;# 1052 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                       *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509v3_get_ext_by_NID" text="int X509v3_get_ext_by_NID(const &#10;# 1053 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                               struct stack_st_X509_EXTENSION &#10;# 1053 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                        *x,&#10;                          int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const &#10;# 1053 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                               struct stack_st_X509_EXTENSION" id="x" text="const &#10;# 1053 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                               struct stack_st_X509_EXTENSION &#10;# 1053 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                        *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509v3_get_ext_by_OBJ" text="int X509v3_get_ext_by_OBJ(const &#10;# 1055 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                               struct stack_st_X509_EXTENSION &#10;# 1055 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                        *x,&#10;                          ASN1_OBJECT *obj, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const &#10;# 1055 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                               struct stack_st_X509_EXTENSION" id="x" text="const &#10;# 1055 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                               struct stack_st_X509_EXTENSION &#10;# 1055 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                        *x" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509v3_get_ext_by_critical" text="int X509v3_get_ext_by_critical(const &#10;# 1057 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                    struct stack_st_X509_EXTENSION &#10;# 1057 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                             *x,&#10;                               int crit, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const &#10;# 1057 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                    struct stack_st_X509_EXTENSION" id="x" text="const &#10;# 1057 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                    struct stack_st_X509_EXTENSION &#10;# 1057 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                             *x" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509v3_get_ext" text="X509_EXTENSION *X509v3_get_ext(const &#10;# 1059 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                    struct stack_st_X509_EXTENSION &#10;# 1059 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                             *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const &#10;# 1059 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                    struct stack_st_X509_EXTENSION" id="x" text="const &#10;# 1059 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                    struct stack_st_X509_EXTENSION &#10;# 1059 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                             *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509v3_delete_ext" text="X509_EXTENSION *X509v3_delete_ext(&#10;# 1060 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                 struct stack_st_X509_EXTENSION &#10;# 1060 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                          *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct stack_st_X509_EXTENSION" id="x" text="struct stack_st_X509_EXTENSION &#10;# 1060 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                          *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_EXTENSION" id="X509v3_add_ext" text="struct stack_st_X509_EXTENSION &#10;# 1061 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                        *X509v3_add_ext(&#10;# 1061 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                        struct stack_st_X509_EXTENSION &#10;# 1061 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                                 **x,&#10;                                         X509_EXTENSION *ex, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct stack_st_X509_EXTENSION" id="x" text="struct stack_st_X509_EXTENSION &#10;# 1061 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                                 **x" mod=""/>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_get_ext_count" text="int X509_get_ext_count(X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_get_ext_by_NID" text="int X509_get_ext_by_NID(X509 *x, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_get_ext_by_OBJ" text="int X509_get_ext_by_OBJ(X509 *x, ASN1_OBJECT *obj, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_get_ext_by_critical" text="int X509_get_ext_by_critical(X509 *x, int crit, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509_get_ext" text="X509_EXTENSION *X509_get_ext(X509 *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509_delete_ext" text="X509_EXTENSION *X509_delete_ext(X509 *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_add_ext" text="int X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_get_ext_d2i" text="void *X509_get_ext_d2i(X509 *x, int nid, int *crit, int *idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="crit" text="int *crit" mod=""/>
    <arg type="int" id="idx" text="int *idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_add1_ext_i2d" text="int X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,&#10;                      unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_get_ext_count" text="int X509_CRL_get_ext_count(X509_CRL *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_get_ext_by_NID" text="int X509_CRL_get_ext_by_NID(X509_CRL *x, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_get_ext_by_OBJ" text="int X509_CRL_get_ext_by_OBJ(X509_CRL *x, ASN1_OBJECT *obj, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_get_ext_by_critical" text="int X509_CRL_get_ext_by_critical(X509_CRL *x, int crit, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509_CRL_get_ext" text="X509_EXTENSION *X509_CRL_get_ext(X509_CRL *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509_CRL_delete_ext" text="X509_EXTENSION *X509_CRL_delete_ext(X509_CRL *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_add_ext" text="int X509_CRL_add_ext(X509_CRL *x, X509_EXTENSION *ex, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_CRL_get_ext_d2i" text="void *X509_CRL_get_ext_d2i(X509_CRL *x, int nid, int *crit, int *idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="crit" text="int *crit" mod=""/>
    <arg type="int" id="idx" text="int *idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_CRL_add1_ext_i2d" text="int X509_CRL_add1_ext_i2d(X509_CRL *x, int nid, void *value, int crit,&#10;                          unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_CRL" id="x" text="X509_CRL *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REVOKED_get_ext_count" text="int X509_REVOKED_get_ext_count(X509_REVOKED *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="x" text="X509_REVOKED *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REVOKED_get_ext_by_NID" text="int X509_REVOKED_get_ext_by_NID(X509_REVOKED *x, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="x" text="X509_REVOKED *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REVOKED_get_ext_by_OBJ" text="int X509_REVOKED_get_ext_by_OBJ(X509_REVOKED *x, ASN1_OBJECT *obj,&#10;                                int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="x" text="X509_REVOKED *x" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REVOKED_get_ext_by_critical" text="int X509_REVOKED_get_ext_by_critical(X509_REVOKED *x, int crit, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="x" text="X509_REVOKED *x" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509_REVOKED_get_ext" text="X509_EXTENSION *X509_REVOKED_get_ext(X509_REVOKED *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="x" text="X509_REVOKED *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509_REVOKED_delete_ext" text="X509_EXTENSION *X509_REVOKED_delete_ext(X509_REVOKED *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="x" text="X509_REVOKED *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REVOKED_add_ext" text="int X509_REVOKED_add_ext(X509_REVOKED *x, X509_EXTENSION *ex, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="x" text="X509_REVOKED *x" mod=""/>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_REVOKED_get_ext_d2i" text="void *X509_REVOKED_get_ext_d2i(X509_REVOKED *x, int nid, int *crit, int *idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="x" text="X509_REVOKED *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="crit" text="int *crit" mod=""/>
    <arg type="int" id="idx" text="int *idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_REVOKED_add1_ext_i2d" text="int X509_REVOKED_add1_ext_i2d(X509_REVOKED *x, int nid, void *value, int crit,&#10;                              unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_REVOKED" id="x" text="X509_REVOKED *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509_EXTENSION_create_by_NID" text="X509_EXTENSION *X509_EXTENSION_create_by_NID(X509_EXTENSION **ex,&#10;                                             int nid, int crit,&#10;                                             ASN1_OCTET_STRING *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION **ex" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="data" text="ASN1_OCTET_STRING *data" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509_EXTENSION_create_by_OBJ" text="X509_EXTENSION *X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex,&#10;                                             ASN1_OBJECT *obj, int crit,&#10;                                             ASN1_OCTET_STRING *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION **ex" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="data" text="ASN1_OCTET_STRING *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_EXTENSION_set_object" text="int X509_EXTENSION_set_object(X509_EXTENSION *ex, ASN1_OBJECT *obj)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_EXTENSION_set_critical" text="int X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_EXTENSION_set_data" text="int X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="data" text="ASN1_OCTET_STRING *data" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="X509_EXTENSION_get_object" text="ASN1_OBJECT *X509_EXTENSION_get_object(X509_EXTENSION *ex)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="X509_EXTENSION_get_data" text="ASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *ne)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="ne" text="X509_EXTENSION *ne" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_EXTENSION_get_critical" text="int X509_EXTENSION_get_critical(X509_EXTENSION *ex)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509at_get_attr_count" text="int X509at_get_attr_count(const &#10;# 1111 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                               struct stack_st_X509_ATTRIBUTE &#10;# 1111 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                        *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const &#10;# 1111 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                               struct stack_st_X509_ATTRIBUTE" id="x" text="const &#10;# 1111 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                               struct stack_st_X509_ATTRIBUTE &#10;# 1111 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                        *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509at_get_attr_by_NID" text="int X509at_get_attr_by_NID(const &#10;# 1112 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                struct stack_st_X509_ATTRIBUTE &#10;# 1112 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                         *x, int nid,&#10;                           int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const &#10;# 1112 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                struct stack_st_X509_ATTRIBUTE" id="x" text="const &#10;# 1112 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                struct stack_st_X509_ATTRIBUTE &#10;# 1112 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                         *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509at_get_attr_by_OBJ" text="int X509at_get_attr_by_OBJ(const &#10;# 1114 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                struct stack_st_X509_ATTRIBUTE &#10;# 1114 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                         *sk,&#10;                           ASN1_OBJECT *obj, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const &#10;# 1114 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                struct stack_st_X509_ATTRIBUTE" id="sk" text="const &#10;# 1114 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                struct stack_st_X509_ATTRIBUTE &#10;# 1114 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                         *sk" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="X509at_get_attr" text="X509_ATTRIBUTE *X509at_get_attr(const &#10;# 1116 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                     struct stack_st_X509_ATTRIBUTE &#10;# 1116 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                              *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const &#10;# 1116 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                     struct stack_st_X509_ATTRIBUTE" id="x" text="const &#10;# 1116 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                     struct stack_st_X509_ATTRIBUTE &#10;# 1116 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                              *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="X509at_delete_attr" text="X509_ATTRIBUTE *X509at_delete_attr(&#10;# 1117 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                  struct stack_st_X509_ATTRIBUTE &#10;# 1117 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                           *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct stack_st_X509_ATTRIBUTE" id="x" text="struct stack_st_X509_ATTRIBUTE &#10;# 1117 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                           *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_ATTRIBUTE" id="X509at_add1_attr" text="struct stack_st_X509_ATTRIBUTE &#10;# 1118 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                        *X509at_add1_attr(&#10;# 1118 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                          struct stack_st_X509_ATTRIBUTE &#10;# 1118 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                                   **x,&#10;                                           X509_ATTRIBUTE *attr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct stack_st_X509_ATTRIBUTE" id="x" text="struct stack_st_X509_ATTRIBUTE &#10;# 1118 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                                   **x" mod=""/>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE *attr" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_ATTRIBUTE" id="X509at_add1_attr_by_OBJ" text="struct stack_st_X509_ATTRIBUTE &#10;# 1120 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                        *X509at_add1_attr_by_OBJ(&#10;# 1120 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                                 struct stack_st_X509_ATTRIBUTE&#10;                                                  &#10;# 1121 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                 **x, const ASN1_OBJECT *obj,&#10;                                                  int type,&#10;                                                  const unsigned char *bytes,&#10;                                                  int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct stack_st_X509_ATTRIBUTE" id="x" text="struct stack_st_X509_ATTRIBUTE&#10;                                                  &#10;# 1121 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                 **x" mod=""/>
    <arg type="const ASN1_OBJECT" id="obj" text="const ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_ATTRIBUTE" id="X509at_add1_attr_by_NID" text="struct stack_st_X509_ATTRIBUTE &#10;# 1125 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                        *X509at_add1_attr_by_NID(&#10;# 1125 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                                 struct stack_st_X509_ATTRIBUTE&#10;                                                  &#10;# 1126 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                 **x, int nid, int type,&#10;                                                  const unsigned char *bytes,&#10;                                                  int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct stack_st_X509_ATTRIBUTE" id="x" text="struct stack_st_X509_ATTRIBUTE&#10;                                                  &#10;# 1126 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                 **x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_ATTRIBUTE" id="X509at_add1_attr_by_txt" text="struct stack_st_X509_ATTRIBUTE &#10;# 1129 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                        *X509at_add1_attr_by_txt(&#10;# 1129 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                                 struct stack_st_X509_ATTRIBUTE&#10;                                                  &#10;# 1130 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                 **x, const char *attrname,&#10;                                                  int type,&#10;                                                  const unsigned char *bytes,&#10;                                                  int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct stack_st_X509_ATTRIBUTE" id="x" text="struct stack_st_X509_ATTRIBUTE&#10;                                                  &#10;# 1130 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                 **x" mod=""/>
    <arg type="const char" id="attrname" text="const char *attrname" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509at_get0_data_by_OBJ" text="void *X509at_get0_data_by_OBJ(&#10;# 1134 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                             struct stack_st_X509_ATTRIBUTE &#10;# 1134 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                      *x, ASN1_OBJECT *obj,&#10;                              int lastpos, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct stack_st_X509_ATTRIBUTE" id="x" text="struct stack_st_X509_ATTRIBUTE &#10;# 1134 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                      *x" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="X509_ATTRIBUTE_create_by_NID" text="X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid,&#10;                                             int atrtype, const void *data,&#10;                                             int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE **attr" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="atrtype" text="int atrtype" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="X509_ATTRIBUTE_create_by_OBJ" text="X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr,&#10;                                             const ASN1_OBJECT *obj,&#10;                                             int atrtype, const void *data,&#10;                                             int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE **attr" mod=""/>
    <arg type="const ASN1_OBJECT" id="obj" text="const ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="atrtype" text="int atrtype" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="X509_ATTRIBUTE_create_by_txt" text="X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr,&#10;                                             const char *atrname, int type,&#10;                                             const unsigned char *bytes,&#10;                                             int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE **attr" mod=""/>
    <arg type="const char" id="atrname" text="const char *atrname" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_ATTRIBUTE_set1_object" text="int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE *attr" mod=""/>
    <arg type="const ASN1_OBJECT" id="obj" text="const ASN1_OBJECT *obj" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_ATTRIBUTE_set1_data" text="int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype,&#10;                             const void *data, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE *attr" mod=""/>
    <arg type="int" id="attrtype" text="int attrtype" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_ATTRIBUTE_get0_data" text="void *X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx, int atrtype,&#10;                               void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE *attr" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="int" id="atrtype" text="int atrtype" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_ATTRIBUTE_count" text="int X509_ATTRIBUTE_count(X509_ATTRIBUTE *attr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE *attr" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="X509_ATTRIBUTE_get0_object" text="ASN1_OBJECT *X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE *attr" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TYPE" id="X509_ATTRIBUTE_get0_type" text="ASN1_TYPE *X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE *attr" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_get_attr_count" text="int EVP_PKEY_get_attr_count(const EVP_PKEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const EVP_PKEY" id="key" text="const EVP_PKEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_get_attr_by_NID" text="int EVP_PKEY_get_attr_by_NID(const EVP_PKEY *key, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const EVP_PKEY" id="key" text="const EVP_PKEY *key" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_get_attr_by_OBJ" text="int EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY *key, ASN1_OBJECT *obj,&#10;                             int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const EVP_PKEY" id="key" text="const EVP_PKEY *key" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="EVP_PKEY_get_attr" text="X509_ATTRIBUTE *EVP_PKEY_get_attr(const EVP_PKEY *key, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const EVP_PKEY" id="key" text="const EVP_PKEY *key" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="EVP_PKEY_delete_attr" text="X509_ATTRIBUTE *EVP_PKEY_delete_attr(EVP_PKEY *key, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EVP_PKEY" id="key" text="EVP_PKEY *key" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_add1_attr" text="int EVP_PKEY_add1_attr(EVP_PKEY *key, X509_ATTRIBUTE *attr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EVP_PKEY" id="key" text="EVP_PKEY *key" mod=""/>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE *attr" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_add1_attr_by_OBJ" text="int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY *key,&#10;                              const ASN1_OBJECT *obj, int type,&#10;                              const unsigned char *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EVP_PKEY" id="key" text="EVP_PKEY *key" mod=""/>
    <arg type="const ASN1_OBJECT" id="obj" text="const ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_add1_attr_by_NID" text="int EVP_PKEY_add1_attr_by_NID(EVP_PKEY *key,&#10;                              int nid, int type,&#10;                              const unsigned char *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EVP_PKEY" id="key" text="EVP_PKEY *key" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="EVP_PKEY_add1_attr_by_txt" text="int EVP_PKEY_add1_attr_by_txt(EVP_PKEY *key,&#10;                              const char *attrname, int type,&#10;                              const unsigned char *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EVP_PKEY" id="key" text="EVP_PKEY *key" mod=""/>
    <arg type="const char" id="attrname" text="const char *attrname" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const unsigned char" id="bytes" text="const unsigned char *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_verify_cert" text="int X509_verify_cert(X509_STORE_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="X509_find_by_issuer_and_serial" text="X509 *X509_find_by_issuer_and_serial(&#10;# 1176 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                                    struct stack_st_X509 &#10;# 1176 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                   *sk, X509_NAME *name,&#10;                                     ASN1_INTEGER *serial)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct stack_st_X509" id="sk" text="struct stack_st_X509 &#10;# 1176 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                                   *sk" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
    <arg type="ASN1_INTEGER" id="serial" text="ASN1_INTEGER *serial" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="X509_find_by_subject" text="X509 *X509_find_by_subject(&#10;# 1178 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;                          struct stack_st_X509 &#10;# 1178 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                         *sk, X509_NAME *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="struct stack_st_X509" id="sk" text="struct stack_st_X509 &#10;# 1178 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;                                         *sk" mod=""/>
    <arg type="X509_NAME" id="name" text="X509_NAME *name" mod=""/>
  </args>
</fdecl>
<fdecl type="PBEPARAM" id="PBEPARAM_new" text="PBEPARAM &#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBEPARAM_new&#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON37" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PBEPARAM_free" text="void &#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBEPARAM_free&#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBEPARAM &#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PBEPARAM" id="a" text="PBEPARAM &#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PBEPARAM" id="d2i_PBEPARAM" text="PBEPARAM &#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_PBEPARAM(&#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBEPARAM &#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PBEPARAM" id="a" text="PBEPARAM &#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PBEPARAM" text="int i2d_PBEPARAM(&#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBEPARAM &#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PBEPARAM" id="a" text="PBEPARAM &#10;# 1180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PBE2PARAM" id="PBE2PARAM_new" text="PBE2PARAM &#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBE2PARAM_new&#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON38" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PBE2PARAM_free" text="void &#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBE2PARAM_free&#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBE2PARAM &#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PBE2PARAM" id="a" text="PBE2PARAM &#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PBE2PARAM" id="d2i_PBE2PARAM" text="PBE2PARAM &#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_PBE2PARAM(&#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBE2PARAM &#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PBE2PARAM" id="a" text="PBE2PARAM &#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PBE2PARAM" text="int i2d_PBE2PARAM(&#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBE2PARAM &#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PBE2PARAM" id="a" text="PBE2PARAM &#10;# 1181 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PBKDF2PARAM" id="PBKDF2PARAM_new" text="PBKDF2PARAM &#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBKDF2PARAM_new&#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON39" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PBKDF2PARAM_free" text="void &#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBKDF2PARAM_free&#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBKDF2PARAM &#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PBKDF2PARAM" id="a" text="PBKDF2PARAM &#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PBKDF2PARAM" id="d2i_PBKDF2PARAM" text="PBKDF2PARAM &#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_PBKDF2PARAM(&#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBKDF2PARAM &#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PBKDF2PARAM" id="a" text="PBKDF2PARAM &#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PBKDF2PARAM" text="int i2d_PBKDF2PARAM(&#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PBKDF2PARAM &#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PBKDF2PARAM" id="a" text="PBKDF2PARAM &#10;# 1182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS5_pbe_set0_algor" text="int PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter,&#10;                         const unsigned char *salt, int saltlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_ALGOR" id="algor" text="X509_ALGOR *algor" mod=""/>
    <arg type="int" id="alg" text="int alg" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="const unsigned char" id="salt" text="const unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ALGOR" id="PKCS5_pbe_set" text="X509_ALGOR *PKCS5_pbe_set(int alg, int iter,&#10;                          const unsigned char *salt, int saltlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="alg" text="int alg" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="const unsigned char" id="salt" text="const unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ALGOR" id="PKCS5_pbe2_set" text="X509_ALGOR *PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,&#10;                           unsigned char *salt, int saltlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="unsigned char" id="salt" text="unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ALGOR" id="PKCS5_pbe2_set_iv" text="X509_ALGOR *PKCS5_pbe2_set_iv(const EVP_CIPHER *cipher, int iter,&#10;                              unsigned char *salt, int saltlen,&#10;                              unsigned char *aiv, int prf_nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="unsigned char" id="salt" text="unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
    <arg type="unsigned char" id="aiv" text="unsigned char *aiv" mod=""/>
    <arg type="int" id="prf_nid" text="int prf_nid" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ALGOR" id="PKCS5_pbkdf2_set" text="X509_ALGOR *PKCS5_pbkdf2_set(int iter, unsigned char *salt, int saltlen,&#10;                             int prf_nid, int keylen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="unsigned char" id="salt" text="unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
    <arg type="int" id="prf_nid" text="int prf_nid" mod=""/>
    <arg type="int" id="keylen" text="int keylen" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS8_PRIV_KEY_INFO" id="PKCS8_PRIV_KEY_INFO_new" text="PKCS8_PRIV_KEY_INFO &#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*&#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PKCS8_PRIV_KEY_INFO_new&#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON40" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS8_PRIV_KEY_INFO_free" text="void &#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PKCS8_PRIV_KEY_INFO_free&#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;(&#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PKCS8_PRIV_KEY_INFO &#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PKCS8_PRIV_KEY_INFO" id="a" text="PKCS8_PRIV_KEY_INFO &#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS8_PRIV_KEY_INFO" id="d2i_PKCS8_PRIV_KEY_INFO" text="PKCS8_PRIV_KEY_INFO &#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*d2i_PKCS8_PRIV_KEY_INFO(&#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PKCS8_PRIV_KEY_INFO &#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PKCS8_PRIV_KEY_INFO" id="a" text="PKCS8_PRIV_KEY_INFO &#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS8_PRIV_KEY_INFO" text="int i2d_PKCS8_PRIV_KEY_INFO(&#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot;&#10;PKCS8_PRIV_KEY_INFO &#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PKCS8_PRIV_KEY_INFO" id="a" text="PKCS8_PRIV_KEY_INFO &#10;# 1200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="EVP_PKCS82PKEY" text="EVP_PKEY *EVP_PKCS82PKEY(PKCS8_PRIV_KEY_INFO *p8)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PKCS8_PRIV_KEY_INFO" id="p8" text="PKCS8_PRIV_KEY_INFO *p8" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS8_PRIV_KEY_INFO" id="EVP_PKEY2PKCS8" text="PKCS8_PRIV_KEY_INFO *EVP_PKEY2PKCS8(EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS8_PRIV_KEY_INFO" id="EVP_PKEY2PKCS8_broken" text="PKCS8_PRIV_KEY_INFO *EVP_PKEY2PKCS8_broken(EVP_PKEY *pkey, int broken)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="int" id="broken" text="int broken" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS8_PRIV_KEY_INFO" id="PKCS8_set_broken" text="PKCS8_PRIV_KEY_INFO *PKCS8_set_broken(PKCS8_PRIV_KEY_INFO *p8, int broken)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PKCS8_PRIV_KEY_INFO" id="p8" text="PKCS8_PRIV_KEY_INFO *p8" mod=""/>
    <arg type="int" id="broken" text="int broken" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS8_pkey_set0" text="int PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO *priv, ASN1_OBJECT *aobj,&#10;                    int version, int ptype, void *pval,&#10;                    unsigned char *penc, int penclen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="PKCS8_PRIV_KEY_INFO" id="priv" text="PKCS8_PRIV_KEY_INFO *priv" mod=""/>
    <arg type="ASN1_OBJECT" id="aobj" text="ASN1_OBJECT *aobj" mod=""/>
    <arg type="int" id="version" text="int version" mod=""/>
    <arg type="int" id="ptype" text="int ptype" mod=""/>
    <arg type="void" id="pval" text="void *pval" mod=""/>
    <arg type="unsigned char" id="penc" text="unsigned char *penc" mod=""/>
    <arg type="int" id="penclen" text="int penclen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS8_pkey_get0" text="int PKCS8_pkey_get0(ASN1_OBJECT **ppkalg,&#10;                    const unsigned char **pk, int *ppklen,&#10;                    X509_ALGOR **pa, PKCS8_PRIV_KEY_INFO *p8)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="ASN1_OBJECT" id="ppkalg" text="ASN1_OBJECT **ppkalg" mod=""/>
    <arg type="const unsigned char" id="pk" text="const unsigned char **pk" mod=""/>
    <arg type="int" id="ppklen" text="int *ppklen" mod=""/>
    <arg type="X509_ALGOR" id="pa" text="X509_ALGOR **pa" mod=""/>
    <arg type="PKCS8_PRIV_KEY_INFO" id="p8" text="PKCS8_PRIV_KEY_INFO *p8" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_PUBKEY_set0_param" text="int X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj,&#10;                           int ptype, void *pval,&#10;                           unsigned char *penc, int penclen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_PUBKEY" id="pub" text="X509_PUBKEY *pub" mod=""/>
    <arg type="ASN1_OBJECT" id="aobj" text="ASN1_OBJECT *aobj" mod=""/>
    <arg type="int" id="ptype" text="int ptype" mod=""/>
    <arg type="void" id="pval" text="void *pval" mod=""/>
    <arg type="unsigned char" id="penc" text="unsigned char *penc" mod=""/>
    <arg type="int" id="penclen" text="int penclen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_PUBKEY_get0_param" text="int X509_PUBKEY_get0_param(ASN1_OBJECT **ppkalg,&#10;                           const unsigned char **pk, int *ppklen,&#10;                           X509_ALGOR **pa, X509_PUBKEY *pub)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="ASN1_OBJECT" id="ppkalg" text="ASN1_OBJECT **ppkalg" mod=""/>
    <arg type="const unsigned char" id="pk" text="const unsigned char **pk" mod=""/>
    <arg type="int" id="ppklen" text="int *ppklen" mod=""/>
    <arg type="X509_ALGOR" id="pa" text="X509_ALGOR **pa" mod=""/>
    <arg type="X509_PUBKEY" id="pub" text="X509_PUBKEY *pub" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_check_trust" text="int X509_check_trust(X509 *x, int id, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="int" id="id" text="int id" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_TRUST_get_count" text="int X509_TRUST_get_count(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON41" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_TRUST" id="X509_TRUST_get0" text="X509_TRUST *X509_TRUST_get0(int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_TRUST_get_by_id" text="int X509_TRUST_get_by_id(int id)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="id" text="int id" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_TRUST_add" text="int X509_TRUST_add(int id, int flags, int (*ck) (X509_TRUST *, X509 *, int),&#10;                   char *name, int arg1, void *arg2)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="int" id="id" text="int id" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="int" id="ck" text="int (*ck) (X509_TRUST *, X509 *, int)" mod=""/>
    <arg type="char" id="name" text="char *name" mod=""/>
    <arg type="int" id="arg1" text="int arg1" mod=""/>
    <arg type="void" id="arg2" text="void *arg2" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_TRUST_cleanup" text="void X509_TRUST_cleanup(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON42" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_TRUST_get_flags" text="int X509_TRUST_get_flags(X509_TRUST *xp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_TRUST" id="xp" text="X509_TRUST *xp" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="X509_TRUST_get0_name" text="char *X509_TRUST_get0_name(X509_TRUST *xp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_TRUST" id="xp" text="X509_TRUST *xp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_TRUST_get_trust" text="int X509_TRUST_get_trust(X509_TRUST *xp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="X509_TRUST" id="xp" text="X509_TRUST *xp" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_X509_strings" text="void ERR_load_X509_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509.h">
  <args>
    <arg type="void" id="ANON43" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="CONF_METHOD" id="ANON0" text="struct conf_method_st {&#10;    const char *name;&#10;    CONF *(*create) (CONF_METHOD *meth);&#10;    int (*init) (CONF *conf);&#10;    int (*destroy) (CONF *conf);&#10;    int (*destroy_data) (CONF *conf);&#10;    int (*load_bio) (CONF *conf, BIO *bp, long *eline);&#10;    int (*dump) (const CONF *conf, BIO *bp);&#10;    int (*is_number) (const CONF *conf, char c);&#10;    int (*to_int) (const CONF *conf, char c);&#10;    int (*load) (CONF *conf, const char *name, long *eline);&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF_METHOD" id="meth" text="CONF_METHOD *meth" mod=""/>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="long" id="eline" text="long *eline" mod=""/>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="char" id="c" text="char c" mod=""/>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="char" id="c" text="char c" mod=""/>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="long" id="eline" text="long *eline" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="conf_init_func" text="typedef int conf_init_func (CONF_IMODULE *md, const CONF *cnf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF_IMODULE" id="md" text="CONF_IMODULE *md" mod=""/>
    <arg type="const CONF" id="cnf" text="const CONF *cnf" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="conf_finish_func" text="typedef void conf_finish_func (CONF_IMODULE *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF_IMODULE" id="md" text="CONF_IMODULE *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CONF_set_default_method" text="int CONF_set_default_method(CONF_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF_METHOD" id="meth" text="CONF_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CONF_set_nconf" text="void CONF_set_nconf(CONF *conf, &#10;# 120 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot; 3 4&#10;                               struct lhash_st_CONF_VALUE &#10;# 120 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                                    *hash)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="struct lhash_st_CONF_VALUE" id="hash" text="struct lhash_st_CONF_VALUE &#10;# 120 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                                    *hash" mod=""/>
  </args>
</fdecl>
<fdecl type="struct lhash_st_CONF_VALUE" id="CONF_load" text="struct lhash_st_CONF_VALUE &#10;# 121 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                    *CONF_load(&#10;# 121 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot; 3 4&#10;                               struct lhash_st_CONF_VALUE &#10;# 121 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                                    *conf, const char *file,&#10;                                long *eline)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 121 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                                    *conf" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="long" id="eline" text="long *eline" mod=""/>
  </args>
</fdecl>
<fdecl type="struct lhash_st_CONF_VALUE" id="CONF_load_fp" text="struct lhash_st_CONF_VALUE &#10;# 124 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                    *CONF_load_fp(&#10;# 124 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot; 3 4&#10;                                  struct lhash_st_CONF_VALUE &#10;# 124 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                                       *conf, FILE *fp,&#10;                                   long *eline)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 124 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                                       *conf" mod=""/>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="long" id="eline" text="long *eline" mod=""/>
  </args>
</fdecl>
<fdecl type="struct lhash_st_CONF_VALUE" id="CONF_load_bio" text="struct lhash_st_CONF_VALUE &#10;# 127 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                    *CONF_load_bio(&#10;# 127 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot; 3 4&#10;                                   struct lhash_st_CONF_VALUE &#10;# 127 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                                        *conf, BIO *bp,&#10;                                    long *eline)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 127 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                                        *conf" mod=""/>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="long" id="eline" text="long *eline" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_CONF_VALUE" id="CONF_get_section" text="struct stack_st_CONF_VALUE &#10;# 129 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                    *CONF_get_section(&#10;# 129 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot; 3 4&#10;                                      struct lhash_st_CONF_VALUE &#10;# 129 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                                           *conf,&#10;                                       const char *section)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 129 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                                           *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="CONF_get_string" text="char *CONF_get_string(&#10;# 131 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot; 3 4&#10;                     struct lhash_st_CONF_VALUE &#10;# 131 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                          *conf, const char *group,&#10;                      const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 131 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                          *conf" mod=""/>
    <arg type="const char" id="group" text="const char *group" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="CONF_get_number" text="long CONF_get_number(&#10;# 133 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot; 3 4&#10;                    struct lhash_st_CONF_VALUE &#10;# 133 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                         *conf, const char *group,&#10;                     const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 133 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                         *conf" mod=""/>
    <arg type="const char" id="group" text="const char *group" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CONF_free" text="void CONF_free(&#10;# 135 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot; 3 4&#10;              struct lhash_st_CONF_VALUE &#10;# 135 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                   *conf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 135 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                   *conf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CONF_dump_fp" text="int CONF_dump_fp(&#10;# 136 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot; 3 4&#10;                struct lhash_st_CONF_VALUE &#10;# 136 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                     *conf, FILE *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 136 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                     *conf" mod=""/>
    <arg type="FILE" id="out" text="FILE *out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CONF_dump_bio" text="int CONF_dump_bio(&#10;# 137 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot; 3 4&#10;                 struct lhash_st_CONF_VALUE &#10;# 137 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                      *conf, BIO *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 137 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                                      *conf" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OPENSSL_config" text="void OPENSSL_config(const char *config_name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const char" id="config_name" text="const char *config_name" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OPENSSL_no_config" text="void OPENSSL_no_config(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="CONF" id="NCONF_new" text="CONF *NCONF_new(CONF_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF_METHOD" id="meth" text="CONF_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="CONF_METHOD" id="NCONF_default" text="CONF_METHOD *NCONF_default(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="CONF_METHOD" id="NCONF_WIN32" text="CONF_METHOD *NCONF_WIN32(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="NCONF_free" text="void NCONF_free(CONF *conf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="NCONF_free_data" text="void NCONF_free_data(CONF *conf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="NCONF_load" text="int NCONF_load(CONF *conf, const char *file, long *eline)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="long" id="eline" text="long *eline" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="NCONF_load_fp" text="int NCONF_load_fp(CONF *conf, FILE *fp, long *eline)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="long" id="eline" text="long *eline" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="NCONF_load_bio" text="int NCONF_load_bio(CONF *conf, BIO *bp, long *eline)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="long" id="eline" text="long *eline" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_CONF_VALUE" id="NCONF_get_section" text="struct stack_st_CONF_VALUE &#10;# 168 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h&quot;&#10;                    *NCONF_get_section(const CONF *conf,&#10;                                        const char *section)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="NCONF_get_string" text="char *NCONF_get_string(const CONF *conf, const char *group, const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="const char" id="group" text="const char *group" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="NCONF_get_number_e" text="int NCONF_get_number_e(const CONF *conf, const char *group, const char *name,&#10;                       long *result)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="const char" id="group" text="const char *group" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="long" id="result" text="long *result" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="NCONF_dump_fp" text="int NCONF_dump_fp(const CONF *conf, FILE *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="FILE" id="out" text="FILE *out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="NCONF_dump_bio" text="int NCONF_dump_bio(const CONF *conf, BIO *out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CONF_modules_load" text="int CONF_modules_load(const CONF *cnf, const char *appname,&#10;                      unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const CONF" id="cnf" text="const CONF *cnf" mod=""/>
    <arg type="const char" id="appname" text="const char *appname" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CONF_modules_load_file" text="int CONF_modules_load_file(const char *filename, const char *appname,&#10;                           unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const char" id="filename" text="const char *filename" mod=""/>
    <arg type="const char" id="appname" text="const char *appname" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CONF_modules_unload" text="void CONF_modules_unload(int all)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="int" id="all" text="int all" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CONF_modules_finish" text="void CONF_modules_finish(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CONF_modules_free" text="void CONF_modules_free(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CONF_module_add" text="int CONF_module_add(const char *name, conf_init_func *ifunc,&#10;                    conf_finish_func *ffunc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="conf_init_func" id="ifunc" text="conf_init_func *ifunc" mod=""/>
    <arg type="conf_finish_func" id="ffunc" text="conf_finish_func *ffunc" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="CONF_imodule_get_name" text="const char *CONF_imodule_get_name(const CONF_IMODULE *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const CONF_IMODULE" id="md" text="const CONF_IMODULE *md" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="CONF_imodule_get_value" text="const char *CONF_imodule_get_value(const CONF_IMODULE *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const CONF_IMODULE" id="md" text="const CONF_IMODULE *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CONF_imodule_get_usr_data" text="void *CONF_imodule_get_usr_data(const CONF_IMODULE *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const CONF_IMODULE" id="md" text="const CONF_IMODULE *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CONF_imodule_set_usr_data" text="void CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF_IMODULE" id="md" text="CONF_IMODULE *md" mod=""/>
    <arg type="void" id="usr_data" text="void *usr_data" mod=""/>
  </args>
</fdecl>
<fdecl type="CONF_MODULE" id="CONF_imodule_get_module" text="CONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const CONF_IMODULE" id="md" text="const CONF_IMODULE *md" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="CONF_imodule_get_flags" text="unsigned long CONF_imodule_get_flags(const CONF_IMODULE *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const CONF_IMODULE" id="md" text="const CONF_IMODULE *md" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CONF_imodule_set_flags" text="void CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF_IMODULE" id="md" text="CONF_IMODULE *md" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CONF_module_get_usr_data" text="void *CONF_module_get_usr_data(CONF_MODULE *pmod)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF_MODULE" id="pmod" text="CONF_MODULE *pmod" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CONF_module_set_usr_data" text="void CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="CONF_MODULE" id="pmod" text="CONF_MODULE *pmod" mod=""/>
    <arg type="void" id="usr_data" text="void *usr_data" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="CONF_get1_default_config_file" text="char *CONF_get1_default_config_file(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CONF_parse_list" text="int CONF_parse_list(const char *list, int sep, int nospc,&#10;                    int (*list_cb) (const char *elem, int len, void *usr),&#10;                    void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="const char" id="list" text="const char *list" mod=""/>
    <arg type="int" id="sep" text="int sep" mod=""/>
    <arg type="int" id="nospc" text="int nospc" mod=""/>
    <arg type="int" id="list_cb" text="int (*list_cb) (const char *elem, int len, void *usr)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OPENSSL_load_builtin_modules" text="void OPENSSL_load_builtin_modules(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_CONF_strings" text="void ERR_load_CONF_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="CONF_VALUE" id="_CONF_new_section" text="CONF_VALUE *_CONF_new_section(CONF *conf, const char *section)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf_api.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
  </args>
</fdecl>
<fdecl type="CONF_VALUE" id="_CONF_get_section" text="CONF_VALUE *_CONF_get_section(const CONF *conf, const char *section)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf_api.h">
  <args>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_CONF_VALUE" id="_CONF_get_section_values" text="struct stack_st_CONF_VALUE &#10;# 74 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf_api.h&quot;&#10;                    *_CONF_get_section_values(const CONF *conf,&#10;                                               const char *section)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf_api.h">
  <args>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="_CONF_add_string" text="int _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf_api.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="CONF_VALUE" id="section" text="CONF_VALUE *section" mod=""/>
    <arg type="CONF_VALUE" id="value" text="CONF_VALUE *value" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="_CONF_get_string" text="char *_CONF_get_string(const CONF *conf, const char *section,&#10;                       const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf_api.h">
  <args>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="_CONF_get_number" text="long _CONF_get_number(const CONF *conf, const char *section,&#10;                      const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf_api.h">
  <args>
    <arg type="const CONF" id="conf" text="const CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="_CONF_new_data" text="int _CONF_new_data(CONF *conf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf_api.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="_CONF_free_data" text="void _CONF_free_data(CONF *conf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/conf_api.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
  </args>
</fdecl>

<fdecl type="OPENSSL_STRING" id="TXT_DB" text="typedef struct txt_db_st {&#10;    int num_fields;&#10;    &#10;# 85 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/txt_db.h&quot; 3 4&#10;   struct stack_st_OPENSSL_PSTRING &#10;# 85 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/txt_db.h&quot;&#10;                             *data;&#10;    &#10;# 86 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/txt_db.h&quot; 3 4&#10;   struct lhash_st_OPENSSL_STRING &#10;# 86 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/txt_db.h&quot;&#10;                            **index;&#10;    int (**qual) (OPENSSL_STRING *);&#10;    long error;&#10;    long arg1;&#10;    long arg2;&#10;    OPENSSL_STRING *arg_row;&#10;} TXT_DB" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/txt_db.h">
  <args>
    <arg type="OPENSSL_STRING" id="ANON0" text="OPENSSL_STRING *" mod=""/>
  </args>
</fdecl>
<fdecl type="TXT_DB" id="TXT_DB_read" text="TXT_DB *TXT_DB_read(BIO *in, int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/txt_db.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="TXT_DB_write" text="long TXT_DB_write(BIO *out, TXT_DB *db)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/txt_db.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="TXT_DB" id="db" text="TXT_DB *db" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TXT_DB_create_index" text="int TXT_DB_create_index(TXT_DB *db, int field, int (*qual) (OPENSSL_STRING *),&#10;                        LHASH_HASH_FN_TYPE hash, LHASH_COMP_FN_TYPE cmp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/txt_db.h">
  <args>
    <arg type="TXT_DB" id="db" text="TXT_DB *db" mod=""/>
    <arg type="int" id="field" text="int field" mod=""/>
    <arg type="int" id="qual" text="int (*qual) (OPENSSL_STRING *)" mod=""/>
    <arg type="LHASH_HASH_FN_TYPE" id="hash" text="LHASH_HASH_FN_TYPE hash" mod=""/>
    <arg type="LHASH_COMP_FN_TYPE" id="cmp" text="LHASH_COMP_FN_TYPE cmp" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TXT_DB_free" text="void TXT_DB_free(TXT_DB *db)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/txt_db.h">
  <args>
    <arg type="TXT_DB" id="db" text="TXT_DB *db" mod=""/>
  </args>
</fdecl>
<fdecl type="OPENSSL_STRING" id="TXT_DB_get_by_index" text="OPENSSL_STRING *TXT_DB_get_by_index(TXT_DB *db, int idx,&#10;                                    OPENSSL_STRING *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/txt_db.h">
  <args>
    <arg type="TXT_DB" id="db" text="TXT_DB *db" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="OPENSSL_STRING" id="value" text="OPENSSL_STRING *value" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TXT_DB_insert" text="int TXT_DB_insert(TXT_DB *db, OPENSSL_STRING *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/txt_db.h">
  <args>
    <arg type="TXT_DB" id="db" text="TXT_DB *db" mod=""/>
    <arg type="OPENSSL_STRING" id="value" text="OPENSSL_STRING *value" mod=""/>
  </args>
</fdecl>

<fdecl type="PKCS7_ISSUER_AND_SERIAL" id="PKCS7_ISSUER_AND_SERIAL_new" text="PKCS7_ISSUER_AND_SERIAL &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*&#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ISSUER_AND_SERIAL_new&#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_ISSUER_AND_SERIAL_free" text="void &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ISSUER_AND_SERIAL_free&#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(&#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ISSUER_AND_SERIAL &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ISSUER_AND_SERIAL" id="a" text="PKCS7_ISSUER_AND_SERIAL &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_ISSUER_AND_SERIAL" id="d2i_PKCS7_ISSUER_AND_SERIAL" text="PKCS7_ISSUER_AND_SERIAL &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*d2i_PKCS7_ISSUER_AND_SERIAL(&#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ISSUER_AND_SERIAL &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ISSUER_AND_SERIAL" id="a" text="PKCS7_ISSUER_AND_SERIAL &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_ISSUER_AND_SERIAL" text="int i2d_PKCS7_ISSUER_AND_SERIAL(&#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ISSUER_AND_SERIAL &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ISSUER_AND_SERIAL" id="a" text="PKCS7_ISSUER_AND_SERIAL &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_ISSUER_AND_SERIAL_digest" text="int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,&#10;                                   const EVP_MD *type, unsigned char *md,&#10;                                   unsigned int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ISSUER_AND_SERIAL" id="data" text="PKCS7_ISSUER_AND_SERIAL *data" mod=""/>
    <arg type="const EVP_MD" id="type" text="const EVP_MD *type" mod=""/>
    <arg type="unsigned char" id="md" text="unsigned char *md" mod=""/>
    <arg type="unsigned int" id="len" text="unsigned int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="d2i_PKCS7_fp" text="PKCS7 *d2i_PKCS7_fp(FILE *fp, PKCS7 **p7)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 **p7" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_fp" text="int i2d_PKCS7_fp(FILE *fp, PKCS7 *p7)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="PKCS7_dup" text="PKCS7 *PKCS7_dup(PKCS7 *p7)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="d2i_PKCS7_bio" text="PKCS7 *d2i_PKCS7_bio(BIO *bp, PKCS7 **p7)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 **p7" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_bio" text="int i2d_PKCS7_bio(BIO *bp, PKCS7 *p7)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_bio_stream" text="int i2d_PKCS7_bio_stream(BIO *out, PKCS7 *p7, BIO *in, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_PKCS7_stream" text="int PEM_write_bio_PKCS7_stream(BIO *out, PKCS7 *p7, BIO *in, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_SIGNER_INFO" id="PKCS7_SIGNER_INFO_new" text="PKCS7_SIGNER_INFO &#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*&#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGNER_INFO_new&#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_SIGNER_INFO_free" text="void &#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGNER_INFO_free&#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(&#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGNER_INFO &#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="a" text="PKCS7_SIGNER_INFO &#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_SIGNER_INFO" id="d2i_PKCS7_SIGNER_INFO" text="PKCS7_SIGNER_INFO &#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*d2i_PKCS7_SIGNER_INFO(&#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGNER_INFO &#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="a" text="PKCS7_SIGNER_INFO &#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_SIGNER_INFO" text="int i2d_PKCS7_SIGNER_INFO(&#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGNER_INFO &#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="a" text="PKCS7_SIGNER_INFO &#10;# 273 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_RECIP_INFO" id="PKCS7_RECIP_INFO_new" text="PKCS7_RECIP_INFO &#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*&#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_RECIP_INFO_new&#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_RECIP_INFO_free" text="void &#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_RECIP_INFO_free&#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(&#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_RECIP_INFO &#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_RECIP_INFO" id="a" text="PKCS7_RECIP_INFO &#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_RECIP_INFO" id="d2i_PKCS7_RECIP_INFO" text="PKCS7_RECIP_INFO &#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*d2i_PKCS7_RECIP_INFO(&#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_RECIP_INFO &#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_RECIP_INFO" id="a" text="PKCS7_RECIP_INFO &#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_RECIP_INFO" text="int i2d_PKCS7_RECIP_INFO(&#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_RECIP_INFO &#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_RECIP_INFO" id="a" text="PKCS7_RECIP_INFO &#10;# 274 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_SIGNED" id="PKCS7_SIGNED_new" text="PKCS7_SIGNED &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*&#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGNED_new&#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_SIGNED_free" text="void &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGNED_free&#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(&#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGNED &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNED" id="a" text="PKCS7_SIGNED &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_SIGNED" id="d2i_PKCS7_SIGNED" text="PKCS7_SIGNED &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*d2i_PKCS7_SIGNED(&#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGNED &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNED" id="a" text="PKCS7_SIGNED &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_SIGNED" text="int i2d_PKCS7_SIGNED(&#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGNED &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNED" id="a" text="PKCS7_SIGNED &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_ENC_CONTENT" id="PKCS7_ENC_CONTENT_new" text="PKCS7_ENC_CONTENT &#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*&#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENC_CONTENT_new&#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_ENC_CONTENT_free" text="void &#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENC_CONTENT_free&#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(&#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENC_CONTENT &#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ENC_CONTENT" id="a" text="PKCS7_ENC_CONTENT &#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_ENC_CONTENT" id="d2i_PKCS7_ENC_CONTENT" text="PKCS7_ENC_CONTENT &#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*d2i_PKCS7_ENC_CONTENT(&#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENC_CONTENT &#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ENC_CONTENT" id="a" text="PKCS7_ENC_CONTENT &#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_ENC_CONTENT" text="int i2d_PKCS7_ENC_CONTENT(&#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENC_CONTENT &#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ENC_CONTENT" id="a" text="PKCS7_ENC_CONTENT &#10;# 276 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_ENVELOPE" id="PKCS7_ENVELOPE_new" text="PKCS7_ENVELOPE &#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*&#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENVELOPE_new&#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_ENVELOPE_free" text="void &#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENVELOPE_free&#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(&#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENVELOPE &#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ENVELOPE" id="a" text="PKCS7_ENVELOPE &#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_ENVELOPE" id="d2i_PKCS7_ENVELOPE" text="PKCS7_ENVELOPE &#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*d2i_PKCS7_ENVELOPE(&#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENVELOPE &#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ENVELOPE" id="a" text="PKCS7_ENVELOPE &#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_ENVELOPE" text="int i2d_PKCS7_ENVELOPE(&#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENVELOPE &#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ENVELOPE" id="a" text="PKCS7_ENVELOPE &#10;# 277 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_SIGN_ENVELOPE" id="PKCS7_SIGN_ENVELOPE_new" text="PKCS7_SIGN_ENVELOPE &#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*&#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGN_ENVELOPE_new&#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_SIGN_ENVELOPE_free" text="void &#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGN_ENVELOPE_free&#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(&#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGN_ENVELOPE &#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGN_ENVELOPE" id="a" text="PKCS7_SIGN_ENVELOPE &#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_SIGN_ENVELOPE" id="d2i_PKCS7_SIGN_ENVELOPE" text="PKCS7_SIGN_ENVELOPE &#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*d2i_PKCS7_SIGN_ENVELOPE(&#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGN_ENVELOPE &#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGN_ENVELOPE" id="a" text="PKCS7_SIGN_ENVELOPE &#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_SIGN_ENVELOPE" text="int i2d_PKCS7_SIGN_ENVELOPE(&#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_SIGN_ENVELOPE &#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGN_ENVELOPE" id="a" text="PKCS7_SIGN_ENVELOPE &#10;# 278 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_DIGEST" id="PKCS7_DIGEST_new" text="PKCS7_DIGEST &#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*&#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_DIGEST_new&#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_DIGEST_free" text="void &#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_DIGEST_free&#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(&#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_DIGEST &#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_DIGEST" id="a" text="PKCS7_DIGEST &#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_DIGEST" id="d2i_PKCS7_DIGEST" text="PKCS7_DIGEST &#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*d2i_PKCS7_DIGEST(&#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_DIGEST &#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_DIGEST" id="a" text="PKCS7_DIGEST &#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_DIGEST" text="int i2d_PKCS7_DIGEST(&#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_DIGEST &#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_DIGEST" id="a" text="PKCS7_DIGEST &#10;# 279 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_ENCRYPT" id="PKCS7_ENCRYPT_new" text="PKCS7_ENCRYPT &#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*&#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENCRYPT_new&#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_ENCRYPT_free" text="void &#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENCRYPT_free&#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(&#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENCRYPT &#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ENCRYPT" id="a" text="PKCS7_ENCRYPT &#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_ENCRYPT" id="d2i_PKCS7_ENCRYPT" text="PKCS7_ENCRYPT &#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*d2i_PKCS7_ENCRYPT(&#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENCRYPT &#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ENCRYPT" id="a" text="PKCS7_ENCRYPT &#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_ENCRYPT" text="int i2d_PKCS7_ENCRYPT(&#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_ENCRYPT &#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_ENCRYPT" id="a" text="PKCS7_ENCRYPT &#10;# 280 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="PKCS7_new" text="PKCS7 &#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*&#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_new&#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="void" id="ANON9" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_free" text="void &#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_free&#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(&#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7 &#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="a" text="PKCS7 &#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="d2i_PKCS7" text="PKCS7 &#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*d2i_PKCS7(&#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7 &#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="a" text="PKCS7 &#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7" text="int i2d_PKCS7(&#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7 &#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="a" text="PKCS7 &#10;# 281 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS7_NDEF" text="int i2d_PKCS7_NDEF(&#10;# 286 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7 &#10;# 286 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="a" text="PKCS7 &#10;# 286 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_print_ctx" text="int &#10;# 287 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7_print_ctx&#10;# 287 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;(BIO *out, &#10;# 287 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;PKCS7 &#10;# 287 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*x, int indent, const ASN1_PCTX *pctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="PKCS7" id="x" text="PKCS7 &#10;# 287 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;*x" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="const ASN1_PCTX" id="pctx" text="const ASN1_PCTX *pctx" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="PKCS7_ctrl" text="long PKCS7_ctrl(PKCS7 *p7, int cmd, long larg, char *parg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="larg" text="long larg" mod=""/>
    <arg type="char" id="parg" text="char *parg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_set_type" text="int PKCS7_set_type(PKCS7 *p7, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_set0_type_other" text="int PKCS7_set0_type_other(PKCS7 *p7, int type, ASN1_TYPE *other)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="ASN1_TYPE" id="other" text="ASN1_TYPE *other" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_set_content" text="int PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="PKCS7" id="p7_data" text="PKCS7 *p7_data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_SIGNER_INFO_set" text="int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey,&#10;                          const EVP_MD *dgst)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="p7i" text="PKCS7_SIGNER_INFO *p7i" mod=""/>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="const EVP_MD" id="dgst" text="const EVP_MD *dgst" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_SIGNER_INFO_sign" text="int PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO *si)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_add_signer" text="int PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *p7i)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="PKCS7_SIGNER_INFO" id="p7i" text="PKCS7_SIGNER_INFO *p7i" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_add_certificate" text="int PKCS7_add_certificate(PKCS7 *p7, X509 *x509)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_add_crl" text="int PKCS7_add_crl(PKCS7 *p7, X509_CRL *x509)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="X509_CRL" id="x509" text="X509_CRL *x509" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_content_new" text="int PKCS7_content_new(PKCS7 *p7, int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_dataVerify" text="int PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx,&#10;                     BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="X509_STORE" id="cert_store" text="X509_STORE *cert_store" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_signatureVerify" text="int PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si,&#10;                          X509 *x509)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="PKCS7_dataInit" text="BIO *PKCS7_dataInit(PKCS7 *p7, BIO *bio)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_dataFinal" text="int PKCS7_dataFinal(PKCS7 *p7, BIO *bio)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="PKCS7_dataDecode" text="BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="BIO" id="in_bio" text="BIO *in_bio" mod=""/>
    <arg type="X509" id="pcert" text="X509 *pcert" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_SIGNER_INFO" id="PKCS7_add_signature" text="PKCS7_SIGNER_INFO *PKCS7_add_signature(PKCS7 *p7, X509 *x509,&#10;                                       EVP_PKEY *pkey, const EVP_MD *dgst)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="const EVP_MD" id="dgst" text="const EVP_MD *dgst" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="PKCS7_cert_from_signer_info" text="X509 *PKCS7_cert_from_signer_info(PKCS7 *p7, PKCS7_SIGNER_INFO *si)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_set_digest" text="int PKCS7_set_digest(PKCS7 *p7, const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_PKCS7_SIGNER_INFO" id="PKCS7_get_signer_info" text="struct stack_st_PKCS7_SIGNER_INFO &#10;# 314 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                           *PKCS7_get_signer_info(PKCS7 *p7)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_RECIP_INFO" id="PKCS7_add_recipient" text="PKCS7_RECIP_INFO *PKCS7_add_recipient(PKCS7 *p7, X509 *x509)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_SIGNER_INFO_get0_algs" text="void PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO *si, EVP_PKEY **pk,&#10;                                 X509_ALGOR **pdig, X509_ALGOR **psig)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
    <arg type="EVP_PKEY" id="pk" text="EVP_PKEY **pk" mod=""/>
    <arg type="X509_ALGOR" id="pdig" text="X509_ALGOR **pdig" mod=""/>
    <arg type="X509_ALGOR" id="psig" text="X509_ALGOR **psig" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS7_RECIP_INFO_get0_alg" text="void PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO *ri, X509_ALGOR **penc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_RECIP_INFO" id="ri" text="PKCS7_RECIP_INFO *ri" mod=""/>
    <arg type="X509_ALGOR" id="penc" text="X509_ALGOR **penc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_add_recipient_info" text="int PKCS7_add_recipient_info(PKCS7 *p7, PKCS7_RECIP_INFO *ri)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="PKCS7_RECIP_INFO" id="ri" text="PKCS7_RECIP_INFO *ri" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_RECIP_INFO_set" text="int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_RECIP_INFO" id="p7i" text="PKCS7_RECIP_INFO *p7i" mod=""/>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_set_cipher" text="int PKCS7_set_cipher(PKCS7 *p7, const EVP_CIPHER *cipher)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_stream" text="int PKCS7_stream(unsigned char ***boundary, PKCS7 *p7)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="unsigned char" id="boundary" text="unsigned char ***boundary" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_ISSUER_AND_SERIAL" id="PKCS7_get_issuer_and_serial" text="PKCS7_ISSUER_AND_SERIAL *PKCS7_get_issuer_and_serial(PKCS7 *p7, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="PKCS7_digest_from_attributes" text="ASN1_OCTET_STRING *PKCS7_digest_from_attributes(&#10;# 326 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;                                               struct stack_st_X509_ATTRIBUTE &#10;# 326 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                                        *sk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="struct stack_st_X509_ATTRIBUTE" id="sk" text="struct stack_st_X509_ATTRIBUTE &#10;# 326 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                                        *sk" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_add_signed_attribute" text="int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int type,&#10;                               void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="p7si" text="PKCS7_SIGNER_INFO *p7si" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_add_attribute" text="int PKCS7_add_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype,&#10;                        void *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="p7si" text="PKCS7_SIGNER_INFO *p7si" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="atrtype" text="int atrtype" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TYPE" id="PKCS7_get_attribute" text="ASN1_TYPE *PKCS7_get_attribute(PKCS7_SIGNER_INFO *si, int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TYPE" id="PKCS7_get_signed_attribute" text="ASN1_TYPE *PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO *si, int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_set_signed_attributes" text="int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO *p7si,&#10;                                &#10;# 334 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;                               struct stack_st_X509_ATTRIBUTE &#10;# 334 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                        *sk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="p7si" text="PKCS7_SIGNER_INFO *p7si" mod=""/>
    <arg type="struct stack_st_X509_ATTRIBUTE" id="sk" text="struct stack_st_X509_ATTRIBUTE &#10;# 334 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                        *sk" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_set_attributes" text="int PKCS7_set_attributes(PKCS7_SIGNER_INFO *p7si,&#10;                         &#10;# 336 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;                        struct stack_st_X509_ATTRIBUTE &#10;# 336 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                 *sk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="p7si" text="PKCS7_SIGNER_INFO *p7si" mod=""/>
    <arg type="struct stack_st_X509_ATTRIBUTE" id="sk" text="struct stack_st_X509_ATTRIBUTE &#10;# 336 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                 *sk" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="PKCS7_sign" text="PKCS7 *PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, &#10;# 338 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;                                                 struct stack_st_X509 &#10;# 338 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                                *certs,&#10;                  BIO *data, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="X509" id="signcert" text="X509 *signcert" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 338 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                                *certs" mod=""/>
    <arg type="BIO" id="data" text="BIO *data" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7_SIGNER_INFO" id="PKCS7_sign_add_signer" text="PKCS7_SIGNER_INFO *PKCS7_sign_add_signer(PKCS7 *p7,&#10;                                         X509 *signcert, EVP_PKEY *pkey,&#10;                                         const EVP_MD *md, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="X509" id="signcert" text="X509 *signcert" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_final" text="int PKCS7_final(PKCS7 *p7, BIO *data, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="BIO" id="data" text="BIO *data" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_verify" text="int PKCS7_verify(PKCS7 *p7, &#10;# 346 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;                           struct stack_st_X509 &#10;# 346 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                          *certs, X509_STORE *store,&#10;                 BIO *indata, BIO *out, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 346 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                          *certs" mod=""/>
    <arg type="X509_STORE" id="store" text="X509_STORE *store" mod=""/>
    <arg type="BIO" id="indata" text="BIO *indata" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509" id="PKCS7_get0_signers" text="struct stack_st_X509 &#10;# 348 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;              *PKCS7_get0_signers(PKCS7 *p7, &#10;# 348 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;                                             struct stack_st_X509 &#10;# 348 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                            *certs,&#10;                                   int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 348 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                            *certs" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="PKCS7_encrypt" text="PKCS7 *PKCS7_encrypt(&#10;# 350 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;                    struct stack_st_X509 &#10;# 350 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                   *certs, BIO *in, const EVP_CIPHER *cipher,&#10;                     int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 350 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                   *certs" mod=""/>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_decrypt" text="int PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data,&#10;                  int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
    <arg type="BIO" id="data" text="BIO *data" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_add_attrib_smimecap" text="int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si,&#10;                              &#10;# 356 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;                             struct stack_st_X509_ALGOR &#10;# 356 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                  *cap)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
    <arg type="struct stack_st_X509_ALGOR" id="cap" text="struct stack_st_X509_ALGOR &#10;# 356 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                                  *cap" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_ALGOR" id="PKCS7_get_smimecap" text="struct stack_st_X509_ALGOR &#10;# 357 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                    *PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_simple_smimecap" text="int PKCS7_simple_smimecap(&#10;# 358 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot; 3 4&#10;                         struct stack_st_X509_ALGOR &#10;# 358 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                              *sk, int nid, int arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="struct stack_st_X509_ALGOR" id="sk" text="struct stack_st_X509_ALGOR &#10;# 358 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h&quot;&#10;                                              *sk" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="arg" text="int arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_add_attrib_content_type" text="int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
    <arg type="ASN1_OBJECT" id="coid" text="ASN1_OBJECT *coid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_add0_attrib_signing_time" text="int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
    <arg type="ASN1_TIME" id="t" text="ASN1_TIME *t" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS7_add1_attrib_digest" text="int PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO *si,&#10;                             const unsigned char *md, int mdlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="PKCS7_SIGNER_INFO" id="si" text="PKCS7_SIGNER_INFO *si" mod=""/>
    <arg type="const unsigned char" id="md" text="const unsigned char *md" mod=""/>
    <arg type="int" id="mdlen" text="int mdlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SMIME_write_PKCS7" text="int SMIME_write_PKCS7(BIO *bio, PKCS7 *p7, BIO *data, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="BIO" id="data" text="BIO *data" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="SMIME_read_PKCS7" text="PKCS7 *SMIME_read_PKCS7(BIO *bio, BIO **bcont)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="BIO" id="bcont" text="BIO **bcont" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_PKCS7" text="BIO *BIO_new_PKCS7(BIO *out, PKCS7 *p7)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_PKCS7_strings" text="void ERR_load_PKCS7_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs7.h">
  <args>
    <arg type="void" id="ANON10" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="X509V3_EXT_NEW" text="typedef void *(*X509V3_EXT_NEW)(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_EXT_FREE" text="typedef void (*X509V3_EXT_FREE) (void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON1" text="void *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_EXT_D2I" text="typedef void *(*X509V3_EXT_D2I)(void *, const unsigned char **, long)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON2" text="void *" mod=""/>
    <arg type="const unsigned char" id="ANON3" text="const unsigned char **" mod=""/>
    <arg type="long" id="ANON4" text="long" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_I2D" text="typedef int (*X509V3_EXT_I2D) (void *, unsigned char **)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON5" text="void *" mod=""/>
    <arg type="unsigned char" id="ANON6" text="unsigned char **" mod=""/>
  </args>
</fdecl>
<fdecl type="# 87 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;       struct stack_st_CONF_VALUE" id="X509V3_EXT_I2V" text="typedef &#10;# 87 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;       struct stack_st_CONF_VALUE &#10;# 87 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                            *&#10;    (*X509V3_EXT_I2V) (const struct v3_ext_method *method, void *ext,&#10;                       &#10;# 89 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                      struct stack_st_CONF_VALUE &#10;# 89 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                           *extlist)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const struct v3_ext_method" id="method" text="const struct v3_ext_method *method" mod=""/>
    <arg type="void" id="ext" text="void *ext" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="extlist" text="struct stack_st_CONF_VALUE &#10;# 89 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                           *extlist" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_EXT_V2I" text="typedef void *(*X509V3_EXT_V2I)(const struct v3_ext_method *method,&#10;                                struct v3_ext_ctx *ctx,&#10;                                &#10;# 92 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                               struct stack_st_CONF_VALUE &#10;# 92 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                    *values)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const struct v3_ext_method" id="method" text="const struct v3_ext_method *method" mod=""/>
    <arg type="struct v3_ext_ctx" id="ctx" text="struct v3_ext_ctx *ctx" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="values" text="struct stack_st_CONF_VALUE &#10;# 92 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                    *values" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="X509V3_EXT_I2S" text="typedef char *(*X509V3_EXT_I2S)(const struct v3_ext_method *method,&#10;                                void *ext)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const struct v3_ext_method" id="method" text="const struct v3_ext_method *method" mod=""/>
    <arg type="void" id="ext" text="void *ext" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_EXT_S2I" text="typedef void *(*X509V3_EXT_S2I)(const struct v3_ext_method *method,&#10;                                struct v3_ext_ctx *ctx, const char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const struct v3_ext_method" id="method" text="const struct v3_ext_method *method" mod=""/>
    <arg type="struct v3_ext_ctx" id="ctx" text="struct v3_ext_ctx *ctx" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_I2R" text="typedef int (*X509V3_EXT_I2R) (const struct v3_ext_method *method, void *ext,&#10;                               BIO *out, int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const struct v3_ext_method" id="method" text="const struct v3_ext_method *method" mod=""/>
    <arg type="void" id="ext" text="void *ext" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_EXT_R2I" text="typedef void *(*X509V3_EXT_R2I)(const struct v3_ext_method *method,&#10;                                struct v3_ext_ctx *ctx, const char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const struct v3_ext_method" id="method" text="const struct v3_ext_method *method" mod=""/>
    <arg type="struct v3_ext_ctx" id="ctx" text="struct v3_ext_ctx *ctx" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_CONF_METHOD" text="typedef struct X509V3_CONF_METHOD_st {&#10;    char *(*get_string) (void *db, char *section, char *value);&#10;    &#10;# 128 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;   struct stack_st_CONF_VALUE &#10;# 128 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                        *(*get_section) (void *db, char *section);&#10;    void (*free_string) (void *db, char *string);&#10;    void (*free_section) (void *db, &#10;# 130 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                                   struct stack_st_CONF_VALUE &#10;# 130 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                        *section);&#10;} X509V3_CONF_METHOD" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="db" text="void *db" mod=""/>
    <arg type="char" id="section" text="char *section" mod=""/>
    <arg type="char" id="value" text="char *value" mod=""/>
    <arg type="void" id="db" text="void *db" mod=""/>
    <arg type="char" id="section" text="char *section" mod=""/>
    <arg type="void" id="db" text="void *db" mod=""/>
    <arg type="char" id="string" text="char *string" mod=""/>
    <arg type="void" id="db" text="void *db" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="section" text="struct stack_st_CONF_VALUE &#10;# 130 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                        *section" mod=""/>
  </args>
</fdecl>
<fdecl type="PROXY_POLICY" id="PROXY_POLICY_new" text="PROXY_POLICY &#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PROXY_POLICY_new&#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PROXY_POLICY_free" text="void &#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PROXY_POLICY_free&#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PROXY_POLICY &#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="PROXY_POLICY" id="a" text="PROXY_POLICY &#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PROXY_POLICY" id="d2i_PROXY_POLICY" text="PROXY_POLICY &#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_PROXY_POLICY(&#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PROXY_POLICY &#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="PROXY_POLICY" id="a" text="PROXY_POLICY &#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PROXY_POLICY" text="int i2d_PROXY_POLICY(&#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PROXY_POLICY &#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="PROXY_POLICY" id="a" text="PROXY_POLICY &#10;# 353 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PROXY_CERT_INFO_EXTENSION" id="PROXY_CERT_INFO_EXTENSION_new" text="PROXY_CERT_INFO_EXTENSION &#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PROXY_CERT_INFO_EXTENSION_new&#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PROXY_CERT_INFO_EXTENSION_free" text="void &#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PROXY_CERT_INFO_EXTENSION_free&#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PROXY_CERT_INFO_EXTENSION &#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="PROXY_CERT_INFO_EXTENSION" id="a" text="PROXY_CERT_INFO_EXTENSION &#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PROXY_CERT_INFO_EXTENSION" id="d2i_PROXY_CERT_INFO_EXTENSION" text="PROXY_CERT_INFO_EXTENSION &#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_PROXY_CERT_INFO_EXTENSION(&#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PROXY_CERT_INFO_EXTENSION &#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="PROXY_CERT_INFO_EXTENSION" id="a" text="PROXY_CERT_INFO_EXTENSION &#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PROXY_CERT_INFO_EXTENSION" text="int i2d_PROXY_CERT_INFO_EXTENSION(&#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PROXY_CERT_INFO_EXTENSION &#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="PROXY_CERT_INFO_EXTENSION" id="a" text="PROXY_CERT_INFO_EXTENSION &#10;# 354 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="const struct x509_purpose_st" id="X509_PURPOSE" text="typedef struct x509_purpose_st {&#10;    int purpose;&#10;    int trust;&#10;    int flags;&#10;    int (*check_purpose) (const struct x509_purpose_st *, const X509 *, int);&#10;    char *name;&#10;    char *sname;&#10;    void *usr_data;&#10;} X509_PURPOSE" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const struct x509_purpose_st" id="ANON9" text="const struct x509_purpose_st *" mod=""/>
    <arg type="const X509" id="ANON10" text="const X509 *" mod=""/>
    <arg type="int" id="ANON11" text="int" mod=""/>
  </args>
</fdecl>
<fdecl type="BASIC_CONSTRAINTS" id="BASIC_CONSTRAINTS_new" text="BASIC_CONSTRAINTS &#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;BASIC_CONSTRAINTS_new&#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON12" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BASIC_CONSTRAINTS_free" text="void &#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;BASIC_CONSTRAINTS_free&#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;BASIC_CONSTRAINTS &#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="BASIC_CONSTRAINTS" id="a" text="BASIC_CONSTRAINTS &#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="BASIC_CONSTRAINTS" id="d2i_BASIC_CONSTRAINTS" text="BASIC_CONSTRAINTS &#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_BASIC_CONSTRAINTS(&#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;BASIC_CONSTRAINTS &#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="BASIC_CONSTRAINTS" id="a" text="BASIC_CONSTRAINTS &#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_BASIC_CONSTRAINTS" text="int i2d_BASIC_CONSTRAINTS(&#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;BASIC_CONSTRAINTS &#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="BASIC_CONSTRAINTS" id="a" text="BASIC_CONSTRAINTS &#10;# 506 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="SXNET" id="SXNET_new" text="SXNET &#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;SXNET_new&#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON13" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SXNET_free" text="void &#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;SXNET_free&#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;SXNET &#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNET" id="a" text="SXNET &#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="SXNET" id="d2i_SXNET" text="SXNET &#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_SXNET(&#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;SXNET &#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNET" id="a" text="SXNET &#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_SXNET" text="int i2d_SXNET(&#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;SXNET &#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNET" id="a" text="SXNET &#10;# 508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="SXNETID" id="SXNETID_new" text="SXNETID &#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;SXNETID_new&#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON14" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SXNETID_free" text="void &#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;SXNETID_free&#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;SXNETID &#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNETID" id="a" text="SXNETID &#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="SXNETID" id="d2i_SXNETID" text="SXNETID &#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_SXNETID(&#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;SXNETID &#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNETID" id="a" text="SXNETID &#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_SXNETID" text="int i2d_SXNETID(&#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;SXNETID &#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNETID" id="a" text="SXNETID &#10;# 509 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SXNET_add_id_asc" text="int SXNET_add_id_asc(SXNET **psx, char *zone, char *user, int userlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNET" id="psx" text="SXNET **psx" mod=""/>
    <arg type="char" id="zone" text="char *zone" mod=""/>
    <arg type="char" id="user" text="char *user" mod=""/>
    <arg type="int" id="userlen" text="int userlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SXNET_add_id_ulong" text="int SXNET_add_id_ulong(SXNET **psx, unsigned long lzone, char *user,&#10;                       int userlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNET" id="psx" text="SXNET **psx" mod=""/>
    <arg type="unsigned long" id="lzone" text="unsigned long lzone" mod=""/>
    <arg type="char" id="user" text="char *user" mod=""/>
    <arg type="int" id="userlen" text="int userlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SXNET_add_id_INTEGER" text="int SXNET_add_id_INTEGER(SXNET **psx, ASN1_INTEGER *izone, char *user,&#10;                         int userlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNET" id="psx" text="SXNET **psx" mod=""/>
    <arg type="ASN1_INTEGER" id="izone" text="ASN1_INTEGER *izone" mod=""/>
    <arg type="char" id="user" text="char *user" mod=""/>
    <arg type="int" id="userlen" text="int userlen" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="SXNET_get_id_asc" text="ASN1_OCTET_STRING *SXNET_get_id_asc(SXNET *sx, char *zone)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNET" id="sx" text="SXNET *sx" mod=""/>
    <arg type="char" id="zone" text="char *zone" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="SXNET_get_id_ulong" text="ASN1_OCTET_STRING *SXNET_get_id_ulong(SXNET *sx, unsigned long lzone)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNET" id="sx" text="SXNET *sx" mod=""/>
    <arg type="unsigned long" id="lzone" text="unsigned long lzone" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="SXNET_get_id_INTEGER" text="ASN1_OCTET_STRING *SXNET_get_id_INTEGER(SXNET *sx, ASN1_INTEGER *zone)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="SXNET" id="sx" text="SXNET *sx" mod=""/>
    <arg type="ASN1_INTEGER" id="zone" text="ASN1_INTEGER *zone" mod=""/>
  </args>
</fdecl>
<fdecl type="AUTHORITY_KEYID" id="AUTHORITY_KEYID_new" text="AUTHORITY_KEYID &#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;AUTHORITY_KEYID_new&#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON15" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AUTHORITY_KEYID_free" text="void &#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;AUTHORITY_KEYID_free&#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;AUTHORITY_KEYID &#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="AUTHORITY_KEYID" id="a" text="AUTHORITY_KEYID &#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="AUTHORITY_KEYID" id="d2i_AUTHORITY_KEYID" text="AUTHORITY_KEYID &#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_AUTHORITY_KEYID(&#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;AUTHORITY_KEYID &#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="AUTHORITY_KEYID" id="a" text="AUTHORITY_KEYID &#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_AUTHORITY_KEYID" text="int i2d_AUTHORITY_KEYID(&#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;AUTHORITY_KEYID &#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="AUTHORITY_KEYID" id="a" text="AUTHORITY_KEYID &#10;# 521 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKEY_USAGE_PERIOD" id="PKEY_USAGE_PERIOD_new" text="PKEY_USAGE_PERIOD &#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PKEY_USAGE_PERIOD_new&#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON16" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKEY_USAGE_PERIOD_free" text="void &#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PKEY_USAGE_PERIOD_free&#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PKEY_USAGE_PERIOD &#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="PKEY_USAGE_PERIOD" id="a" text="PKEY_USAGE_PERIOD &#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKEY_USAGE_PERIOD" id="d2i_PKEY_USAGE_PERIOD" text="PKEY_USAGE_PERIOD &#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_PKEY_USAGE_PERIOD(&#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PKEY_USAGE_PERIOD &#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="PKEY_USAGE_PERIOD" id="a" text="PKEY_USAGE_PERIOD &#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKEY_USAGE_PERIOD" text="int i2d_PKEY_USAGE_PERIOD(&#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;PKEY_USAGE_PERIOD &#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="PKEY_USAGE_PERIOD" id="a" text="PKEY_USAGE_PERIOD &#10;# 523 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="GENERAL_NAME" id="GENERAL_NAME_new" text="GENERAL_NAME &#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_NAME_new&#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON17" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="GENERAL_NAME_free" text="void &#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_NAME_free&#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_NAME &#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAME" id="a" text="GENERAL_NAME &#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="GENERAL_NAME" id="d2i_GENERAL_NAME" text="GENERAL_NAME &#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_GENERAL_NAME(&#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_NAME &#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAME" id="a" text="GENERAL_NAME &#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_GENERAL_NAME" text="int i2d_GENERAL_NAME(&#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_NAME &#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAME" id="a" text="GENERAL_NAME &#10;# 525 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="GENERAL_NAME" id="GENERAL_NAME_dup" text="GENERAL_NAME *GENERAL_NAME_dup(GENERAL_NAME *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAME" id="a" text="GENERAL_NAME *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="GENERAL_NAME_cmp" text="int GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAME" id="a" text="GENERAL_NAME *a" mod=""/>
    <arg type="GENERAL_NAME" id="b" text="GENERAL_NAME *b" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_BIT_STRING" id="v2i_ASN1_BIT_STRING" text="ASN1_BIT_STRING *v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD *method,&#10;                                     X509V3_CTX *ctx,&#10;                                     &#10;# 531 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                                    struct stack_st_CONF_VALUE &#10;# 531 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                         *nval)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="method" text="X509V3_EXT_METHOD *method" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="nval" text="struct stack_st_CONF_VALUE &#10;# 531 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                         *nval" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_CONF_VALUE" id="i2v_ASN1_BIT_STRING" text="struct stack_st_CONF_VALUE &#10;# 532 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                    *i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD *method,&#10;                                          ASN1_BIT_STRING *bits,&#10;                                          &#10;# 534 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                                         struct stack_st_CONF_VALUE &#10;# 534 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                              *extlist)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="method" text="X509V3_EXT_METHOD *method" mod=""/>
    <arg type="ASN1_BIT_STRING" id="bits" text="ASN1_BIT_STRING *bits" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="extlist" text="struct stack_st_CONF_VALUE &#10;# 534 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                              *extlist" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_CONF_VALUE" id="i2v_GENERAL_NAME" text="struct stack_st_CONF_VALUE &#10;# 536 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                    *i2v_GENERAL_NAME(X509V3_EXT_METHOD *method,&#10;                                       GENERAL_NAME *gen,&#10;                                       &#10;# 538 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                                      struct stack_st_CONF_VALUE &#10;# 538 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                           *ret)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="method" text="X509V3_EXT_METHOD *method" mod=""/>
    <arg type="GENERAL_NAME" id="gen" text="GENERAL_NAME *gen" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="ret" text="struct stack_st_CONF_VALUE &#10;# 538 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                           *ret" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="GENERAL_NAME_print" text="int GENERAL_NAME_print(BIO *out, GENERAL_NAME *gen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="GENERAL_NAME" id="gen" text="GENERAL_NAME *gen" mod=""/>
  </args>
</fdecl>
<fdecl type="GENERAL_NAMES" id="GENERAL_NAMES_new" text="GENERAL_NAMES &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_NAMES_new&#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON18" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="GENERAL_NAMES_free" text="void &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_NAMES_free&#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_NAMES &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAMES" id="a" text="GENERAL_NAMES &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="GENERAL_NAMES" id="d2i_GENERAL_NAMES" text="GENERAL_NAMES &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_GENERAL_NAMES(&#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_NAMES &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAMES" id="a" text="GENERAL_NAMES &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_GENERAL_NAMES" text="int i2d_GENERAL_NAMES(&#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_NAMES &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAMES" id="a" text="GENERAL_NAMES &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_CONF_VALUE" id="i2v_GENERAL_NAMES" text="struct stack_st_CONF_VALUE &#10;# 543 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                    *i2v_GENERAL_NAMES(X509V3_EXT_METHOD *method,&#10;                                        GENERAL_NAMES *gen,&#10;                                        &#10;# 545 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                                       struct stack_st_CONF_VALUE &#10;# 545 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                            *extlist)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="method" text="X509V3_EXT_METHOD *method" mod=""/>
    <arg type="GENERAL_NAMES" id="gen" text="GENERAL_NAMES *gen" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="extlist" text="struct stack_st_CONF_VALUE &#10;# 545 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                            *extlist" mod=""/>
  </args>
</fdecl>
<fdecl type="GENERAL_NAMES" id="v2i_GENERAL_NAMES" text="GENERAL_NAMES *v2i_GENERAL_NAMES(const X509V3_EXT_METHOD *method,&#10;                                 X509V3_CTX *ctx, &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                                                 struct stack_st_CONF_VALUE &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                                      *nval)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const X509V3_EXT_METHOD" id="method" text="const X509V3_EXT_METHOD *method" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="nval" text="struct stack_st_CONF_VALUE &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                                      *nval" mod=""/>
  </args>
</fdecl>
<fdecl type="OTHERNAME" id="OTHERNAME_new" text="OTHERNAME &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;OTHERNAME_new&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON19" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OTHERNAME_free" text="void &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;OTHERNAME_free&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;OTHERNAME &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="OTHERNAME" id="a" text="OTHERNAME &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OTHERNAME" id="d2i_OTHERNAME" text="OTHERNAME &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_OTHERNAME(&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;OTHERNAME &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="OTHERNAME" id="a" text="OTHERNAME &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OTHERNAME" text="int i2d_OTHERNAME(&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;OTHERNAME &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="OTHERNAME" id="a" text="OTHERNAME &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="EDIPARTYNAME" id="EDIPARTYNAME_new" text="EDIPARTYNAME &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;EDIPARTYNAME_new&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON20" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EDIPARTYNAME_free" text="void &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;EDIPARTYNAME_free&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;EDIPARTYNAME &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="EDIPARTYNAME" id="a" text="EDIPARTYNAME &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="EDIPARTYNAME" id="d2i_EDIPARTYNAME" text="EDIPARTYNAME &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_EDIPARTYNAME(&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;EDIPARTYNAME &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="EDIPARTYNAME" id="a" text="EDIPARTYNAME &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_EDIPARTYNAME" text="int i2d_EDIPARTYNAME(&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;EDIPARTYNAME &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="EDIPARTYNAME" id="a" text="EDIPARTYNAME &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OTHERNAME_cmp" text="int OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="OTHERNAME" id="a" text="OTHERNAME *a" mod=""/>
    <arg type="OTHERNAME" id="b" text="OTHERNAME *b" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="GENERAL_NAME_set0_value" text="void GENERAL_NAME_set0_value(GENERAL_NAME *a, int type, void *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAME" id="a" text="GENERAL_NAME *a" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="GENERAL_NAME_get0_value" text="void *GENERAL_NAME_get0_value(GENERAL_NAME *a, int *ptype)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAME" id="a" text="GENERAL_NAME *a" mod=""/>
    <arg type="int" id="ptype" text="int *ptype" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="GENERAL_NAME_set0_othername" text="int GENERAL_NAME_set0_othername(GENERAL_NAME *gen,&#10;                                ASN1_OBJECT *oid, ASN1_TYPE *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAME" id="gen" text="GENERAL_NAME *gen" mod=""/>
    <arg type="ASN1_OBJECT" id="oid" text="ASN1_OBJECT *oid" mod=""/>
    <arg type="ASN1_TYPE" id="value" text="ASN1_TYPE *value" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="GENERAL_NAME_get0_otherName" text="int GENERAL_NAME_get0_otherName(GENERAL_NAME *gen,&#10;                                ASN1_OBJECT **poid, ASN1_TYPE **pvalue)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAME" id="gen" text="GENERAL_NAME *gen" mod=""/>
    <arg type="ASN1_OBJECT" id="poid" text="ASN1_OBJECT **poid" mod=""/>
    <arg type="ASN1_TYPE" id="pvalue" text="ASN1_TYPE **pvalue" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="i2s_ASN1_OCTET_STRING" text="char *i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method,&#10;                            ASN1_OCTET_STRING *ia5)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="method" text="X509V3_EXT_METHOD *method" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="ia5" text="ASN1_OCTET_STRING *ia5" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="s2i_ASN1_OCTET_STRING" text="ASN1_OCTET_STRING *s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method,&#10;                                         X509V3_CTX *ctx, char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="method" text="X509V3_EXT_METHOD *method" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="str" text="char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="EXTENDED_KEY_USAGE" id="EXTENDED_KEY_USAGE_new" text="EXTENDED_KEY_USAGE &#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;EXTENDED_KEY_USAGE_new&#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON21" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="EXTENDED_KEY_USAGE_free" text="void &#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;EXTENDED_KEY_USAGE_free&#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;EXTENDED_KEY_USAGE &#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="EXTENDED_KEY_USAGE" id="a" text="EXTENDED_KEY_USAGE &#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="EXTENDED_KEY_USAGE" id="d2i_EXTENDED_KEY_USAGE" text="EXTENDED_KEY_USAGE &#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_EXTENDED_KEY_USAGE(&#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;EXTENDED_KEY_USAGE &#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="EXTENDED_KEY_USAGE" id="a" text="EXTENDED_KEY_USAGE &#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_EXTENDED_KEY_USAGE" text="int i2d_EXTENDED_KEY_USAGE(&#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;EXTENDED_KEY_USAGE &#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="EXTENDED_KEY_USAGE" id="a" text="EXTENDED_KEY_USAGE &#10;# 564 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2a_ACCESS_DESCRIPTION" text="int i2a_ACCESS_DESCRIPTION(BIO *bp, ACCESS_DESCRIPTION *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="ACCESS_DESCRIPTION" id="a" text="ACCESS_DESCRIPTION *a" mod=""/>
  </args>
</fdecl>
<fdecl type="CERTIFICATEPOLICIES" id="CERTIFICATEPOLICIES_new" text="CERTIFICATEPOLICIES &#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;CERTIFICATEPOLICIES_new&#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON22" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CERTIFICATEPOLICIES_free" text="void &#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;CERTIFICATEPOLICIES_free&#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;CERTIFICATEPOLICIES &#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CERTIFICATEPOLICIES" id="a" text="CERTIFICATEPOLICIES &#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="CERTIFICATEPOLICIES" id="d2i_CERTIFICATEPOLICIES" text="CERTIFICATEPOLICIES &#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_CERTIFICATEPOLICIES(&#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;CERTIFICATEPOLICIES &#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CERTIFICATEPOLICIES" id="a" text="CERTIFICATEPOLICIES &#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_CERTIFICATEPOLICIES" text="int i2d_CERTIFICATEPOLICIES(&#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;CERTIFICATEPOLICIES &#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CERTIFICATEPOLICIES" id="a" text="CERTIFICATEPOLICIES &#10;# 567 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="POLICYINFO" id="POLICYINFO_new" text="POLICYINFO &#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICYINFO_new&#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON23" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="POLICYINFO_free" text="void &#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICYINFO_free&#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICYINFO &#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="POLICYINFO" id="a" text="POLICYINFO &#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="POLICYINFO" id="d2i_POLICYINFO" text="POLICYINFO &#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_POLICYINFO(&#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICYINFO &#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="POLICYINFO" id="a" text="POLICYINFO &#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_POLICYINFO" text="int i2d_POLICYINFO(&#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICYINFO &#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="POLICYINFO" id="a" text="POLICYINFO &#10;# 568 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="POLICYQUALINFO" id="POLICYQUALINFO_new" text="POLICYQUALINFO &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICYQUALINFO_new&#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON24" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="POLICYQUALINFO_free" text="void &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICYQUALINFO_free&#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICYQUALINFO &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="POLICYQUALINFO" id="a" text="POLICYQUALINFO &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="POLICYQUALINFO" id="d2i_POLICYQUALINFO" text="POLICYQUALINFO &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_POLICYQUALINFO(&#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICYQUALINFO &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="POLICYQUALINFO" id="a" text="POLICYQUALINFO &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_POLICYQUALINFO" text="int i2d_POLICYQUALINFO(&#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICYQUALINFO &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="POLICYQUALINFO" id="a" text="POLICYQUALINFO &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="USERNOTICE" id="USERNOTICE_new" text="USERNOTICE &#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;USERNOTICE_new&#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON25" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="USERNOTICE_free" text="void &#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;USERNOTICE_free&#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;USERNOTICE &#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="USERNOTICE" id="a" text="USERNOTICE &#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="USERNOTICE" id="d2i_USERNOTICE" text="USERNOTICE &#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_USERNOTICE(&#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;USERNOTICE &#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="USERNOTICE" id="a" text="USERNOTICE &#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_USERNOTICE" text="int i2d_USERNOTICE(&#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;USERNOTICE &#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="USERNOTICE" id="a" text="USERNOTICE &#10;# 570 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="NOTICEREF" id="NOTICEREF_new" text="NOTICEREF &#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;NOTICEREF_new&#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON26" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="NOTICEREF_free" text="void &#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;NOTICEREF_free&#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;NOTICEREF &#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="NOTICEREF" id="a" text="NOTICEREF &#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="NOTICEREF" id="d2i_NOTICEREF" text="NOTICEREF &#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_NOTICEREF(&#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;NOTICEREF &#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="NOTICEREF" id="a" text="NOTICEREF &#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_NOTICEREF" text="int i2d_NOTICEREF(&#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;NOTICEREF &#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="NOTICEREF" id="a" text="NOTICEREF &#10;# 571 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="CRL_DIST_POINTS" id="CRL_DIST_POINTS_new" text="CRL_DIST_POINTS &#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;CRL_DIST_POINTS_new&#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON27" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CRL_DIST_POINTS_free" text="void &#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;CRL_DIST_POINTS_free&#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;CRL_DIST_POINTS &#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CRL_DIST_POINTS" id="a" text="CRL_DIST_POINTS &#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="CRL_DIST_POINTS" id="d2i_CRL_DIST_POINTS" text="CRL_DIST_POINTS &#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_CRL_DIST_POINTS(&#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;CRL_DIST_POINTS &#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CRL_DIST_POINTS" id="a" text="CRL_DIST_POINTS &#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_CRL_DIST_POINTS" text="int i2d_CRL_DIST_POINTS(&#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;CRL_DIST_POINTS &#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CRL_DIST_POINTS" id="a" text="CRL_DIST_POINTS &#10;# 573 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="DIST_POINT" id="DIST_POINT_new" text="DIST_POINT &#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;DIST_POINT_new&#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON28" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DIST_POINT_free" text="void &#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;DIST_POINT_free&#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;DIST_POINT &#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="DIST_POINT" id="a" text="DIST_POINT &#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="DIST_POINT" id="d2i_DIST_POINT" text="DIST_POINT &#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_DIST_POINT(&#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;DIST_POINT &#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="DIST_POINT" id="a" text="DIST_POINT &#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DIST_POINT" text="int i2d_DIST_POINT(&#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;DIST_POINT &#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="DIST_POINT" id="a" text="DIST_POINT &#10;# 574 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="DIST_POINT_NAME" id="DIST_POINT_NAME_new" text="DIST_POINT_NAME &#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;DIST_POINT_NAME_new&#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON29" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="DIST_POINT_NAME_free" text="void &#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;DIST_POINT_NAME_free&#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;DIST_POINT_NAME &#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="DIST_POINT_NAME" id="a" text="DIST_POINT_NAME &#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="DIST_POINT_NAME" id="d2i_DIST_POINT_NAME" text="DIST_POINT_NAME &#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_DIST_POINT_NAME(&#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;DIST_POINT_NAME &#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="DIST_POINT_NAME" id="a" text="DIST_POINT_NAME &#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_DIST_POINT_NAME" text="int i2d_DIST_POINT_NAME(&#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;DIST_POINT_NAME &#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="DIST_POINT_NAME" id="a" text="DIST_POINT_NAME &#10;# 575 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="ISSUING_DIST_POINT" id="ISSUING_DIST_POINT_new" text="ISSUING_DIST_POINT &#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;ISSUING_DIST_POINT_new&#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON30" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ISSUING_DIST_POINT_free" text="void &#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;ISSUING_DIST_POINT_free&#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;ISSUING_DIST_POINT &#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="ISSUING_DIST_POINT" id="a" text="ISSUING_DIST_POINT &#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="ISSUING_DIST_POINT" id="d2i_ISSUING_DIST_POINT" text="ISSUING_DIST_POINT &#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_ISSUING_DIST_POINT(&#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;ISSUING_DIST_POINT &#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="ISSUING_DIST_POINT" id="a" text="ISSUING_DIST_POINT &#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ISSUING_DIST_POINT" text="int i2d_ISSUING_DIST_POINT(&#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;ISSUING_DIST_POINT &#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="ISSUING_DIST_POINT" id="a" text="ISSUING_DIST_POINT &#10;# 576 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="DIST_POINT_set_dpname" text="int DIST_POINT_set_dpname(DIST_POINT_NAME *dpn, X509_NAME *iname)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="DIST_POINT_NAME" id="dpn" text="DIST_POINT_NAME *dpn" mod=""/>
    <arg type="X509_NAME" id="iname" text="X509_NAME *iname" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="NAME_CONSTRAINTS_check" text="int NAME_CONSTRAINTS_check(X509 *x, NAME_CONSTRAINTS *nc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="NAME_CONSTRAINTS" id="nc" text="NAME_CONSTRAINTS *nc" mod=""/>
  </args>
</fdecl>
<fdecl type="ACCESS_DESCRIPTION" id="ACCESS_DESCRIPTION_new" text="ACCESS_DESCRIPTION &#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;ACCESS_DESCRIPTION_new&#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON31" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ACCESS_DESCRIPTION_free" text="void &#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;ACCESS_DESCRIPTION_free&#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;ACCESS_DESCRIPTION &#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="ACCESS_DESCRIPTION" id="a" text="ACCESS_DESCRIPTION &#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="ACCESS_DESCRIPTION" id="d2i_ACCESS_DESCRIPTION" text="ACCESS_DESCRIPTION &#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_ACCESS_DESCRIPTION(&#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;ACCESS_DESCRIPTION &#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="ACCESS_DESCRIPTION" id="a" text="ACCESS_DESCRIPTION &#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ACCESS_DESCRIPTION" text="int i2d_ACCESS_DESCRIPTION(&#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;ACCESS_DESCRIPTION &#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="ACCESS_DESCRIPTION" id="a" text="ACCESS_DESCRIPTION &#10;# 582 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="AUTHORITY_INFO_ACCESS" id="AUTHORITY_INFO_ACCESS_new" text="AUTHORITY_INFO_ACCESS &#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;AUTHORITY_INFO_ACCESS_new&#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON32" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="AUTHORITY_INFO_ACCESS_free" text="void &#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;AUTHORITY_INFO_ACCESS_free&#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;AUTHORITY_INFO_ACCESS &#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="AUTHORITY_INFO_ACCESS" id="a" text="AUTHORITY_INFO_ACCESS &#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="AUTHORITY_INFO_ACCESS" id="d2i_AUTHORITY_INFO_ACCESS" text="AUTHORITY_INFO_ACCESS &#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*d2i_AUTHORITY_INFO_ACCESS(&#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;AUTHORITY_INFO_ACCESS &#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="AUTHORITY_INFO_ACCESS" id="a" text="AUTHORITY_INFO_ACCESS &#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_AUTHORITY_INFO_ACCESS" text="int i2d_AUTHORITY_INFO_ACCESS(&#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;AUTHORITY_INFO_ACCESS &#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="AUTHORITY_INFO_ACCESS" id="a" text="AUTHORITY_INFO_ACCESS &#10;# 583 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="POLICY_MAPPING" id="POLICY_MAPPING_new" text="POLICY_MAPPING &#10;# 586 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 586 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICY_MAPPING_new&#10;# 586 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON33" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="POLICY_MAPPING_free" text="void &#10;# 586 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICY_MAPPING_free&#10;# 586 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 586 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICY_MAPPING &#10;# 586 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="POLICY_MAPPING" id="a" text="POLICY_MAPPING &#10;# 586 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="GENERAL_SUBTREE" id="GENERAL_SUBTREE_new" text="GENERAL_SUBTREE &#10;# 590 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 590 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_SUBTREE_new&#10;# 590 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON34" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="GENERAL_SUBTREE_free" text="void &#10;# 590 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_SUBTREE_free&#10;# 590 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 590 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;GENERAL_SUBTREE &#10;# 590 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_SUBTREE" id="a" text="GENERAL_SUBTREE &#10;# 590 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="NAME_CONSTRAINTS" id="NAME_CONSTRAINTS_new" text="NAME_CONSTRAINTS &#10;# 593 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 593 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;NAME_CONSTRAINTS_new&#10;# 593 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON35" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="NAME_CONSTRAINTS_free" text="void &#10;# 593 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;NAME_CONSTRAINTS_free&#10;# 593 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 593 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;NAME_CONSTRAINTS &#10;# 593 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="NAME_CONSTRAINTS" id="a" text="NAME_CONSTRAINTS &#10;# 593 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="POLICY_CONSTRAINTS" id="POLICY_CONSTRAINTS_new" text="POLICY_CONSTRAINTS &#10;# 595 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*&#10;# 595 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICY_CONSTRAINTS_new&#10;# 595 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON36" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="POLICY_CONSTRAINTS_free" text="void &#10;# 595 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICY_CONSTRAINTS_free&#10;# 595 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;(&#10;# 595 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;POLICY_CONSTRAINTS &#10;# 595 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="POLICY_CONSTRAINTS" id="a" text="POLICY_CONSTRAINTS &#10;# 595 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="GENERAL_NAME" id="a2i_GENERAL_NAME" text="GENERAL_NAME *a2i_GENERAL_NAME(GENERAL_NAME *out,&#10;                               const X509V3_EXT_METHOD *method,&#10;                               X509V3_CTX *ctx, int gen_type, char *value,&#10;                               int is_nc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAME" id="out" text="GENERAL_NAME *out" mod=""/>
    <arg type="const X509V3_EXT_METHOD" id="method" text="const X509V3_EXT_METHOD *method" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="int" id="gen_type" text="int gen_type" mod=""/>
    <arg type="char" id="value" text="char *value" mod=""/>
    <arg type="int" id="is_nc" text="int is_nc" mod=""/>
  </args>
</fdecl>
<fdecl type="GENERAL_NAME" id="v2i_GENERAL_NAME" text="GENERAL_NAME *v2i_GENERAL_NAME(const X509V3_EXT_METHOD *method,&#10;                               X509V3_CTX *ctx, CONF_VALUE *cnf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const X509V3_EXT_METHOD" id="method" text="const X509V3_EXT_METHOD *method" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="CONF_VALUE" id="cnf" text="CONF_VALUE *cnf" mod=""/>
  </args>
</fdecl>
<fdecl type="GENERAL_NAME" id="v2i_GENERAL_NAME_ex" text="GENERAL_NAME *v2i_GENERAL_NAME_ex(GENERAL_NAME *out,&#10;                                  const X509V3_EXT_METHOD *method,&#10;                                  X509V3_CTX *ctx, CONF_VALUE *cnf,&#10;                                  int is_nc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="GENERAL_NAME" id="out" text="GENERAL_NAME *out" mod=""/>
    <arg type="const X509V3_EXT_METHOD" id="method" text="const X509V3_EXT_METHOD *method" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="CONF_VALUE" id="cnf" text="CONF_VALUE *cnf" mod=""/>
    <arg type="int" id="is_nc" text="int is_nc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_conf_free" text="void X509V3_conf_free(CONF_VALUE *val)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CONF_VALUE" id="val" text="CONF_VALUE *val" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509V3_EXT_nconf_nid" text="X509_EXTENSION *X509V3_EXT_nconf_nid(CONF *conf, X509V3_CTX *ctx, int ext_nid,&#10;                                     char *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="int" id="ext_nid" text="int ext_nid" mod=""/>
    <arg type="char" id="value" text="char *value" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509V3_EXT_nconf" text="X509_EXTENSION *X509V3_EXT_nconf(CONF *conf, X509V3_CTX *ctx, char *name,&#10;                                 char *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="name" text="char *name" mod=""/>
    <arg type="char" id="value" text="char *value" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_add_nconf_sk" text="int X509V3_EXT_add_nconf_sk(CONF *conf, X509V3_CTX *ctx, char *section,&#10;                            &#10;# 617 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                           struct stack_st_X509_EXTENSION &#10;# 617 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                    **sk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="section" text="char *section" mod=""/>
    <arg type="struct stack_st_X509_EXTENSION" id="sk" text="struct stack_st_X509_EXTENSION &#10;# 617 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                    **sk" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_add_nconf" text="int X509V3_EXT_add_nconf(CONF *conf, X509V3_CTX *ctx, char *section,&#10;                         X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="section" text="char *section" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_REQ_add_nconf" text="int X509V3_EXT_REQ_add_nconf(CONF *conf, X509V3_CTX *ctx, char *section,&#10;                             X509_REQ *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="section" text="char *section" mod=""/>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_CRL_add_nconf" text="int X509V3_EXT_CRL_add_nconf(CONF *conf, X509V3_CTX *ctx, char *section,&#10;                             X509_CRL *crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="section" text="char *section" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509V3_EXT_conf_nid" text="X509_EXTENSION *X509V3_EXT_conf_nid(&#10;# 625 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                                   struct lhash_st_CONF_VALUE &#10;# 625 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                        *conf,&#10;                                    X509V3_CTX *ctx, int ext_nid,&#10;                                    char *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 625 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                        *conf" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="int" id="ext_nid" text="int ext_nid" mod=""/>
    <arg type="char" id="value" text="char *value" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509V3_EXT_conf" text="X509_EXTENSION *X509V3_EXT_conf(&#10;# 628 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                               struct lhash_st_CONF_VALUE &#10;# 628 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                    *conf, X509V3_CTX *ctx,&#10;                                char *name, char *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 628 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                    *conf" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="name" text="char *name" mod=""/>
    <arg type="char" id="value" text="char *value" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_add_conf" text="int X509V3_EXT_add_conf(&#10;# 630 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                       struct lhash_st_CONF_VALUE &#10;# 630 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                            *conf, X509V3_CTX *ctx,&#10;                        char *section, X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 630 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                            *conf" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="section" text="char *section" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_REQ_add_conf" text="int X509V3_EXT_REQ_add_conf(&#10;# 632 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                           struct lhash_st_CONF_VALUE &#10;# 632 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                *conf, X509V3_CTX *ctx,&#10;                            char *section, X509_REQ *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 632 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                *conf" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="section" text="char *section" mod=""/>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_CRL_add_conf" text="int X509V3_EXT_CRL_add_conf(&#10;# 634 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                           struct lhash_st_CONF_VALUE &#10;# 634 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                *conf, X509V3_CTX *ctx,&#10;                            char *section, X509_CRL *crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="struct lhash_st_CONF_VALUE" id="conf" text="struct lhash_st_CONF_VALUE &#10;# 634 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                *conf" mod=""/>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="section" text="char *section" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_add_value_bool_nf" text="int X509V3_add_value_bool_nf(char *name, int asn1_bool,&#10;                             &#10;# 638 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                            struct stack_st_CONF_VALUE &#10;# 638 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                 **extlist)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="char" id="name" text="char *name" mod=""/>
    <arg type="int" id="asn1_bool" text="int asn1_bool" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="extlist" text="struct stack_st_CONF_VALUE &#10;# 638 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                 **extlist" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_get_value_bool" text="int X509V3_get_value_bool(CONF_VALUE *value, int *asn1_bool)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CONF_VALUE" id="value" text="CONF_VALUE *value" mod=""/>
    <arg type="int" id="asn1_bool" text="int *asn1_bool" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_get_value_int" text="int X509V3_get_value_int(CONF_VALUE *value, ASN1_INTEGER **aint)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="CONF_VALUE" id="value" text="CONF_VALUE *value" mod=""/>
    <arg type="ASN1_INTEGER" id="aint" text="ASN1_INTEGER **aint" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_set_nconf" text="void X509V3_set_nconf(X509V3_CTX *ctx, CONF *conf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_set_conf_lhash" text="void X509V3_set_conf_lhash(X509V3_CTX *ctx, &#10;# 642 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                                           struct lhash_st_CONF_VALUE &#10;# 642 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                                *lhash)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="struct lhash_st_CONF_VALUE" id="lhash" text="struct lhash_st_CONF_VALUE &#10;# 642 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                                *lhash" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="X509V3_get_string" text="char *X509V3_get_string(X509V3_CTX *ctx, char *name, char *section)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="name" text="char *name" mod=""/>
    <arg type="char" id="section" text="char *section" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_CONF_VALUE" id="X509V3_get_section" text="struct stack_st_CONF_VALUE &#10;# 646 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                    *X509V3_get_section(X509V3_CTX *ctx, char *section)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="section" text="char *section" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_string_free" text="void X509V3_string_free(X509V3_CTX *ctx, char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="char" id="str" text="char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_section_free" text="void X509V3_section_free(X509V3_CTX *ctx, &#10;# 648 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                                         struct stack_st_CONF_VALUE &#10;# 648 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                              *section)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="section" text="struct stack_st_CONF_VALUE &#10;# 648 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                              *section" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_set_ctx" text="void X509V3_set_ctx(X509V3_CTX *ctx, X509 *issuer, X509 *subject,&#10;                    X509_REQ *req, X509_CRL *crl, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_CTX" id="ctx" text="X509V3_CTX *ctx" mod=""/>
    <arg type="X509" id="issuer" text="X509 *issuer" mod=""/>
    <arg type="X509" id="subject" text="X509 *subject" mod=""/>
    <arg type="X509_REQ" id="req" text="X509_REQ *req" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_add_value" text="int X509V3_add_value(const char *name, const char *value,&#10;                     &#10;# 653 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                    struct stack_st_CONF_VALUE &#10;# 653 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                         **extlist)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="const char" id="value" text="const char *value" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="extlist" text="struct stack_st_CONF_VALUE &#10;# 653 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                         **extlist" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_add_value_uchar" text="int X509V3_add_value_uchar(const char *name, const unsigned char *value,&#10;                           &#10;# 655 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                          struct stack_st_CONF_VALUE &#10;# 655 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                               **extlist)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="const unsigned char" id="value" text="const unsigned char *value" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="extlist" text="struct stack_st_CONF_VALUE &#10;# 655 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                               **extlist" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_add_value_bool" text="int X509V3_add_value_bool(const char *name, int asn1_bool,&#10;                          &#10;# 657 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                         struct stack_st_CONF_VALUE &#10;# 657 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                              **extlist)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="int" id="asn1_bool" text="int asn1_bool" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="extlist" text="struct stack_st_CONF_VALUE &#10;# 657 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                              **extlist" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_add_value_int" text="int X509V3_add_value_int(const char *name, ASN1_INTEGER *aint,&#10;                         &#10;# 659 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                        struct stack_st_CONF_VALUE &#10;# 659 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                             **extlist)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="ASN1_INTEGER" id="aint" text="ASN1_INTEGER *aint" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="extlist" text="struct stack_st_CONF_VALUE &#10;# 659 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                             **extlist" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="i2s_ASN1_INTEGER" text="char *i2s_ASN1_INTEGER(X509V3_EXT_METHOD *meth, ASN1_INTEGER *aint)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="meth" text="X509V3_EXT_METHOD *meth" mod=""/>
    <arg type="ASN1_INTEGER" id="aint" text="ASN1_INTEGER *aint" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_INTEGER" id="s2i_ASN1_INTEGER" text="ASN1_INTEGER *s2i_ASN1_INTEGER(X509V3_EXT_METHOD *meth, char *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="meth" text="X509V3_EXT_METHOD *meth" mod=""/>
    <arg type="char" id="value" text="char *value" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="i2s_ASN1_ENUMERATED" text="char *i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD *meth, ASN1_ENUMERATED *aint)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="meth" text="X509V3_EXT_METHOD *meth" mod=""/>
    <arg type="ASN1_ENUMERATED" id="aint" text="ASN1_ENUMERATED *aint" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="i2s_ASN1_ENUMERATED_TABLE" text="char *i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD *meth,&#10;                                ASN1_ENUMERATED *aint)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="meth" text="X509V3_EXT_METHOD *meth" mod=""/>
    <arg type="ASN1_ENUMERATED" id="aint" text="ASN1_ENUMERATED *aint" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_add" text="int X509V3_EXT_add(X509V3_EXT_METHOD *ext)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="ext" text="X509V3_EXT_METHOD *ext" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_add_list" text="int X509V3_EXT_add_list(X509V3_EXT_METHOD *extlist)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509V3_EXT_METHOD" id="extlist" text="X509V3_EXT_METHOD *extlist" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_add_alias" text="int X509V3_EXT_add_alias(int nid_to, int nid_from)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="int" id="nid_to" text="int nid_to" mod=""/>
    <arg type="int" id="nid_from" text="int nid_from" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_EXT_cleanup" text="void X509V3_EXT_cleanup(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON37" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const X509V3_EXT_METHOD" id="X509V3_EXT_get" text="const X509V3_EXT_METHOD *X509V3_EXT_get(X509_EXTENSION *ext)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509_EXTENSION" id="ext" text="X509_EXTENSION *ext" mod=""/>
  </args>
</fdecl>
<fdecl type="const X509V3_EXT_METHOD" id="X509V3_EXT_get_nid" text="const X509V3_EXT_METHOD *X509V3_EXT_get_nid(int nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_add_standard_extensions" text="int X509V3_add_standard_extensions(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON38" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_CONF_VALUE" id="X509V3_parse_list" text="struct stack_st_CONF_VALUE &#10;# 673 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                    *X509V3_parse_list(const char *line)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const char" id="line" text="const char *line" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_EXT_d2i" text="void *X509V3_EXT_d2i(X509_EXTENSION *ext)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509_EXTENSION" id="ext" text="X509_EXTENSION *ext" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_get_d2i" text="void *X509V3_get_d2i(&#10;# 675 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                    struct stack_st_X509_EXTENSION &#10;# 675 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                             *x, int nid, int *crit,&#10;                     int *idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="struct stack_st_X509_EXTENSION" id="x" text="struct stack_st_X509_EXTENSION &#10;# 675 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                             *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="crit" text="int *crit" mod=""/>
    <arg type="int" id="idx" text="int *idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_free" text="int X509V3_EXT_free(int nid, void *ext_data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="void" id="ext_data" text="void *ext_data" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="X509V3_EXT_i2d" text="X509_EXTENSION *X509V3_EXT_i2d(int ext_nid, int crit, void *ext_struc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="int" id="ext_nid" text="int ext_nid" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="void" id="ext_struc" text="void *ext_struc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_add1_i2d" text="int X509V3_add1_i2d(&#10;# 680 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                   struct stack_st_X509_EXTENSION &#10;# 680 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                            **x, int nid, void *value,&#10;                    int crit, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="struct stack_st_X509_EXTENSION" id="x" text="struct stack_st_X509_EXTENSION &#10;# 680 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                            **x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="hex_to_string" text="char *hex_to_string(const unsigned char *buffer, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const unsigned char" id="buffer" text="const unsigned char *buffer" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="string_to_hex" text="unsigned char *string_to_hex(const char *str, long *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const char" id="str" text="const char *str" mod=""/>
    <arg type="long" id="len" text="long *len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="name_cmp" text="int name_cmp(const char *name, const char *cmp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="const char" id="cmp" text="const char *cmp" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509V3_EXT_val_prn" text="void X509V3_EXT_val_prn(BIO *out, &#10;# 687 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                                 struct stack_st_CONF_VALUE &#10;# 687 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                      *val, int indent,&#10;                        int ml)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="val" text="struct stack_st_CONF_VALUE &#10;# 687 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                      *val" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="int" id="ml" text="int ml" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_print" text="int X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag,&#10;                     int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="X509_EXTENSION" id="ext" text="X509_EXTENSION *ext" mod=""/>
    <arg type="unsigned long" id="flag" text="unsigned long flag" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_EXT_print_fp" text="int X509V3_EXT_print_fp(FILE *out, X509_EXTENSION *ext, int flag, int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="FILE" id="out" text="FILE *out" mod=""/>
    <arg type="X509_EXTENSION" id="ext" text="X509_EXTENSION *ext" mod=""/>
    <arg type="int" id="flag" text="int flag" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_extensions_print" text="int X509V3_extensions_print(BIO *out, char *title,&#10;                            &#10;# 694 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                           struct stack_st_X509_EXTENSION &#10;# 694 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                    *exts,&#10;                            unsigned long flag, int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="char" id="title" text="char *title" mod=""/>
    <arg type="struct stack_st_X509_EXTENSION" id="exts" text="struct stack_st_X509_EXTENSION &#10;# 694 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                    *exts" mod=""/>
    <arg type="unsigned long" id="flag" text="unsigned long flag" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_check_ca" text="int X509_check_ca(X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_check_purpose" text="int X509_check_purpose(X509 *x, int id, int ca)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="int" id="id" text="int id" mod=""/>
    <arg type="int" id="ca" text="int ca" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_supported_extension" text="int X509_supported_extension(X509_EXTENSION *ex)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_PURPOSE_set" text="int X509_PURPOSE_set(int *p, int purpose)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="int" id="p" text="int *p" mod=""/>
    <arg type="int" id="purpose" text="int purpose" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_check_issued" text="int X509_check_issued(X509 *issuer, X509 *subject)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509" id="issuer" text="X509 *issuer" mod=""/>
    <arg type="X509" id="subject" text="X509 *subject" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_check_akid" text="int X509_check_akid(X509 *issuer, AUTHORITY_KEYID *akid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509" id="issuer" text="X509 *issuer" mod=""/>
    <arg type="AUTHORITY_KEYID" id="akid" text="AUTHORITY_KEYID *akid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_PURPOSE_get_count" text="int X509_PURPOSE_get_count(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON39" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_PURPOSE" id="X509_PURPOSE_get0" text="X509_PURPOSE *X509_PURPOSE_get0(int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_PURPOSE_get_by_sname" text="int X509_PURPOSE_get_by_sname(char *sname)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="char" id="sname" text="char *sname" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_PURPOSE_get_by_id" text="int X509_PURPOSE_get_by_id(int id)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="int" id="id" text="int id" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_PURPOSE_add" text="int X509_PURPOSE_add(int id, int trust, int flags,&#10;                     int (*ck) (const X509_PURPOSE *, const X509 *, int),&#10;                     char *name, char *sname, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="int" id="id" text="int id" mod=""/>
    <arg type="int" id="trust" text="int trust" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="int" id="ck" text="int (*ck) (const X509_PURPOSE *, const X509 *, int)" mod=""/>
    <arg type="char" id="name" text="char *name" mod=""/>
    <arg type="char" id="sname" text="char *sname" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="X509_PURPOSE_get0_name" text="char *X509_PURPOSE_get0_name(X509_PURPOSE *xp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509_PURPOSE" id="xp" text="X509_PURPOSE *xp" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="X509_PURPOSE_get0_sname" text="char *X509_PURPOSE_get0_sname(X509_PURPOSE *xp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509_PURPOSE" id="xp" text="X509_PURPOSE *xp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_PURPOSE_get_trust" text="int X509_PURPOSE_get_trust(X509_PURPOSE *xp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509_PURPOSE" id="xp" text="X509_PURPOSE *xp" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_PURPOSE_cleanup" text="void X509_PURPOSE_cleanup(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON40" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_PURPOSE_get_id" text="int X509_PURPOSE_get_id(X509_PURPOSE *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509_PURPOSE" id="ANON41" text="X509_PURPOSE *" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_OPENSSL_STRING" id="X509_get1_email" text="struct stack_st_OPENSSL_STRING &#10;# 716 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                        *X509_get1_email(X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_OPENSSL_STRING" id="X509_REQ_get1_email" text="struct stack_st_OPENSSL_STRING &#10;# 717 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                        *X509_REQ_get1_email(X509_REQ *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509_REQ" id="x" text="X509_REQ *x" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_email_free" text="void X509_email_free(&#10;# 718 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                    struct stack_st_OPENSSL_STRING &#10;# 718 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                             *sk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="struct stack_st_OPENSSL_STRING" id="sk" text="struct stack_st_OPENSSL_STRING &#10;# 718 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                             *sk" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_OPENSSL_STRING" id="X509_get1_ocsp" text="struct stack_st_OPENSSL_STRING &#10;# 719 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                        *X509_get1_ocsp(X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_check_host" text="int X509_check_host(X509 *x, const char *chk, size_t chklen,&#10;                    unsigned int flags, char **peername)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="const char" id="chk" text="const char *chk" mod=""/>
    <arg type="size_t" id="chklen" text="size_t chklen" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
    <arg type="char" id="peername" text="char **peername" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_check_email" text="int X509_check_email(X509 *x, const char *chk, size_t chklen,&#10;                     unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="const char" id="chk" text="const char *chk" mod=""/>
    <arg type="size_t" id="chklen" text="size_t chklen" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_check_ip" text="int X509_check_ip(X509 *x, const unsigned char *chk, size_t chklen,&#10;                  unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="const unsigned char" id="chk" text="const unsigned char *chk" mod=""/>
    <arg type="size_t" id="chklen" text="size_t chklen" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509_check_ip_asc" text="int X509_check_ip_asc(X509 *x, const char *ipasc, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
    <arg type="const char" id="ipasc" text="const char *ipasc" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="a2i_IPADDRESS" text="ASN1_OCTET_STRING *a2i_IPADDRESS(const char *ipasc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const char" id="ipasc" text="const char *ipasc" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="a2i_IPADDRESS_NC" text="ASN1_OCTET_STRING *a2i_IPADDRESS_NC(const char *ipasc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="const char" id="ipasc" text="const char *ipasc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="a2i_ipadd" text="int a2i_ipadd(unsigned char *ipout, const char *ipasc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="unsigned char" id="ipout" text="unsigned char *ipout" mod=""/>
    <arg type="const char" id="ipasc" text="const char *ipasc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="X509V3_NAME_from_section" text="int X509V3_NAME_from_section(X509_NAME *nm, &#10;# 752 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot; 3 4&#10;                                           struct stack_st_CONF_VALUE &#10;# 752 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                                *dn_sk,&#10;                             unsigned long chtype)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="X509_NAME" id="nm" text="X509_NAME *nm" mod=""/>
    <arg type="struct stack_st_CONF_VALUE" id="dn_sk" text="struct stack_st_CONF_VALUE &#10;# 752 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h&quot;&#10;                                                                *dn_sk" mod=""/>
    <arg type="unsigned long" id="chtype" text="unsigned long chtype" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="X509_POLICY_NODE_print" text="void X509_POLICY_NODE_print(BIO *out, X509_POLICY_NODE *node, int indent)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="X509_POLICY_NODE" id="node" text="X509_POLICY_NODE *node" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_X509V3_strings" text="void ERR_load_X509V3_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/x509v3.h">
  <args>
    <arg type="void" id="ANON42" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="COMP_CTX" id="COMP_METHOD" text="typedef struct comp_method_st {&#10;    int type;&#10;    const char *name;&#10;    int (*init) (COMP_CTX *ctx);&#10;    void (*finish) (COMP_CTX *ctx);&#10;    int (*compress) (COMP_CTX *ctx,&#10;                     unsigned char *out, unsigned int olen,&#10;                     unsigned char *in, unsigned int ilen);&#10;    int (*expand) (COMP_CTX *ctx,&#10;                   unsigned char *out, unsigned int olen,&#10;                   unsigned char *in, unsigned int ilen);&#10;&#10;&#10;&#10;    long (*ctrl) (void);&#10;    long (*callback_ctrl) (void);&#10;} COMP_METHOD" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/comp.h">
  <args>
    <arg type="COMP_CTX" id="ctx" text="COMP_CTX *ctx" mod=""/>
    <arg type="COMP_CTX" id="ctx" text="COMP_CTX *ctx" mod=""/>
    <arg type="COMP_CTX" id="ctx" text="COMP_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="unsigned int" id="olen" text="unsigned int olen" mod=""/>
    <arg type="unsigned char" id="in" text="unsigned char *in" mod=""/>
    <arg type="unsigned int" id="ilen" text="unsigned int ilen" mod=""/>
    <arg type="COMP_CTX" id="ctx" text="COMP_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="unsigned int" id="olen" text="unsigned int olen" mod=""/>
    <arg type="unsigned char" id="in" text="unsigned char *in" mod=""/>
    <arg type="unsigned int" id="ilen" text="unsigned int ilen" mod=""/>
    <arg type="void" id="ANON0" text="void" mod=""/>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="COMP_CTX" id="COMP_CTX_new" text="COMP_CTX *COMP_CTX_new(COMP_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/comp.h">
  <args>
    <arg type="COMP_METHOD" id="meth" text="COMP_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="COMP_CTX_free" text="void COMP_CTX_free(COMP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/comp.h">
  <args>
    <arg type="COMP_CTX" id="ctx" text="COMP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="COMP_compress_block" text="int COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,&#10;                        unsigned char *in, int ilen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/comp.h">
  <args>
    <arg type="COMP_CTX" id="ctx" text="COMP_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="olen" text="int olen" mod=""/>
    <arg type="unsigned char" id="in" text="unsigned char *in" mod=""/>
    <arg type="int" id="ilen" text="int ilen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="COMP_expand_block" text="int COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,&#10;                      unsigned char *in, int ilen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/comp.h">
  <args>
    <arg type="COMP_CTX" id="ctx" text="COMP_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="int" id="olen" text="int olen" mod=""/>
    <arg type="unsigned char" id="in" text="unsigned char *in" mod=""/>
    <arg type="int" id="ilen" text="int ilen" mod=""/>
  </args>
</fdecl>
<fdecl type="COMP_METHOD" id="COMP_rle" text="COMP_METHOD *COMP_rle(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/comp.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="COMP_METHOD" id="COMP_zlib" text="COMP_METHOD *COMP_zlib(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/comp.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="COMP_zlib_cleanup" text="void COMP_zlib_cleanup(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/comp.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_COMP_strings" text="void ERR_load_COMP_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/comp.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="UI" id="UI_new" text="UI *UI_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="UI" id="UI_new_method" text="UI *UI_new_method(const UI_METHOD *method)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="const UI_METHOD" id="method" text="const UI_METHOD *method" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="UI_free" text="void UI_free(UI *ui)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_add_input_string" text="int UI_add_input_string(UI *ui, const char *prompt, int flags,&#10;                        char *result_buf, int minsize, int maxsize)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="char" id="result_buf" text="char *result_buf" mod=""/>
    <arg type="int" id="minsize" text="int minsize" mod=""/>
    <arg type="int" id="maxsize" text="int maxsize" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_dup_input_string" text="int UI_dup_input_string(UI *ui, const char *prompt, int flags,&#10;                        char *result_buf, int minsize, int maxsize)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="char" id="result_buf" text="char *result_buf" mod=""/>
    <arg type="int" id="minsize" text="int minsize" mod=""/>
    <arg type="int" id="maxsize" text="int maxsize" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_add_verify_string" text="int UI_add_verify_string(UI *ui, const char *prompt, int flags,&#10;                         char *result_buf, int minsize, int maxsize,&#10;                         const char *test_buf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="char" id="result_buf" text="char *result_buf" mod=""/>
    <arg type="int" id="minsize" text="int minsize" mod=""/>
    <arg type="int" id="maxsize" text="int maxsize" mod=""/>
    <arg type="const char" id="test_buf" text="const char *test_buf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_dup_verify_string" text="int UI_dup_verify_string(UI *ui, const char *prompt, int flags,&#10;                         char *result_buf, int minsize, int maxsize,&#10;                         const char *test_buf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="char" id="result_buf" text="char *result_buf" mod=""/>
    <arg type="int" id="minsize" text="int minsize" mod=""/>
    <arg type="int" id="maxsize" text="int maxsize" mod=""/>
    <arg type="const char" id="test_buf" text="const char *test_buf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_add_input_boolean" text="int UI_add_input_boolean(UI *ui, const char *prompt, const char *action_desc,&#10;                         const char *ok_chars, const char *cancel_chars,&#10;                         int flags, char *result_buf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="const char" id="action_desc" text="const char *action_desc" mod=""/>
    <arg type="const char" id="ok_chars" text="const char *ok_chars" mod=""/>
    <arg type="const char" id="cancel_chars" text="const char *cancel_chars" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="char" id="result_buf" text="char *result_buf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_dup_input_boolean" text="int UI_dup_input_boolean(UI *ui, const char *prompt, const char *action_desc,&#10;                         const char *ok_chars, const char *cancel_chars,&#10;                         int flags, char *result_buf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="const char" id="action_desc" text="const char *action_desc" mod=""/>
    <arg type="const char" id="ok_chars" text="const char *ok_chars" mod=""/>
    <arg type="const char" id="cancel_chars" text="const char *cancel_chars" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
    <arg type="char" id="result_buf" text="char *result_buf" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_add_info_string" text="int UI_add_info_string(UI *ui, const char *text)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="const char" id="text" text="const char *text" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_dup_info_string" text="int UI_dup_info_string(UI *ui, const char *text)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="const char" id="text" text="const char *text" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_add_error_string" text="int UI_add_error_string(UI *ui, const char *text)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="const char" id="text" text="const char *text" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_dup_error_string" text="int UI_dup_error_string(UI *ui, const char *text)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="const char" id="text" text="const char *text" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="UI_construct_prompt" text="char *UI_construct_prompt(UI *ui_method,&#10;                          const char *object_desc, const char *object_name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui_method" text="UI *ui_method" mod=""/>
    <arg type="const char" id="object_desc" text="const char *object_desc" mod=""/>
    <arg type="const char" id="object_name" text="const char *object_name" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="UI_add_user_data" text="void *UI_add_user_data(UI *ui, void *user_data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="void" id="user_data" text="void *user_data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="UI_get0_user_data" text="void *UI_get0_user_data(UI *ui)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="UI_get0_result" text="const char *UI_get0_result(UI *ui, int i)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="int" id="i" text="int i" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_process" text="int UI_process(UI *ui)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_ctrl" text="int UI_ctrl(UI *ui, int cmd, long i, void *p, void (*f) (void))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="i" text="long i" mod=""/>
    <arg type="void" id="p" text="void *p" mod=""/>
    <arg type="void" id="f" text="void (*f) (void)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_get_ex_new_index" text="int UI_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,&#10;                        CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_set_ex_data" text="int UI_set_ex_data(UI *r, int idx, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="r" text="UI *r" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="UI_get_ex_data" text="void *UI_get_ex_data(UI *r, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="r" text="UI *r" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="UI_set_default_method" text="void UI_set_default_method(const UI_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="const UI_METHOD" id="meth" text="const UI_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="const UI_METHOD" id="UI_get_default_method" text="const UI_METHOD *UI_get_default_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const UI_METHOD" id="UI_get_method" text="const UI_METHOD *UI_get_method(UI *ui)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
  </args>
</fdecl>
<fdecl type="const UI_METHOD" id="UI_set_method" text="const UI_METHOD *UI_set_method(UI *ui, const UI_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="const UI_METHOD" id="meth" text="const UI_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="UI_METHOD" id="UI_OpenSSL" text="UI_METHOD *UI_OpenSSL(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="UI_METHOD" id="UI_create_method" text="UI_METHOD *UI_create_method(char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="char" id="name" text="char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="UI_destroy_method" text="void UI_destroy_method(UI_METHOD *ui_method)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="ui_method" text="UI_METHOD *ui_method" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_method_set_opener" text="int UI_method_set_opener(UI_METHOD *method, int (*opener) (UI *ui))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="int" id="opener" text="int (*opener) (UI *ui)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_method_set_writer" text="int UI_method_set_writer(UI_METHOD *method,&#10;                         int (*writer) (UI *ui, UI_STRING *uis))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="int" id="writer" text="int (*writer) (UI *ui, UI_STRING *uis)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_method_set_flusher" text="int UI_method_set_flusher(UI_METHOD *method, int (*flusher) (UI *ui))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="int" id="flusher" text="int (*flusher) (UI *ui)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_method_set_reader" text="int UI_method_set_reader(UI_METHOD *method,&#10;                         int (*reader) (UI *ui, UI_STRING *uis))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="int" id="reader" text="int (*reader) (UI *ui, UI_STRING *uis)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_method_set_closer" text="int UI_method_set_closer(UI_METHOD *method, int (*closer) (UI *ui))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="int" id="closer" text="int (*closer) (UI *ui)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_method_set_prompt_constructor" text="int UI_method_set_prompt_constructor(UI_METHOD *method,&#10;                                     char *(*prompt_constructor) (UI *ui,&#10;                                                                  const char&#10;                                                                  *object_desc,&#10;                                                                  const char&#10;                                                                  *object_name))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="char" id="prompt_constructor" text="char *(*prompt_constructor) (UI *ui,&#10;                                                                  const char&#10;                                                                  *object_desc,&#10;                                                                  const char&#10;                                                                  *object_name)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_method_get_opener" text="int (*UI_method_get_opener(UI_METHOD *method)) (UI *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="UI" id="ANON3" text="UI *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_method_get_writer" text="int (*UI_method_get_writer(UI_METHOD *method)) (UI *, UI_STRING *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="UI" id="ANON4" text="UI *" mod=""/>
    <arg type="UI_STRING" id="ANON5" text="UI_STRING *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_method_get_flusher" text="int (*UI_method_get_flusher(UI_METHOD *method)) (UI *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="UI" id="ANON6" text="UI *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_method_get_reader" text="int (*UI_method_get_reader(UI_METHOD *method)) (UI *, UI_STRING *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="UI" id="ANON7" text="UI *" mod=""/>
    <arg type="UI_STRING" id="ANON8" text="UI_STRING *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_method_get_closer" text="int (*UI_method_get_closer(UI_METHOD *method)) (UI *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="UI" id="ANON9" text="UI *" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="UI_method_get_prompt_constructor" text="char *(*UI_method_get_prompt_constructor(UI_METHOD *method)) (UI *,&#10;                                                              const char *,&#10;                                                              const char *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_METHOD" id="method" text="UI_METHOD *method" mod=""/>
    <arg type="UI" id="ANON10" text="UI *" mod=""/>
    <arg type="const char" id="ANON11" text="const char *" mod=""/>
    <arg type="const char" id="ANON12" text="const char *" mod=""/>
  </args>
</fdecl>
<fdecl type="enum UI_string_types" id="UI_get_string_type" text="enum UI_string_types UI_get_string_type(UI_STRING *uis)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_STRING" id="uis" text="UI_STRING *uis" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_get_input_flags" text="int UI_get_input_flags(UI_STRING *uis)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_STRING" id="uis" text="UI_STRING *uis" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="UI_get0_output_string" text="const char *UI_get0_output_string(UI_STRING *uis)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_STRING" id="uis" text="UI_STRING *uis" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="UI_get0_action_string" text="const char *UI_get0_action_string(UI_STRING *uis)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_STRING" id="uis" text="UI_STRING *uis" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="UI_get0_result_string" text="const char *UI_get0_result_string(UI_STRING *uis)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_STRING" id="uis" text="UI_STRING *uis" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="UI_get0_test_string" text="const char *UI_get0_test_string(UI_STRING *uis)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_STRING" id="uis" text="UI_STRING *uis" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_get_result_minsize" text="int UI_get_result_minsize(UI_STRING *uis)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_STRING" id="uis" text="UI_STRING *uis" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_get_result_maxsize" text="int UI_get_result_maxsize(UI_STRING *uis)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI_STRING" id="uis" text="UI_STRING *uis" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_set_result" text="int UI_set_result(UI *ui, UI_STRING *uis, const char *result)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="UI" id="ui" text="UI *ui" mod=""/>
    <arg type="UI_STRING" id="uis" text="UI_STRING *uis" mod=""/>
    <arg type="const char" id="result" text="const char *result" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_UTIL_read_pw_string" text="int UI_UTIL_read_pw_string(char *buf, int length, const char *prompt,&#10;                           int verify)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="length" text="int length" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="verify" text="int verify" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="UI_UTIL_read_pw" text="int UI_UTIL_read_pw(char *buf, char *buff, int size, const char *prompt,&#10;                    int verify)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="char" id="buff" text="char *buff" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="verify" text="int verify" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_UI_strings" text="void ERR_load_UI_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui.h">
  <args>
    <arg type="void" id="ANON13" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="_ossl_old_des_read_pw_string" text="int _ossl_old_des_read_pw_string(char *buf, int length, const char *prompt,&#10;                                 int verify)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui_compat.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="length" text="int length" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="verify" text="int verify" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="_ossl_old_des_read_pw" text="int _ossl_old_des_read_pw(char *buf, char *buff, int size, const char *prompt,&#10;                          int verify)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ui_compat.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="char" id="buff" text="char *buff" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
    <arg type="const char" id="prompt" text="const char *prompt" mod=""/>
    <arg type="int" id="verify" text="int verify" mod=""/>
  </args>
</fdecl>
2016/10/27 18:45:24 FATAL  28069 Error in SLIF parse: No lexeme found at line 205, column 1
* String before error: ENCDATA)\nDECLARE_ASN1_FUNCTIONS(KRB5_PRINCNAME)\n
* The error was at line 205, column 1, and at character 0x0044 'D', ...
* here: DECLARE_ASN1_FUNCTIONS(KRB5_TKTBODY)\nDECLARE_ASN1
Marpa::R2 exception at /home/bicodul/perl5/lib/perl5/MarpaX/Languages/C/AST/Impl.pm line 73.

Last position:

At line 204, column 38

DECLARE_ASN1_FUNCTIONS(KRB5_PRINCNAME)
-------------------------------------^

<fdecl type="PKCS12_SAFEBAG" id="PKCS12_x5092certbag" text="PKCS12_SAFEBAG *PKCS12_x5092certbag(X509 *x509)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="X509" id="x509" text="X509 *x509" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_SAFEBAG" id="PKCS12_x509crl2certbag" text="PKCS12_SAFEBAG *PKCS12_x509crl2certbag(X509_CRL *crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="PKCS12_certbag2x509" text="X509 *PKCS12_certbag2x509(PKCS12_SAFEBAG *bag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_SAFEBAG" id="bag" text="PKCS12_SAFEBAG *bag" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_CRL" id="PKCS12_certbag2x509crl" text="X509_CRL *PKCS12_certbag2x509crl(PKCS12_SAFEBAG *bag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_SAFEBAG" id="bag" text="PKCS12_SAFEBAG *bag" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_SAFEBAG" id="PKCS12_item_pack_safebag" text="PKCS12_SAFEBAG *PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it,&#10;                                         int nid1, int nid2)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="void" id="obj" text="void *obj" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="int" id="nid1" text="int nid1" mod=""/>
    <arg type="int" id="nid2" text="int nid2" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_SAFEBAG" id="PKCS12_MAKE_KEYBAG" text="PKCS12_SAFEBAG *PKCS12_MAKE_KEYBAG(PKCS8_PRIV_KEY_INFO *p8)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS8_PRIV_KEY_INFO" id="p8" text="PKCS8_PRIV_KEY_INFO *p8" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS8_PRIV_KEY_INFO" id="PKCS8_decrypt" text="PKCS8_PRIV_KEY_INFO *PKCS8_decrypt(X509_SIG *p8, const char *pass,&#10;                                   int passlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="X509_SIG" id="p8" text="X509_SIG *p8" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS8_PRIV_KEY_INFO" id="PKCS12_decrypt_skey" text="PKCS8_PRIV_KEY_INFO *PKCS12_decrypt_skey(PKCS12_SAFEBAG *bag,&#10;                                         const char *pass, int passlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_SAFEBAG" id="bag" text="PKCS12_SAFEBAG *bag" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_SIG" id="PKCS8_encrypt" text="X509_SIG *PKCS8_encrypt(int pbe_nid, const EVP_CIPHER *cipher,&#10;                        const char *pass, int passlen, unsigned char *salt,&#10;                        int saltlen, int iter, PKCS8_PRIV_KEY_INFO *p8)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="int" id="pbe_nid" text="int pbe_nid" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="unsigned char" id="salt" text="unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="PKCS8_PRIV_KEY_INFO" id="p8" text="PKCS8_PRIV_KEY_INFO *p8" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_SAFEBAG" id="PKCS12_MAKE_SHKEYBAG" text="PKCS12_SAFEBAG *PKCS12_MAKE_SHKEYBAG(int pbe_nid, const char *pass,&#10;                                     int passlen, unsigned char *salt,&#10;                                     int saltlen, int iter,&#10;                                     PKCS8_PRIV_KEY_INFO *p8)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="int" id="pbe_nid" text="int pbe_nid" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="unsigned char" id="salt" text="unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="PKCS8_PRIV_KEY_INFO" id="p8" text="PKCS8_PRIV_KEY_INFO *p8" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="PKCS12_pack_p7data" text="PKCS7 *PKCS12_pack_p7data(&#10;# 191 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;                         struct stack_st_PKCS12_SAFEBAG &#10;# 191 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                  *sk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="struct stack_st_PKCS12_SAFEBAG" id="sk" text="struct stack_st_PKCS12_SAFEBAG &#10;# 191 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                  *sk" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_PKCS12_SAFEBAG" id="PKCS12_unpack_p7data" text="struct stack_st_PKCS12_SAFEBAG &#10;# 192 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                        *PKCS12_unpack_p7data(PKCS7 *p7)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="PKCS12_pack_p7encdata" text="PKCS7 *PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen,&#10;                             unsigned char *salt, int saltlen, int iter,&#10;                             &#10;# 195 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;                            struct stack_st_PKCS12_SAFEBAG &#10;# 195 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                     *bags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="int" id="pbe_nid" text="int pbe_nid" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="unsigned char" id="salt" text="unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="struct stack_st_PKCS12_SAFEBAG" id="bags" text="struct stack_st_PKCS12_SAFEBAG &#10;# 195 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                     *bags" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_PKCS12_SAFEBAG" id="PKCS12_unpack_p7encdata" text="struct stack_st_PKCS12_SAFEBAG &#10;# 196 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                        *PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass,&#10;                                                  int passlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_pack_authsafes" text="int PKCS12_pack_authsafes(PKCS12 *p12, &#10;# 199 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;                                      struct stack_st_PKCS7 &#10;# 199 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                      *safes)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12" id="p12" text="PKCS12 *p12" mod=""/>
    <arg type="struct stack_st_PKCS7" id="safes" text="struct stack_st_PKCS7 &#10;# 199 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                      *safes" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_PKCS7" id="PKCS12_unpack_authsafes" text="struct stack_st_PKCS7 &#10;# 200 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;               *PKCS12_unpack_authsafes(PKCS12 *p12)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12" id="p12" text="PKCS12 *p12" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_add_localkeyid" text="int PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned char *name,&#10;                          int namelen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_SAFEBAG" id="bag" text="PKCS12_SAFEBAG *bag" mod=""/>
    <arg type="unsigned char" id="name" text="unsigned char *name" mod=""/>
    <arg type="int" id="namelen" text="int namelen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_add_friendlyname_asc" text="int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name,&#10;                                int namelen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_SAFEBAG" id="bag" text="PKCS12_SAFEBAG *bag" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="int" id="namelen" text="int namelen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_add_CSPName_asc" text="int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name,&#10;                           int namelen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_SAFEBAG" id="bag" text="PKCS12_SAFEBAG *bag" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="int" id="namelen" text="int namelen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_add_friendlyname_uni" text="int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag,&#10;                                const unsigned char *name, int namelen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_SAFEBAG" id="bag" text="PKCS12_SAFEBAG *bag" mod=""/>
    <arg type="const unsigned char" id="name" text="const unsigned char *name" mod=""/>
    <arg type="int" id="namelen" text="int namelen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS8_add_keyusage" text="int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS8_PRIV_KEY_INFO" id="p8" text="PKCS8_PRIV_KEY_INFO *p8" mod=""/>
    <arg type="int" id="usage" text="int usage" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_TYPE" id="PKCS12_get_attr_gen" text="ASN1_TYPE *PKCS12_get_attr_gen(&#10;# 211 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;                              struct stack_st_X509_ATTRIBUTE &#10;# 211 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                       *attrs, int attr_nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="struct stack_st_X509_ATTRIBUTE" id="attrs" text="struct stack_st_X509_ATTRIBUTE &#10;# 211 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                       *attrs" mod=""/>
    <arg type="int" id="attr_nid" text="int attr_nid" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="PKCS12_get_friendlyname" text="char *PKCS12_get_friendlyname(PKCS12_SAFEBAG *bag)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_SAFEBAG" id="bag" text="PKCS12_SAFEBAG *bag" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="PKCS12_pbe_crypt" text="unsigned char *PKCS12_pbe_crypt(X509_ALGOR *algor, const char *pass,&#10;                                int passlen, unsigned char *in, int inlen,&#10;                                unsigned char **data, int *datalen,&#10;                                int en_de)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="X509_ALGOR" id="algor" text="X509_ALGOR *algor" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="unsigned char" id="in" text="unsigned char *in" mod=""/>
    <arg type="int" id="inlen" text="int inlen" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char **data" mod=""/>
    <arg type="int" id="datalen" text="int *datalen" mod=""/>
    <arg type="int" id="en_de" text="int en_de" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS12_item_decrypt_d2i" text="void *PKCS12_item_decrypt_d2i(X509_ALGOR *algor, const ASN1_ITEM *it,&#10;                              const char *pass, int passlen,&#10;                              ASN1_OCTET_STRING *oct, int zbuf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="X509_ALGOR" id="algor" text="X509_ALGOR *algor" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="oct" text="ASN1_OCTET_STRING *oct" mod=""/>
    <arg type="int" id="zbuf" text="int zbuf" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="PKCS12_item_i2d_encrypt" text="ASN1_OCTET_STRING *PKCS12_item_i2d_encrypt(X509_ALGOR *algor,&#10;                                           const ASN1_ITEM *it,&#10;                                           const char *pass, int passlen,&#10;                                           void *obj, int zbuf)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="X509_ALGOR" id="algor" text="X509_ALGOR *algor" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="void" id="obj" text="void *obj" mod=""/>
    <arg type="int" id="zbuf" text="int zbuf" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12" id="PKCS12_init" text="PKCS12 *PKCS12_init(int mode)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="int" id="mode" text="int mode" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_key_gen_asc" text="int PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt,&#10;                       int saltlen, int id, int iter, int n,&#10;                       unsigned char *out, const EVP_MD *md_type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="unsigned char" id="salt" text="unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
    <arg type="int" id="id" text="int id" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const EVP_MD" id="md_type" text="const EVP_MD *md_type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_key_gen_uni" text="int PKCS12_key_gen_uni(unsigned char *pass, int passlen, unsigned char *salt,&#10;                       int saltlen, int id, int iter, int n,&#10;                       unsigned char *out, const EVP_MD *md_type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="unsigned char" id="pass" text="unsigned char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="unsigned char" id="salt" text="unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
    <arg type="int" id="id" text="int id" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="const EVP_MD" id="md_type" text="const EVP_MD *md_type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_PBE_keyivgen" text="int PKCS12_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,&#10;                        ASN1_TYPE *param, const EVP_CIPHER *cipher,&#10;                        const EVP_MD *md_type, int en_de)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="EVP_CIPHER_CTX" id="ctx" text="EVP_CIPHER_CTX *ctx" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="ASN1_TYPE" id="param" text="ASN1_TYPE *param" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="const EVP_MD" id="md_type" text="const EVP_MD *md_type" mod=""/>
    <arg type="int" id="en_de" text="int en_de" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_gen_mac" text="int PKCS12_gen_mac(PKCS12 *p12, const char *pass, int passlen,&#10;                   unsigned char *mac, unsigned int *maclen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12" id="p12" text="PKCS12 *p12" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="unsigned char" id="mac" text="unsigned char *mac" mod=""/>
    <arg type="unsigned int" id="maclen" text="unsigned int *maclen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_verify_mac" text="int PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12" id="p12" text="PKCS12 *p12" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_set_mac" text="int PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen,&#10;                   unsigned char *salt, int saltlen, int iter,&#10;                   const EVP_MD *md_type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12" id="p12" text="PKCS12 *p12" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="int" id="passlen" text="int passlen" mod=""/>
    <arg type="unsigned char" id="salt" text="unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="const EVP_MD" id="md_type" text="const EVP_MD *md_type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_setup_mac" text="int PKCS12_setup_mac(PKCS12 *p12, int iter, unsigned char *salt,&#10;                     int saltlen, const EVP_MD *md_type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12" id="p12" text="PKCS12 *p12" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="unsigned char" id="salt" text="unsigned char *salt" mod=""/>
    <arg type="int" id="saltlen" text="int saltlen" mod=""/>
    <arg type="const EVP_MD" id="md_type" text="const EVP_MD *md_type" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned char" id="OPENSSL_asc2uni" text="unsigned char *OPENSSL_asc2uni(const char *asc, int asclen,&#10;                               unsigned char **uni, int *unilen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="const char" id="asc" text="const char *asc" mod=""/>
    <arg type="int" id="asclen" text="int asclen" mod=""/>
    <arg type="unsigned char" id="uni" text="unsigned char **uni" mod=""/>
    <arg type="int" id="unilen" text="int *unilen" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="OPENSSL_uni2asc" text="char *OPENSSL_uni2asc(unsigned char *uni, int unilen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="unsigned char" id="uni" text="unsigned char *uni" mod=""/>
    <arg type="int" id="unilen" text="int unilen" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12" id="PKCS12_new" text="PKCS12 &#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*&#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_new&#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS12_free" text="void &#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_free&#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;(&#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12 &#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12" id="a" text="PKCS12 &#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12" id="d2i_PKCS12" text="PKCS12 &#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*d2i_PKCS12(&#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12 &#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12" id="a" text="PKCS12 &#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS12" text="int i2d_PKCS12(&#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12 &#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12" id="a" text="PKCS12 &#10;# 246 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_MAC_DATA" id="PKCS12_MAC_DATA_new" text="PKCS12_MAC_DATA &#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*&#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_MAC_DATA_new&#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS12_MAC_DATA_free" text="void &#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_MAC_DATA_free&#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;(&#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_MAC_DATA &#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_MAC_DATA" id="a" text="PKCS12_MAC_DATA &#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_MAC_DATA" id="d2i_PKCS12_MAC_DATA" text="PKCS12_MAC_DATA &#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*d2i_PKCS12_MAC_DATA(&#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_MAC_DATA &#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_MAC_DATA" id="a" text="PKCS12_MAC_DATA &#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS12_MAC_DATA" text="int i2d_PKCS12_MAC_DATA(&#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_MAC_DATA &#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_MAC_DATA" id="a" text="PKCS12_MAC_DATA &#10;# 247 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_SAFEBAG" id="PKCS12_SAFEBAG_new" text="PKCS12_SAFEBAG &#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*&#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_SAFEBAG_new&#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS12_SAFEBAG_free" text="void &#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_SAFEBAG_free&#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;(&#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_SAFEBAG &#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_SAFEBAG" id="a" text="PKCS12_SAFEBAG &#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_SAFEBAG" id="d2i_PKCS12_SAFEBAG" text="PKCS12_SAFEBAG &#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*d2i_PKCS12_SAFEBAG(&#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_SAFEBAG &#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_SAFEBAG" id="a" text="PKCS12_SAFEBAG &#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS12_SAFEBAG" text="int i2d_PKCS12_SAFEBAG(&#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_SAFEBAG &#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_SAFEBAG" id="a" text="PKCS12_SAFEBAG &#10;# 248 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_BAGS" id="PKCS12_BAGS_new" text="PKCS12_BAGS &#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*&#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_BAGS_new&#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS12_BAGS_free" text="void &#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_BAGS_free&#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;(&#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_BAGS &#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_BAGS" id="a" text="PKCS12_BAGS &#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_BAGS" id="d2i_PKCS12_BAGS" text="PKCS12_BAGS &#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*d2i_PKCS12_BAGS(&#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_BAGS &#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_BAGS" id="a" text="PKCS12_BAGS &#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS12_BAGS" text="int i2d_PKCS12_BAGS(&#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;PKCS12_BAGS &#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12_BAGS" id="a" text="PKCS12_BAGS &#10;# 249 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="PKCS12_PBE_add" text="void PKCS12_PBE_add(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_parse" text="int PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert,&#10;                 &#10;# 256 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;                struct stack_st_X509 &#10;# 256 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                               **ca)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12" id="p12" text="PKCS12 *p12" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY **pkey" mod=""/>
    <arg type="X509" id="cert" text="X509 **cert" mod=""/>
    <arg type="struct stack_st_X509" id="ca" text="struct stack_st_X509 &#10;# 256 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                               **ca" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12" id="PKCS12_create" text="PKCS12 *PKCS12_create(char *pass, char *name, EVP_PKEY *pkey, X509 *cert,&#10;                      &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;                     struct stack_st_X509 &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                    *ca, int nid_key, int nid_cert, int iter,&#10;                      int mac_iter, int keytype)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="char" id="pass" text="char *pass" mod=""/>
    <arg type="char" id="name" text="char *name" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
    <arg type="struct stack_st_X509" id="ca" text="struct stack_st_X509 &#10;# 258 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                    *ca" mod=""/>
    <arg type="int" id="nid_key" text="int nid_key" mod=""/>
    <arg type="int" id="nid_cert" text="int nid_cert" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="int" id="mac_iter" text="int mac_iter" mod=""/>
    <arg type="int" id="keytype" text="int keytype" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_SAFEBAG" id="PKCS12_add_cert" text="PKCS12_SAFEBAG *PKCS12_add_cert(&#10;# 261 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;                               struct stack_st_PKCS12_SAFEBAG &#10;# 261 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                        **pbags, X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="struct stack_st_PKCS12_SAFEBAG" id="pbags" text="struct stack_st_PKCS12_SAFEBAG &#10;# 261 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                        **pbags" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12_SAFEBAG" id="PKCS12_add_key" text="PKCS12_SAFEBAG *PKCS12_add_key(&#10;# 262 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;                              struct stack_st_PKCS12_SAFEBAG &#10;# 262 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                       **pbags,&#10;                               EVP_PKEY *key, int key_usage, int iter,&#10;                               int key_nid, char *pass)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="struct stack_st_PKCS12_SAFEBAG" id="pbags" text="struct stack_st_PKCS12_SAFEBAG &#10;# 262 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                       **pbags" mod=""/>
    <arg type="EVP_PKEY" id="key" text="EVP_PKEY *key" mod=""/>
    <arg type="int" id="key_usage" text="int key_usage" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="int" id="key_nid" text="int key_nid" mod=""/>
    <arg type="char" id="pass" text="char *pass" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_add_safe" text="int PKCS12_add_safe(&#10;# 265 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;                   struct stack_st_PKCS7 &#10;# 265 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                   **psafes, &#10;# 265 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;                                             struct stack_st_PKCS12_SAFEBAG &#10;# 265 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                                      *bags,&#10;                    int safe_nid, int iter, char *pass)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="struct stack_st_PKCS7" id="psafes" text="struct stack_st_PKCS7 &#10;# 265 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                   **psafes" mod=""/>
    <arg type="struct stack_st_PKCS12_SAFEBAG" id="bags" text="struct stack_st_PKCS12_SAFEBAG &#10;# 265 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                                                      *bags" mod=""/>
    <arg type="int" id="safe_nid" text="int safe_nid" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="char" id="pass" text="char *pass" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12" id="PKCS12_add_safes" text="PKCS12 *PKCS12_add_safes(&#10;# 267 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot; 3 4&#10;                        struct stack_st_PKCS7 &#10;# 267 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                        *safes, int p7_nid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="struct stack_st_PKCS7" id="safes" text="struct stack_st_PKCS7 &#10;# 267 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h&quot;&#10;                                        *safes" mod=""/>
    <arg type="int" id="p7_nid" text="int p7_nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS12_bio" text="int i2d_PKCS12_bio(BIO *bp, PKCS12 *p12)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="PKCS12" id="p12" text="PKCS12 *p12" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_PKCS12_fp" text="int i2d_PKCS12_fp(FILE *fp, PKCS12 *p12)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="PKCS12" id="p12" text="PKCS12 *p12" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12" id="d2i_PKCS12_bio" text="PKCS12 *d2i_PKCS12_bio(BIO *bp, PKCS12 **p12)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="PKCS12" id="p12" text="PKCS12 **p12" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS12" id="d2i_PKCS12_fp" text="PKCS12 *d2i_PKCS12_fp(FILE *fp, PKCS12 **p12)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="PKCS12" id="p12" text="PKCS12 **p12" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PKCS12_newpass" text="int PKCS12_newpass(PKCS12 *p12, char *oldpass, char *newpass)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="PKCS12" id="p12" text="PKCS12 *p12" mod=""/>
    <arg type="char" id="oldpass" text="char *oldpass" mod=""/>
    <arg type="char" id="newpass" text="char *newpass" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_PKCS12_strings" text="void ERR_load_PKCS12_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pkcs12.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="pitem" id="pitem_new" text="pitem *pitem_new(unsigned char *prio64be, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="unsigned char" id="prio64be" text="unsigned char *prio64be" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="pitem_free" text="void pitem_free(pitem *item)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="pitem" id="item" text="pitem *item" mod=""/>
  </args>
</fdecl>
<fdecl type="pqueue" id="pqueue_new" text="pqueue pqueue_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="pqueue_free" text="void pqueue_free(pqueue pq)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="pqueue" id="pq" text="pqueue pq" mod=""/>
  </args>
</fdecl>
<fdecl type="pitem" id="pqueue_insert" text="pitem *pqueue_insert(pqueue pq, pitem *item)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="pqueue" id="pq" text="pqueue pq" mod=""/>
    <arg type="pitem" id="item" text="pitem *item" mod=""/>
  </args>
</fdecl>
<fdecl type="pitem" id="pqueue_peek" text="pitem *pqueue_peek(pqueue pq)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="pqueue" id="pq" text="pqueue pq" mod=""/>
  </args>
</fdecl>
<fdecl type="pitem" id="pqueue_pop" text="pitem *pqueue_pop(pqueue pq)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="pqueue" id="pq" text="pqueue pq" mod=""/>
  </args>
</fdecl>
<fdecl type="pitem" id="pqueue_find" text="pitem *pqueue_find(pqueue pq, unsigned char *prio64be)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="pqueue" id="pq" text="pqueue pq" mod=""/>
    <arg type="unsigned char" id="prio64be" text="unsigned char *prio64be" mod=""/>
  </args>
</fdecl>
<fdecl type="pitem" id="pqueue_iterator" text="pitem *pqueue_iterator(pqueue pq)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="pqueue" id="pq" text="pqueue pq" mod=""/>
  </args>
</fdecl>
<fdecl type="pitem" id="pqueue_next" text="pitem *pqueue_next(piterator *iter)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="piterator" id="iter" text="piterator *iter" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="pqueue_print" text="void pqueue_print(pqueue pq)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="pqueue" id="pq" text="pqueue pq" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="pqueue_size" text="int pqueue_size(pqueue pq)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/pqueue.h">
  <args>
    <arg type="pqueue" id="pq" text="pqueue pq" mod=""/>
  </args>
</fdecl>

<fdecl type="OCSP_RESPID" id="OCSP_RESPID_new" text="OCSP_RESPID &#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPID_new&#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_RESPID_free" text="void &#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPID_free&#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPID &#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPID" id="a" text="OCSP_RESPID &#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_RESPID" id="d2i_OCSP_RESPID" text="OCSP_RESPID &#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_RESPID(&#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPID &#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPID" id="a" text="OCSP_RESPID &#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_RESPID" text="int i2d_OCSP_RESPID(&#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPID &#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPID" id="a" text="OCSP_RESPID &#10;# 206 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_CERTID" id="OCSP_CERTID_dup" text="OCSP_CERTID *OCSP_CERTID_dup(OCSP_CERTID *id)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CERTID" id="id" text="OCSP_CERTID *id" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_RESPONSE" id="OCSP_sendreq_bio" text="OCSP_RESPONSE *OCSP_sendreq_bio(BIO *b, const char *path, OCSP_REQUEST *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="BIO" id="b" text="BIO *b" mod=""/>
    <arg type="const char" id="path" text="const char *path" mod=""/>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_REQ_CTX" id="OCSP_sendreq_new" text="OCSP_REQ_CTX *OCSP_sendreq_new(BIO *io, const char *path, OCSP_REQUEST *req,&#10;                               int maxline)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="BIO" id="io" text="BIO *io" mod=""/>
    <arg type="const char" id="path" text="const char *path" mod=""/>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
    <arg type="int" id="maxline" text="int maxline" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQ_CTX_nbio" text="int OCSP_REQ_CTX_nbio(OCSP_REQ_CTX *rctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_sendreq_nbio" text="int OCSP_sendreq_nbio(OCSP_RESPONSE **presp, OCSP_REQ_CTX *rctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPONSE" id="presp" text="OCSP_RESPONSE **presp" mod=""/>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_REQ_CTX" id="OCSP_REQ_CTX_new" text="OCSP_REQ_CTX *OCSP_REQ_CTX_new(BIO *io, int maxline)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="BIO" id="io" text="BIO *io" mod=""/>
    <arg type="int" id="maxline" text="int maxline" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_REQ_CTX_free" text="void OCSP_REQ_CTX_free(OCSP_REQ_CTX *rctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_set_max_response_length" text="void OCSP_set_max_response_length(OCSP_REQ_CTX *rctx, unsigned long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
    <arg type="unsigned long" id="len" text="unsigned long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQ_CTX_i2d" text="int OCSP_REQ_CTX_i2d(OCSP_REQ_CTX *rctx, const ASN1_ITEM *it,&#10;                     ASN1_VALUE *val)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="ASN1_VALUE" id="val" text="ASN1_VALUE *val" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQ_CTX_nbio_d2i" text="int OCSP_REQ_CTX_nbio_d2i(OCSP_REQ_CTX *rctx, ASN1_VALUE **pval,&#10;                          const ASN1_ITEM *it)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
    <arg type="ASN1_VALUE" id="pval" text="ASN1_VALUE **pval" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="OCSP_REQ_CTX_get0_mem_bio" text="BIO *OCSP_REQ_CTX_get0_mem_bio(OCSP_REQ_CTX *rctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQ_CTX_i2d" text="int OCSP_REQ_CTX_i2d(OCSP_REQ_CTX *rctx, const ASN1_ITEM *it,&#10;                     ASN1_VALUE *val)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
    <arg type="const ASN1_ITEM" id="it" text="const ASN1_ITEM *it" mod=""/>
    <arg type="ASN1_VALUE" id="val" text="ASN1_VALUE *val" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQ_CTX_http" text="int OCSP_REQ_CTX_http(OCSP_REQ_CTX *rctx, const char *op, const char *path)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
    <arg type="const char" id="op" text="const char *op" mod=""/>
    <arg type="const char" id="path" text="const char *path" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQ_CTX_set1_req" text="int OCSP_REQ_CTX_set1_req(OCSP_REQ_CTX *rctx, OCSP_REQUEST *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQ_CTX_add1_header" text="int OCSP_REQ_CTX_add1_header(OCSP_REQ_CTX *rctx,&#10;                             const char *name, const char *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQ_CTX" id="rctx" text="OCSP_REQ_CTX *rctx" mod=""/>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="const char" id="value" text="const char *value" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_CERTID" id="OCSP_cert_to_id" text="OCSP_CERTID *OCSP_cert_to_id(const EVP_MD *dgst, X509 *subject, X509 *issuer)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="const EVP_MD" id="dgst" text="const EVP_MD *dgst" mod=""/>
    <arg type="X509" id="subject" text="X509 *subject" mod=""/>
    <arg type="X509" id="issuer" text="X509 *issuer" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_CERTID" id="OCSP_cert_id_new" text="OCSP_CERTID *OCSP_cert_id_new(const EVP_MD *dgst,&#10;                              X509_NAME *issuerName,&#10;                              ASN1_BIT_STRING *issuerKey,&#10;                              ASN1_INTEGER *serialNumber)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="const EVP_MD" id="dgst" text="const EVP_MD *dgst" mod=""/>
    <arg type="X509_NAME" id="issuerName" text="X509_NAME *issuerName" mod=""/>
    <arg type="ASN1_BIT_STRING" id="issuerKey" text="ASN1_BIT_STRING *issuerKey" mod=""/>
    <arg type="ASN1_INTEGER" id="serialNumber" text="ASN1_INTEGER *serialNumber" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_ONEREQ" id="OCSP_request_add0_id" text="OCSP_ONEREQ *OCSP_request_add0_id(OCSP_REQUEST *req, OCSP_CERTID *cid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
    <arg type="OCSP_CERTID" id="cid" text="OCSP_CERTID *cid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_request_add1_nonce" text="int OCSP_request_add1_nonce(OCSP_REQUEST *req, unsigned char *val, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
    <arg type="unsigned char" id="val" text="unsigned char *val" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_basic_add1_nonce" text="int OCSP_basic_add1_nonce(OCSP_BASICRESP *resp, unsigned char *val, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="resp" text="OCSP_BASICRESP *resp" mod=""/>
    <arg type="unsigned char" id="val" text="unsigned char *val" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_check_nonce" text="int OCSP_check_nonce(OCSP_REQUEST *req, OCSP_BASICRESP *bs)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
    <arg type="OCSP_BASICRESP" id="bs" text="OCSP_BASICRESP *bs" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_copy_nonce" text="int OCSP_copy_nonce(OCSP_BASICRESP *resp, OCSP_REQUEST *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="resp" text="OCSP_BASICRESP *resp" mod=""/>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_request_set1_name" text="int OCSP_request_set1_name(OCSP_REQUEST *req, X509_NAME *nm)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
    <arg type="X509_NAME" id="nm" text="X509_NAME *nm" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_request_add1_cert" text="int OCSP_request_add1_cert(OCSP_REQUEST *req, X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_request_sign" text="int OCSP_request_sign(OCSP_REQUEST *req,&#10;                      X509 *signer,&#10;                      EVP_PKEY *key,&#10;                      const EVP_MD *dgst,&#10;                      &#10;# 438 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;                     struct stack_st_X509 &#10;# 438 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;                                    *certs, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
    <arg type="X509" id="signer" text="X509 *signer" mod=""/>
    <arg type="EVP_PKEY" id="key" text="EVP_PKEY *key" mod=""/>
    <arg type="const EVP_MD" id="dgst" text="const EVP_MD *dgst" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 438 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;                                    *certs" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_response_status" text="int OCSP_response_status(OCSP_RESPONSE *resp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPONSE" id="resp" text="OCSP_RESPONSE *resp" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_BASICRESP" id="OCSP_response_get1_basic" text="OCSP_BASICRESP *OCSP_response_get1_basic(OCSP_RESPONSE *resp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPONSE" id="resp" text="OCSP_RESPONSE *resp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_resp_count" text="int OCSP_resp_count(OCSP_BASICRESP *bs)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="bs" text="OCSP_BASICRESP *bs" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_SINGLERESP" id="OCSP_resp_get0" text="OCSP_SINGLERESP *OCSP_resp_get0(OCSP_BASICRESP *bs, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="bs" text="OCSP_BASICRESP *bs" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_resp_find" text="int OCSP_resp_find(OCSP_BASICRESP *bs, OCSP_CERTID *id, int last)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="bs" text="OCSP_BASICRESP *bs" mod=""/>
    <arg type="OCSP_CERTID" id="id" text="OCSP_CERTID *id" mod=""/>
    <arg type="int" id="last" text="int last" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_single_get0_status" text="int OCSP_single_get0_status(OCSP_SINGLERESP *single, int *reason,&#10;                            ASN1_GENERALIZEDTIME **revtime,&#10;                            ASN1_GENERALIZEDTIME **thisupd,&#10;                            ASN1_GENERALIZEDTIME **nextupd)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="single" text="OCSP_SINGLERESP *single" mod=""/>
    <arg type="int" id="reason" text="int *reason" mod=""/>
    <arg type="ASN1_GENERALIZEDTIME" id="revtime" text="ASN1_GENERALIZEDTIME **revtime" mod=""/>
    <arg type="ASN1_GENERALIZEDTIME" id="thisupd" text="ASN1_GENERALIZEDTIME **thisupd" mod=""/>
    <arg type="ASN1_GENERALIZEDTIME" id="nextupd" text="ASN1_GENERALIZEDTIME **nextupd" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_resp_find_status" text="int OCSP_resp_find_status(OCSP_BASICRESP *bs, OCSP_CERTID *id, int *status,&#10;                          int *reason,&#10;                          ASN1_GENERALIZEDTIME **revtime,&#10;                          ASN1_GENERALIZEDTIME **thisupd,&#10;                          ASN1_GENERALIZEDTIME **nextupd)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="bs" text="OCSP_BASICRESP *bs" mod=""/>
    <arg type="OCSP_CERTID" id="id" text="OCSP_CERTID *id" mod=""/>
    <arg type="int" id="status" text="int *status" mod=""/>
    <arg type="int" id="reason" text="int *reason" mod=""/>
    <arg type="ASN1_GENERALIZEDTIME" id="revtime" text="ASN1_GENERALIZEDTIME **revtime" mod=""/>
    <arg type="ASN1_GENERALIZEDTIME" id="thisupd" text="ASN1_GENERALIZEDTIME **thisupd" mod=""/>
    <arg type="ASN1_GENERALIZEDTIME" id="nextupd" text="ASN1_GENERALIZEDTIME **nextupd" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_check_validity" text="int OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd,&#10;                        ASN1_GENERALIZEDTIME *nextupd, long sec, long maxsec)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="ASN1_GENERALIZEDTIME" id="thisupd" text="ASN1_GENERALIZEDTIME *thisupd" mod=""/>
    <arg type="ASN1_GENERALIZEDTIME" id="nextupd" text="ASN1_GENERALIZEDTIME *nextupd" mod=""/>
    <arg type="long" id="sec" text="long sec" mod=""/>
    <arg type="long" id="maxsec" text="long maxsec" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_request_verify" text="int OCSP_request_verify(OCSP_REQUEST *req, &#10;# 458 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;                                          struct stack_st_X509 &#10;# 458 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;                                                         *certs,&#10;                        X509_STORE *store, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 458 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;                                                         *certs" mod=""/>
    <arg type="X509_STORE" id="store" text="X509_STORE *store" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_parse_url" text="int OCSP_parse_url(const char *url, char **phost, char **pport, char **ppath,&#10;                   int *pssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="const char" id="url" text="const char *url" mod=""/>
    <arg type="char" id="phost" text="char **phost" mod=""/>
    <arg type="char" id="pport" text="char **pport" mod=""/>
    <arg type="char" id="ppath" text="char **ppath" mod=""/>
    <arg type="int" id="pssl" text="int *pssl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_id_issuer_cmp" text="int OCSP_id_issuer_cmp(OCSP_CERTID *a, OCSP_CERTID *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CERTID" id="a" text="OCSP_CERTID *a" mod=""/>
    <arg type="OCSP_CERTID" id="b" text="OCSP_CERTID *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_id_cmp" text="int OCSP_id_cmp(OCSP_CERTID *a, OCSP_CERTID *b)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CERTID" id="a" text="OCSP_CERTID *a" mod=""/>
    <arg type="OCSP_CERTID" id="b" text="OCSP_CERTID *b" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_request_onereq_count" text="int OCSP_request_onereq_count(OCSP_REQUEST *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_ONEREQ" id="OCSP_request_onereq_get0" text="OCSP_ONEREQ *OCSP_request_onereq_get0(OCSP_REQUEST *req, int i)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
    <arg type="int" id="i" text="int i" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_CERTID" id="OCSP_onereq_get0_id" text="OCSP_CERTID *OCSP_onereq_get0_id(OCSP_ONEREQ *one)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="one" text="OCSP_ONEREQ *one" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_id_get0_info" text="int OCSP_id_get0_info(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd,&#10;                      ASN1_OCTET_STRING **pikeyHash,&#10;                      ASN1_INTEGER **pserial, OCSP_CERTID *cid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="ASN1_OCTET_STRING" id="piNameHash" text="ASN1_OCTET_STRING **piNameHash" mod=""/>
    <arg type="ASN1_OBJECT" id="pmd" text="ASN1_OBJECT **pmd" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="pikeyHash" text="ASN1_OCTET_STRING **pikeyHash" mod=""/>
    <arg type="ASN1_INTEGER" id="pserial" text="ASN1_INTEGER **pserial" mod=""/>
    <arg type="OCSP_CERTID" id="cid" text="OCSP_CERTID *cid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_request_is_signed" text="int OCSP_request_is_signed(OCSP_REQUEST *req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="req" text="OCSP_REQUEST *req" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_RESPONSE" id="OCSP_response_create" text="OCSP_RESPONSE *OCSP_response_create(int status, OCSP_BASICRESP *bs)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="int" id="status" text="int status" mod=""/>
    <arg type="OCSP_BASICRESP" id="bs" text="OCSP_BASICRESP *bs" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_SINGLERESP" id="OCSP_basic_add1_status" text="OCSP_SINGLERESP *OCSP_basic_add1_status(OCSP_BASICRESP *rsp,&#10;                                        OCSP_CERTID *cid,&#10;                                        int status, int reason,&#10;                                        ASN1_TIME *revtime,&#10;                                        ASN1_TIME *thisupd,&#10;                                        ASN1_TIME *nextupd)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="rsp" text="OCSP_BASICRESP *rsp" mod=""/>
    <arg type="OCSP_CERTID" id="cid" text="OCSP_CERTID *cid" mod=""/>
    <arg type="int" id="status" text="int status" mod=""/>
    <arg type="int" id="reason" text="int reason" mod=""/>
    <arg type="ASN1_TIME" id="revtime" text="ASN1_TIME *revtime" mod=""/>
    <arg type="ASN1_TIME" id="thisupd" text="ASN1_TIME *thisupd" mod=""/>
    <arg type="ASN1_TIME" id="nextupd" text="ASN1_TIME *nextupd" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_basic_add1_cert" text="int OCSP_basic_add1_cert(OCSP_BASICRESP *resp, X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="resp" text="OCSP_BASICRESP *resp" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_basic_sign" text="int OCSP_basic_sign(OCSP_BASICRESP *brsp,&#10;                    X509 *signer, EVP_PKEY *key, const EVP_MD *dgst,&#10;                    &#10;# 484 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;                   struct stack_st_X509 &#10;# 484 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;                                  *certs, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="brsp" text="OCSP_BASICRESP *brsp" mod=""/>
    <arg type="X509" id="signer" text="X509 *signer" mod=""/>
    <arg type="EVP_PKEY" id="key" text="EVP_PKEY *key" mod=""/>
    <arg type="const EVP_MD" id="dgst" text="const EVP_MD *dgst" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 484 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;                                  *certs" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_crlID_new" text="X509_EXTENSION *OCSP_crlID_new(char *url, long *n, char *tim)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="char" id="url" text="char *url" mod=""/>
    <arg type="long" id="n" text="long *n" mod=""/>
    <arg type="char" id="tim" text="char *tim" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_accept_responses_new" text="X509_EXTENSION *OCSP_accept_responses_new(char **oids)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="char" id="oids" text="char **oids" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_archive_cutoff_new" text="X509_EXTENSION *OCSP_archive_cutoff_new(char *tim)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="char" id="tim" text="char *tim" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_url_svcloc_new" text="X509_EXTENSION *OCSP_url_svcloc_new(X509_NAME *issuer, char **urls)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="X509_NAME" id="issuer" text="X509_NAME *issuer" mod=""/>
    <arg type="char" id="urls" text="char **urls" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQUEST_get_ext_count" text="int OCSP_REQUEST_get_ext_count(OCSP_REQUEST *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="x" text="OCSP_REQUEST *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQUEST_get_ext_by_NID" text="int OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST *x, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="x" text="OCSP_REQUEST *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQUEST_get_ext_by_OBJ" text="int OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST *x, ASN1_OBJECT *obj,&#10;                                int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="x" text="OCSP_REQUEST *x" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQUEST_get_ext_by_critical" text="int OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST *x, int crit, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="x" text="OCSP_REQUEST *x" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_REQUEST_get_ext" text="X509_EXTENSION *OCSP_REQUEST_get_ext(OCSP_REQUEST *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="x" text="OCSP_REQUEST *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_REQUEST_delete_ext" text="X509_EXTENSION *OCSP_REQUEST_delete_ext(OCSP_REQUEST *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="x" text="OCSP_REQUEST *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_REQUEST_get1_ext_d2i" text="void *OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST *x, int nid, int *crit,&#10;                                int *idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="x" text="OCSP_REQUEST *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="crit" text="int *crit" mod=""/>
    <arg type="int" id="idx" text="int *idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQUEST_add1_ext_i2d" text="int OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST *x, int nid, void *value, int crit,&#10;                              unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="x" text="OCSP_REQUEST *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQUEST_add_ext" text="int OCSP_REQUEST_add_ext(OCSP_REQUEST *x, X509_EXTENSION *ex, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="x" text="OCSP_REQUEST *x" mod=""/>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_ONEREQ_get_ext_count" text="int OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="x" text="OCSP_ONEREQ *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_ONEREQ_get_ext_by_NID" text="int OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ *x, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="x" text="OCSP_ONEREQ *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_ONEREQ_get_ext_by_OBJ" text="int OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ *x, ASN1_OBJECT *obj, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="x" text="OCSP_ONEREQ *x" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_ONEREQ_get_ext_by_critical" text="int OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ *x, int crit, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="x" text="OCSP_ONEREQ *x" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_ONEREQ_get_ext" text="X509_EXTENSION *OCSP_ONEREQ_get_ext(OCSP_ONEREQ *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="x" text="OCSP_ONEREQ *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_ONEREQ_delete_ext" text="X509_EXTENSION *OCSP_ONEREQ_delete_ext(OCSP_ONEREQ *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="x" text="OCSP_ONEREQ *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_ONEREQ_get1_ext_d2i" text="void *OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ *x, int nid, int *crit, int *idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="x" text="OCSP_ONEREQ *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="crit" text="int *crit" mod=""/>
    <arg type="int" id="idx" text="int *idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_ONEREQ_add1_ext_i2d" text="int OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ *x, int nid, void *value, int crit,&#10;                             unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="x" text="OCSP_ONEREQ *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_ONEREQ_add_ext" text="int OCSP_ONEREQ_add_ext(OCSP_ONEREQ *x, X509_EXTENSION *ex, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="x" text="OCSP_ONEREQ *x" mod=""/>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_BASICRESP_get_ext_count" text="int OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="x" text="OCSP_BASICRESP *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_BASICRESP_get_ext_by_NID" text="int OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP *x, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="x" text="OCSP_BASICRESP *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_BASICRESP_get_ext_by_OBJ" text="int OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP *x, ASN1_OBJECT *obj,&#10;                                  int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="x" text="OCSP_BASICRESP *x" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_BASICRESP_get_ext_by_critical" text="int OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP *x, int crit,&#10;                                       int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="x" text="OCSP_BASICRESP *x" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_BASICRESP_get_ext" text="X509_EXTENSION *OCSP_BASICRESP_get_ext(OCSP_BASICRESP *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="x" text="OCSP_BASICRESP *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_BASICRESP_delete_ext" text="X509_EXTENSION *OCSP_BASICRESP_delete_ext(OCSP_BASICRESP *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="x" text="OCSP_BASICRESP *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_BASICRESP_get1_ext_d2i" text="void *OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP *x, int nid, int *crit,&#10;                                  int *idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="x" text="OCSP_BASICRESP *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="crit" text="int *crit" mod=""/>
    <arg type="int" id="idx" text="int *idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_BASICRESP_add1_ext_i2d" text="int OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP *x, int nid, void *value,&#10;                                int crit, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="x" text="OCSP_BASICRESP *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_BASICRESP_add_ext" text="int OCSP_BASICRESP_add_ext(OCSP_BASICRESP *x, X509_EXTENSION *ex, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="x" text="OCSP_BASICRESP *x" mod=""/>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_SINGLERESP_get_ext_count" text="int OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="x" text="OCSP_SINGLERESP *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_SINGLERESP_get_ext_by_NID" text="int OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP *x, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="x" text="OCSP_SINGLERESP *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_SINGLERESP_get_ext_by_OBJ" text="int OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP *x, ASN1_OBJECT *obj,&#10;                                   int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="x" text="OCSP_SINGLERESP *x" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_SINGLERESP_get_ext_by_critical" text="int OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP *x, int crit,&#10;                                        int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="x" text="OCSP_SINGLERESP *x" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_SINGLERESP_get_ext" text="X509_EXTENSION *OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="x" text="OCSP_SINGLERESP *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="OCSP_SINGLERESP_delete_ext" text="X509_EXTENSION *OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP *x, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="x" text="OCSP_SINGLERESP *x" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_SINGLERESP_get1_ext_d2i" text="void *OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP *x, int nid, int *crit,&#10;                                   int *idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="x" text="OCSP_SINGLERESP *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="crit" text="int *crit" mod=""/>
    <arg type="int" id="idx" text="int *idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_SINGLERESP_add1_ext_i2d" text="int OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP *x, int nid, void *value,&#10;                                 int crit, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="x" text="OCSP_SINGLERESP *x" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="void" id="value" text="void *value" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_SINGLERESP_add_ext" text="int OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP *x, X509_EXTENSION *ex, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="x" text="OCSP_SINGLERESP *x" mod=""/>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_SINGLERESP" id="OCSP_SINGLERESP_new" text="OCSP_SINGLERESP &#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SINGLERESP_new&#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_SINGLERESP_free" text="void &#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SINGLERESP_free&#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SINGLERESP &#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="a" text="OCSP_SINGLERESP &#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_SINGLERESP" id="d2i_OCSP_SINGLERESP" text="OCSP_SINGLERESP &#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_SINGLERESP(&#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SINGLERESP &#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="a" text="OCSP_SINGLERESP &#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_SINGLERESP" text="int i2d_OCSP_SINGLERESP(&#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SINGLERESP &#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SINGLERESP" id="a" text="OCSP_SINGLERESP &#10;# 546 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_CERTSTATUS" id="OCSP_CERTSTATUS_new" text="OCSP_CERTSTATUS &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CERTSTATUS_new&#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_CERTSTATUS_free" text="void &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CERTSTATUS_free&#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CERTSTATUS &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CERTSTATUS" id="a" text="OCSP_CERTSTATUS &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_CERTSTATUS" id="d2i_OCSP_CERTSTATUS" text="OCSP_CERTSTATUS &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_CERTSTATUS(&#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CERTSTATUS &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CERTSTATUS" id="a" text="OCSP_CERTSTATUS &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_CERTSTATUS" text="int i2d_OCSP_CERTSTATUS(&#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CERTSTATUS &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CERTSTATUS" id="a" text="OCSP_CERTSTATUS &#10;# 547 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_REVOKEDINFO" id="OCSP_REVOKEDINFO_new" text="OCSP_REVOKEDINFO &#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REVOKEDINFO_new&#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_REVOKEDINFO_free" text="void &#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REVOKEDINFO_free&#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REVOKEDINFO &#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REVOKEDINFO" id="a" text="OCSP_REVOKEDINFO &#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_REVOKEDINFO" id="d2i_OCSP_REVOKEDINFO" text="OCSP_REVOKEDINFO &#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_REVOKEDINFO(&#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REVOKEDINFO &#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REVOKEDINFO" id="a" text="OCSP_REVOKEDINFO &#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_REVOKEDINFO" text="int i2d_OCSP_REVOKEDINFO(&#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REVOKEDINFO &#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REVOKEDINFO" id="a" text="OCSP_REVOKEDINFO &#10;# 548 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_BASICRESP" id="OCSP_BASICRESP_new" text="OCSP_BASICRESP &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_BASICRESP_new&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_BASICRESP_free" text="void &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_BASICRESP_free&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_BASICRESP &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="a" text="OCSP_BASICRESP &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_BASICRESP" id="d2i_OCSP_BASICRESP" text="OCSP_BASICRESP &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_BASICRESP(&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_BASICRESP &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="a" text="OCSP_BASICRESP &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_BASICRESP" text="int i2d_OCSP_BASICRESP(&#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_BASICRESP &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="a" text="OCSP_BASICRESP &#10;# 549 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_RESPDATA" id="OCSP_RESPDATA_new" text="OCSP_RESPDATA &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPDATA_new&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_RESPDATA_free" text="void &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPDATA_free&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPDATA &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPDATA" id="a" text="OCSP_RESPDATA &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_RESPDATA" id="d2i_OCSP_RESPDATA" text="OCSP_RESPDATA &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_RESPDATA(&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPDATA &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPDATA" id="a" text="OCSP_RESPDATA &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_RESPDATA" text="int i2d_OCSP_RESPDATA(&#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPDATA &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPDATA" id="a" text="OCSP_RESPDATA &#10;# 550 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_RESPID" id="OCSP_RESPID_new" text="OCSP_RESPID &#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPID_new&#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_RESPID_free" text="void &#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPID_free&#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPID &#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPID" id="a" text="OCSP_RESPID &#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_RESPID" id="d2i_OCSP_RESPID" text="OCSP_RESPID &#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_RESPID(&#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPID &#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPID" id="a" text="OCSP_RESPID &#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_RESPID" text="int i2d_OCSP_RESPID(&#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPID &#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPID" id="a" text="OCSP_RESPID &#10;# 551 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_RESPONSE" id="OCSP_RESPONSE_new" text="OCSP_RESPONSE &#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPONSE_new&#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_RESPONSE_free" text="void &#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPONSE_free&#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPONSE &#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPONSE" id="a" text="OCSP_RESPONSE &#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_RESPONSE" id="d2i_OCSP_RESPONSE" text="OCSP_RESPONSE &#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_RESPONSE(&#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPONSE &#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPONSE" id="a" text="OCSP_RESPONSE &#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_RESPONSE" text="int i2d_OCSP_RESPONSE(&#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPONSE &#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPONSE" id="a" text="OCSP_RESPONSE &#10;# 552 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_RESPBYTES" id="OCSP_RESPBYTES_new" text="OCSP_RESPBYTES &#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPBYTES_new&#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_RESPBYTES_free" text="void &#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPBYTES_free&#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPBYTES &#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPBYTES" id="a" text="OCSP_RESPBYTES &#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_RESPBYTES" id="d2i_OCSP_RESPBYTES" text="OCSP_RESPBYTES &#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_RESPBYTES(&#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPBYTES &#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPBYTES" id="a" text="OCSP_RESPBYTES &#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_RESPBYTES" text="int i2d_OCSP_RESPBYTES(&#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_RESPBYTES &#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_RESPBYTES" id="a" text="OCSP_RESPBYTES &#10;# 553 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_ONEREQ" id="OCSP_ONEREQ_new" text="OCSP_ONEREQ &#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_ONEREQ_new&#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON9" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_ONEREQ_free" text="void &#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_ONEREQ_free&#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_ONEREQ &#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="a" text="OCSP_ONEREQ &#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_ONEREQ" id="d2i_OCSP_ONEREQ" text="OCSP_ONEREQ &#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_ONEREQ(&#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_ONEREQ &#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="a" text="OCSP_ONEREQ &#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_ONEREQ" text="int i2d_OCSP_ONEREQ(&#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_ONEREQ &#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_ONEREQ" id="a" text="OCSP_ONEREQ &#10;# 554 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_CERTID" id="OCSP_CERTID_new" text="OCSP_CERTID &#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CERTID_new&#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON10" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_CERTID_free" text="void &#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CERTID_free&#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CERTID &#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CERTID" id="a" text="OCSP_CERTID &#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_CERTID" id="d2i_OCSP_CERTID" text="OCSP_CERTID &#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_CERTID(&#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CERTID &#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CERTID" id="a" text="OCSP_CERTID &#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_CERTID" text="int i2d_OCSP_CERTID(&#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CERTID &#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CERTID" id="a" text="OCSP_CERTID &#10;# 555 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_REQUEST" id="OCSP_REQUEST_new" text="OCSP_REQUEST &#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REQUEST_new&#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON11" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_REQUEST_free" text="void &#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REQUEST_free&#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REQUEST &#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="a" text="OCSP_REQUEST &#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_REQUEST" id="d2i_OCSP_REQUEST" text="OCSP_REQUEST &#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_REQUEST(&#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REQUEST &#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="a" text="OCSP_REQUEST &#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_REQUEST" text="int i2d_OCSP_REQUEST(&#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REQUEST &#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQUEST" id="a" text="OCSP_REQUEST &#10;# 556 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_SIGNATURE" id="OCSP_SIGNATURE_new" text="OCSP_SIGNATURE &#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SIGNATURE_new&#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON12" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_SIGNATURE_free" text="void &#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SIGNATURE_free&#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SIGNATURE &#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SIGNATURE" id="a" text="OCSP_SIGNATURE &#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_SIGNATURE" id="d2i_OCSP_SIGNATURE" text="OCSP_SIGNATURE &#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_SIGNATURE(&#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SIGNATURE &#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SIGNATURE" id="a" text="OCSP_SIGNATURE &#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_SIGNATURE" text="int i2d_OCSP_SIGNATURE(&#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SIGNATURE &#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SIGNATURE" id="a" text="OCSP_SIGNATURE &#10;# 557 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_REQINFO" id="OCSP_REQINFO_new" text="OCSP_REQINFO &#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REQINFO_new&#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON13" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_REQINFO_free" text="void &#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REQINFO_free&#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REQINFO &#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQINFO" id="a" text="OCSP_REQINFO &#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_REQINFO" id="d2i_OCSP_REQINFO" text="OCSP_REQINFO &#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_REQINFO(&#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REQINFO &#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQINFO" id="a" text="OCSP_REQINFO &#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_REQINFO" text="int i2d_OCSP_REQINFO(&#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_REQINFO &#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_REQINFO" id="a" text="OCSP_REQINFO &#10;# 558 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_CRLID" id="OCSP_CRLID_new" text="OCSP_CRLID &#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CRLID_new&#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON14" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_CRLID_free" text="void &#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CRLID_free&#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CRLID &#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CRLID" id="a" text="OCSP_CRLID &#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_CRLID" id="d2i_OCSP_CRLID" text="OCSP_CRLID &#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_CRLID(&#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CRLID &#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CRLID" id="a" text="OCSP_CRLID &#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_CRLID" text="int i2d_OCSP_CRLID(&#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_CRLID &#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_CRLID" id="a" text="OCSP_CRLID &#10;# 559 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_SERVICELOC" id="OCSP_SERVICELOC_new" text="OCSP_SERVICELOC &#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*&#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SERVICELOC_new&#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON15" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OCSP_SERVICELOC_free" text="void &#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SERVICELOC_free&#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;(&#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SERVICELOC &#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SERVICELOC" id="a" text="OCSP_SERVICELOC &#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="OCSP_SERVICELOC" id="d2i_OCSP_SERVICELOC" text="OCSP_SERVICELOC &#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*d2i_OCSP_SERVICELOC(&#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SERVICELOC &#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SERVICELOC" id="a" text="OCSP_SERVICELOC &#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_OCSP_SERVICELOC" text="int i2d_OCSP_SERVICELOC(&#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;OCSP_SERVICELOC &#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_SERVICELOC" id="a" text="OCSP_SERVICELOC &#10;# 560 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="OCSP_response_status_str" text="const char *OCSP_response_status_str(long s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="long" id="s" text="long s" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="OCSP_cert_status_str" text="const char *OCSP_cert_status_str(long s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="long" id="s" text="long s" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="OCSP_crl_reason_str" text="const char *OCSP_crl_reason_str(long s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="long" id="s" text="long s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_REQUEST_print" text="int OCSP_REQUEST_print(BIO *bp, OCSP_REQUEST *a, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="OCSP_REQUEST" id="a" text="OCSP_REQUEST *a" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_RESPONSE_print" text="int OCSP_RESPONSE_print(BIO *bp, OCSP_RESPONSE *o, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="OCSP_RESPONSE" id="o" text="OCSP_RESPONSE *o" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OCSP_basic_verify" text="int OCSP_basic_verify(OCSP_BASICRESP *bs, &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot; 3 4&#10;                                         struct stack_st_X509 &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;                                                        *certs,&#10;                      X509_STORE *st, unsigned long flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="OCSP_BASICRESP" id="bs" text="OCSP_BASICRESP *bs" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 569 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h&quot;&#10;                                                        *certs" mod=""/>
    <arg type="X509_STORE" id="st" text="X509_STORE *st" mod=""/>
    <arg type="unsigned long" id="flags" text="unsigned long flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_OCSP_strings" text="void ERR_load_OCSP_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ocsp.h">
  <args>
    <arg type="void" id="ANON16" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="void" id="SRP_user_pwd_free" text="void SRP_user_pwd_free(SRP_user_pwd *user_pwd)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="SRP_user_pwd" id="user_pwd" text="SRP_user_pwd *user_pwd" mod=""/>
  </args>
</fdecl>
<fdecl type="SRP_VBASE" id="SRP_VBASE_new" text="SRP_VBASE *SRP_VBASE_new(char *seed_key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="char" id="seed_key" text="char *seed_key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SRP_VBASE_free" text="int SRP_VBASE_free(SRP_VBASE *vb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="SRP_VBASE" id="vb" text="SRP_VBASE *vb" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SRP_VBASE_init" text="int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="SRP_VBASE" id="vb" text="SRP_VBASE *vb" mod=""/>
    <arg type="char" id="verifier_file" text="char *verifier_file" mod=""/>
  </args>
</fdecl>
<fdecl type="SRP_user_pwd" id="SRP_VBASE_get_by_user" text="SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="SRP_VBASE" id="vb" text="SRP_VBASE *vb" mod=""/>
    <arg type="char" id="username" text="char *username" mod=""/>
  </args>
</fdecl>
<fdecl type="SRP_user_pwd" id="SRP_VBASE_get1_by_user" text="SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="SRP_VBASE" id="vb" text="SRP_VBASE *vb" mod=""/>
    <arg type="char" id="username" text="char *username" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="SRP_create_verifier" text="char *SRP_create_verifier(const char *user, const char *pass, char **salt,&#10;                          char **verifier, const char *N, const char *g)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="const char" id="user" text="const char *user" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="char" id="salt" text="char **salt" mod=""/>
    <arg type="char" id="verifier" text="char **verifier" mod=""/>
    <arg type="const char" id="N" text="const char *N" mod=""/>
    <arg type="const char" id="g" text="const char *g" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SRP_create_verifier_BN" text="int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,&#10;                           BIGNUM **verifier, BIGNUM *N, BIGNUM *g)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="const char" id="user" text="const char *user" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="BIGNUM" id="salt" text="BIGNUM **salt" mod=""/>
    <arg type="BIGNUM" id="verifier" text="BIGNUM **verifier" mod=""/>
    <arg type="BIGNUM" id="N" text="BIGNUM *N" mod=""/>
    <arg type="BIGNUM" id="g" text="BIGNUM *g" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="SRP_check_known_gN_param" text="char *SRP_check_known_gN_param(BIGNUM *g, BIGNUM *N)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="BIGNUM" id="g" text="BIGNUM *g" mod=""/>
    <arg type="BIGNUM" id="N" text="BIGNUM *N" mod=""/>
  </args>
</fdecl>
<fdecl type="SRP_gN" id="SRP_get_default_gN" text="SRP_gN *SRP_get_default_gN(const char *id)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="const char" id="id" text="const char *id" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="SRP_Calc_server_key" text="BIGNUM *SRP_Calc_server_key(BIGNUM *A, BIGNUM *v, BIGNUM *u, BIGNUM *b,&#10;                            BIGNUM *N)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="BIGNUM" id="A" text="BIGNUM *A" mod=""/>
    <arg type="BIGNUM" id="v" text="BIGNUM *v" mod=""/>
    <arg type="BIGNUM" id="u" text="BIGNUM *u" mod=""/>
    <arg type="BIGNUM" id="b" text="BIGNUM *b" mod=""/>
    <arg type="BIGNUM" id="N" text="BIGNUM *N" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="SRP_Calc_B" text="BIGNUM *SRP_Calc_B(BIGNUM *b, BIGNUM *N, BIGNUM *g, BIGNUM *v)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="BIGNUM" id="b" text="BIGNUM *b" mod=""/>
    <arg type="BIGNUM" id="N" text="BIGNUM *N" mod=""/>
    <arg type="BIGNUM" id="g" text="BIGNUM *g" mod=""/>
    <arg type="BIGNUM" id="v" text="BIGNUM *v" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SRP_Verify_A_mod_N" text="int SRP_Verify_A_mod_N(BIGNUM *A, BIGNUM *N)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="BIGNUM" id="A" text="BIGNUM *A" mod=""/>
    <arg type="BIGNUM" id="N" text="BIGNUM *N" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="SRP_Calc_u" text="BIGNUM *SRP_Calc_u(BIGNUM *A, BIGNUM *B, BIGNUM *N)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="BIGNUM" id="A" text="BIGNUM *A" mod=""/>
    <arg type="BIGNUM" id="B" text="BIGNUM *B" mod=""/>
    <arg type="BIGNUM" id="N" text="BIGNUM *N" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="SRP_Calc_x" text="BIGNUM *SRP_Calc_x(BIGNUM *s, const char *user, const char *pass)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="BIGNUM" id="s" text="BIGNUM *s" mod=""/>
    <arg type="const char" id="user" text="const char *user" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="SRP_Calc_A" text="BIGNUM *SRP_Calc_A(BIGNUM *a, BIGNUM *N, BIGNUM *g)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="BIGNUM" id="N" text="BIGNUM *N" mod=""/>
    <arg type="BIGNUM" id="g" text="BIGNUM *g" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="SRP_Calc_client_key" text="BIGNUM *SRP_Calc_client_key(BIGNUM *N, BIGNUM *B, BIGNUM *g, BIGNUM *x,&#10;                            BIGNUM *a, BIGNUM *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="BIGNUM" id="N" text="BIGNUM *N" mod=""/>
    <arg type="BIGNUM" id="B" text="BIGNUM *B" mod=""/>
    <arg type="BIGNUM" id="g" text="BIGNUM *g" mod=""/>
    <arg type="BIGNUM" id="x" text="BIGNUM *x" mod=""/>
    <arg type="BIGNUM" id="a" text="BIGNUM *a" mod=""/>
    <arg type="BIGNUM" id="u" text="BIGNUM *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SRP_Verify_B_mod_N" text="int SRP_Verify_B_mod_N(BIGNUM *B, BIGNUM *N)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srp.h">
  <args>
    <arg type="BIGNUM" id="B" text="BIGNUM *B" mod=""/>
    <arg type="BIGNUM" id="N" text="BIGNUM *N" mod=""/>
  </args>
</fdecl>

<fdecl type="CMS_ContentInfo" id="CMS_ContentInfo_new" text="CMS_ContentInfo &#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*&#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ContentInfo_new&#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CMS_ContentInfo_free" text="void &#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ContentInfo_free&#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;(&#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ContentInfo &#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="a" text="CMS_ContentInfo &#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ContentInfo" id="d2i_CMS_ContentInfo" text="CMS_ContentInfo &#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*d2i_CMS_ContentInfo(&#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ContentInfo &#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="a" text="CMS_ContentInfo &#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_CMS_ContentInfo" text="int i2d_CMS_ContentInfo(&#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ContentInfo &#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="a" text="CMS_ContentInfo &#10;# 81 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ReceiptRequest" id="CMS_ReceiptRequest_new" text="CMS_ReceiptRequest &#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*&#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ReceiptRequest_new&#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CMS_ReceiptRequest_free" text="void &#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ReceiptRequest_free&#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;(&#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ReceiptRequest &#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ReceiptRequest" id="a" text="CMS_ReceiptRequest &#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*a" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ReceiptRequest" id="d2i_CMS_ReceiptRequest" text="CMS_ReceiptRequest &#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*d2i_CMS_ReceiptRequest(&#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ReceiptRequest &#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;**a, const unsigned char **in, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ReceiptRequest" id="a" text="CMS_ReceiptRequest &#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;**a" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char **in" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_CMS_ReceiptRequest" text="int i2d_CMS_ReceiptRequest(&#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ReceiptRequest &#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*a, unsigned char **out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ReceiptRequest" id="a" text="CMS_ReceiptRequest &#10;# 82 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*a" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_ContentInfo_print_ctx" text="int &#10;# 83 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ContentInfo_print_ctx&#10;# 83 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;(BIO *out, &#10;# 83 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;CMS_ContentInfo &#10;# 83 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*x, int indent, const ASN1_PCTX *pctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="CMS_ContentInfo" id="x" text="CMS_ContentInfo &#10;# 83 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;*x" mod=""/>
    <arg type="int" id="indent" text="int indent" mod=""/>
    <arg type="const ASN1_PCTX" id="pctx" text="const ASN1_PCTX *pctx" mod=""/>
  </args>
</fdecl>
<fdecl type="const ASN1_OBJECT" id="CMS_get0_type" text="const ASN1_OBJECT *CMS_get0_type(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="CMS_dataInit" text="BIO *CMS_dataInit(CMS_ContentInfo *cms, BIO *icont)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="BIO" id="icont" text="BIO *icont" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_dataFinal" text="int CMS_dataFinal(CMS_ContentInfo *cms, BIO *bio)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="CMS_get0_content" text="ASN1_OCTET_STRING **CMS_get0_content(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_is_detached" text="int CMS_is_detached(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_set_detached" text="int CMS_set_detached(CMS_ContentInfo *cms, int detached)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="int" id="detached" text="int detached" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_stream" text="int CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="unsigned char" id="boundary" text="unsigned char ***boundary" mod=""/>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ContentInfo" id="d2i_CMS_bio" text="CMS_ContentInfo *d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo **cms" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_CMS_bio" text="int i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_CMS" text="BIO *BIO_new_CMS(BIO *out, CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_CMS_bio_stream" text="int i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *in, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_CMS_stream" text="int PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,&#10;                             int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ContentInfo" id="SMIME_read_CMS" text="CMS_ContentInfo *SMIME_read_CMS(BIO *bio, BIO **bcont)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="BIO" id="bcont" text="BIO **bcont" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SMIME_write_CMS" text="int SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="BIO" id="data" text="BIO *data" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_final" text="int CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont,&#10;              unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="BIO" id="data" text="BIO *data" mod=""/>
    <arg type="BIO" id="dcont" text="BIO *dcont" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ContentInfo" id="CMS_sign" text="CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey,&#10;                          &#10;# 147 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                         struct stack_st_X509 &#10;# 147 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                        *certs, BIO *data,&#10;                          unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="X509" id="signcert" text="X509 *signcert" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 147 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                        *certs" mod=""/>
    <arg type="BIO" id="data" text="BIO *data" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ContentInfo" id="CMS_sign_receipt" text="CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,&#10;                                  X509 *signcert, EVP_PKEY *pkey,&#10;                                  &#10;# 152 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                                 struct stack_st_X509 &#10;# 152 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                *certs, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="X509" id="signcert" text="X509 *signcert" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 152 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                *certs" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_data" text="int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ContentInfo" id="CMS_data_create" text="CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_digest_verify" text="int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,&#10;                      unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="BIO" id="dcont" text="BIO *dcont" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ContentInfo" id="CMS_digest_create" text="CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,&#10;                                   unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_EncryptedData_decrypt" text="int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,&#10;                              const unsigned char *key, size_t keylen,&#10;                              BIO *dcont, BIO *out, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="size_t" id="keylen" text="size_t keylen" mod=""/>
    <arg type="BIO" id="dcont" text="BIO *dcont" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ContentInfo" id="CMS_EncryptedData_encrypt" text="CMS_ContentInfo *CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,&#10;                                           const unsigned char *key,&#10;                                           size_t keylen, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="size_t" id="keylen" text="size_t keylen" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_EncryptedData_set1_key" text="int CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,&#10;                               const unsigned char *key, size_t keylen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="const EVP_CIPHER" id="ciph" text="const EVP_CIPHER *ciph" mod=""/>
    <arg type="const unsigned char" id="key" text="const unsigned char *key" mod=""/>
    <arg type="size_t" id="keylen" text="size_t keylen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_verify" text="int CMS_verify(CMS_ContentInfo *cms, &#10;# 173 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                                    struct stack_st_X509 &#10;# 173 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                   *certs,&#10;               X509_STORE *store, BIO *dcont, BIO *out, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 173 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                   *certs" mod=""/>
    <arg type="X509_STORE" id="store" text="X509_STORE *store" mod=""/>
    <arg type="BIO" id="dcont" text="BIO *dcont" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_verify_receipt" text="int CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,&#10;                       &#10;# 177 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                      struct stack_st_X509 &#10;# 177 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                     *certs,&#10;                       X509_STORE *store, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="rcms" text="CMS_ContentInfo *rcms" mod=""/>
    <arg type="CMS_ContentInfo" id="ocms" text="CMS_ContentInfo *ocms" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 177 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                     *certs" mod=""/>
    <arg type="X509_STORE" id="store" text="X509_STORE *store" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509" id="CMS_get0_signers" text="struct stack_st_X509 &#10;# 180 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;              *CMS_get0_signers(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ContentInfo" id="CMS_encrypt" text="CMS_ContentInfo *CMS_encrypt(&#10;# 182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                            struct stack_st_X509 &#10;# 182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                           *certs, BIO *in,&#10;                             const EVP_CIPHER *cipher, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 182 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                           *certs" mod=""/>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_decrypt" text="int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pkey, X509 *cert,&#10;                BIO *dcont, BIO *out, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
    <arg type="BIO" id="dcont" text="BIO *dcont" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_decrypt_set1_pkey" text="int CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="EVP_PKEY" id="pk" text="EVP_PKEY *pk" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_decrypt_set1_key" text="int CMS_decrypt_set1_key(CMS_ContentInfo *cms,&#10;                         unsigned char *key, size_t keylen,&#10;                         unsigned char *id, size_t idlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="unsigned char" id="key" text="unsigned char *key" mod=""/>
    <arg type="size_t" id="keylen" text="size_t keylen" mod=""/>
    <arg type="unsigned char" id="id" text="unsigned char *id" mod=""/>
    <arg type="size_t" id="idlen" text="size_t idlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_decrypt_set1_password" text="int CMS_decrypt_set1_password(CMS_ContentInfo *cms,&#10;                              unsigned char *pass, &#10;# 193 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                                                  ssize_t &#10;# 193 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                               passlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="unsigned char" id="pass" text="unsigned char *pass" mod=""/>
    <arg type="ssize_t" id="passlen" text="ssize_t &#10;# 193 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                               passlen" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_CMS_RecipientInfo" id="CMS_get0_RecipientInfos" text="struct stack_st_CMS_RecipientInfo &#10;# 195 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                           *CMS_get0_RecipientInfos(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_type" text="int CMS_RecipientInfo_type(CMS_RecipientInfo *ri)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY_CTX" id="CMS_RecipientInfo_get0_pkey_ctx" text="EVP_PKEY_CTX *CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ContentInfo" id="CMS_EnvelopedData_create" text="CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_RecipientInfo" id="CMS_add1_recipient_cert" text="CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,&#10;                                           X509 *recip, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="X509" id="recip" text="X509 *recip" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_set0_pkey" text="int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_ktri_cert_cmp" text="int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_ktri_get0_algs" text="int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,&#10;                                     EVP_PKEY **pk, X509 **recip,&#10;                                     X509_ALGOR **palg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="EVP_PKEY" id="pk" text="EVP_PKEY **pk" mod=""/>
    <arg type="X509" id="recip" text="X509 **recip" mod=""/>
    <arg type="X509_ALGOR" id="palg" text="X509_ALGOR **palg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_ktri_get0_signer_id" text="int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,&#10;                                          ASN1_OCTET_STRING **keyid,&#10;                                          X509_NAME **issuer,&#10;                                          ASN1_INTEGER **sno)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="keyid" text="ASN1_OCTET_STRING **keyid" mod=""/>
    <arg type="X509_NAME" id="issuer" text="X509_NAME **issuer" mod=""/>
    <arg type="ASN1_INTEGER" id="sno" text="ASN1_INTEGER **sno" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_RecipientInfo" id="CMS_add0_recipient_key" text="CMS_RecipientInfo *CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,&#10;                                          unsigned char *key, size_t keylen,&#10;                                          unsigned char *id, size_t idlen,&#10;                                          ASN1_GENERALIZEDTIME *date,&#10;                                          ASN1_OBJECT *otherTypeId,&#10;                                          ASN1_TYPE *otherType)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="unsigned char" id="key" text="unsigned char *key" mod=""/>
    <arg type="size_t" id="keylen" text="size_t keylen" mod=""/>
    <arg type="unsigned char" id="id" text="unsigned char *id" mod=""/>
    <arg type="size_t" id="idlen" text="size_t idlen" mod=""/>
    <arg type="ASN1_GENERALIZEDTIME" id="date" text="ASN1_GENERALIZEDTIME *date" mod=""/>
    <arg type="ASN1_OBJECT" id="otherTypeId" text="ASN1_OBJECT *otherTypeId" mod=""/>
    <arg type="ASN1_TYPE" id="otherType" text="ASN1_TYPE *otherType" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_kekri_get0_id" text="int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,&#10;                                    X509_ALGOR **palg,&#10;                                    ASN1_OCTET_STRING **pid,&#10;                                    ASN1_GENERALIZEDTIME **pdate,&#10;                                    ASN1_OBJECT **potherid,&#10;                                    ASN1_TYPE **pothertype)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="X509_ALGOR" id="palg" text="X509_ALGOR **palg" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="pid" text="ASN1_OCTET_STRING **pid" mod=""/>
    <arg type="ASN1_GENERALIZEDTIME" id="pdate" text="ASN1_GENERALIZEDTIME **pdate" mod=""/>
    <arg type="ASN1_OBJECT" id="potherid" text="ASN1_OBJECT **potherid" mod=""/>
    <arg type="ASN1_TYPE" id="pothertype" text="ASN1_TYPE **pothertype" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_set0_key" text="int CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,&#10;                               unsigned char *key, size_t keylen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="unsigned char" id="key" text="unsigned char *key" mod=""/>
    <arg type="size_t" id="keylen" text="size_t keylen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_kekri_id_cmp" text="int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,&#10;                                   const unsigned char *id, size_t idlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="const unsigned char" id="id" text="const unsigned char *id" mod=""/>
    <arg type="size_t" id="idlen" text="size_t idlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_set0_password" text="int CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,&#10;                                    unsigned char *pass,&#10;                                    &#10;# 233 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                                   ssize_t &#10;# 233 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                passlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="unsigned char" id="pass" text="unsigned char *pass" mod=""/>
    <arg type="ssize_t" id="passlen" text="ssize_t &#10;# 233 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                passlen" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_RecipientInfo" id="CMS_add0_recipient_password" text="CMS_RecipientInfo *CMS_add0_recipient_password(CMS_ContentInfo *cms,&#10;                                               int iter, int wrap_nid,&#10;                                               int pbe_nid,&#10;                                               unsigned char *pass,&#10;                                               &#10;# 239 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                                              ssize_t &#10;# 239 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                           passlen,&#10;                                               const EVP_CIPHER *kekciph)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="int" id="iter" text="int iter" mod=""/>
    <arg type="int" id="wrap_nid" text="int wrap_nid" mod=""/>
    <arg type="int" id="pbe_nid" text="int pbe_nid" mod=""/>
    <arg type="unsigned char" id="pass" text="unsigned char *pass" mod=""/>
    <arg type="ssize_t" id="passlen" text="ssize_t &#10;# 239 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                           passlen" mod=""/>
    <arg type="const EVP_CIPHER" id="kekciph" text="const EVP_CIPHER *kekciph" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_decrypt" text="int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_encrypt" text="int CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_uncompress" text="int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,&#10;                   unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="BIO" id="dcont" text="BIO *dcont" mod=""/>
    <arg type="BIO" id="out" text="BIO *out" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_ContentInfo" id="CMS_compress" text="CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
    <arg type="int" id="comp_nid" text="int comp_nid" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_set1_eContentType" text="int CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="const ASN1_OBJECT" id="oid" text="const ASN1_OBJECT *oid" mod=""/>
  </args>
</fdecl>
<fdecl type="const ASN1_OBJECT" id="CMS_get0_eContentType" text="const ASN1_OBJECT *CMS_get0_eContentType(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_CertificateChoices" id="CMS_add0_CertificateChoices" text="CMS_CertificateChoices *CMS_add0_CertificateChoices(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_add0_cert" text="int CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_add1_cert" text="int CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509" id="CMS_get1_certs" text="struct stack_st_X509 &#10;# 255 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;              *CMS_get1_certs(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_RevocationInfoChoice" id="CMS_add0_RevocationInfoChoice" text="CMS_RevocationInfoChoice *CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_add0_crl" text="int CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_add1_crl" text="int CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="X509_CRL" id="crl" text="X509_CRL *crl" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_CRL" id="CMS_get1_crls" text="struct stack_st_X509_CRL &#10;# 260 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                  *CMS_get1_crls(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_SignedData_init" text="int CMS_SignedData_init(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="CMS_SignerInfo" id="CMS_add1_signer" text="CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,&#10;                                X509 *signer, EVP_PKEY *pk, const EVP_MD *md,&#10;                                unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="X509" id="signer" text="X509 *signer" mod=""/>
    <arg type="EVP_PKEY" id="pk" text="EVP_PKEY *pk" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY_CTX" id="CMS_SignerInfo_get0_pkey_ctx" text="EVP_PKEY_CTX *CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo *si)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_MD_CTX" id="CMS_SignerInfo_get0_md_ctx" text="EVP_MD_CTX *CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo *si)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_CMS_SignerInfo" id="CMS_get0_SignerInfos" text="struct stack_st_CMS_SignerInfo &#10;# 268 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                        *CMS_get0_SignerInfos(CMS_ContentInfo *cms)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CMS_SignerInfo_set1_signer_cert" text="void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="X509" id="signer" text="X509 *signer" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_SignerInfo_get0_signer_id" text="int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,&#10;                                  ASN1_OCTET_STRING **keyid,&#10;                                  X509_NAME **issuer, ASN1_INTEGER **sno)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="keyid" text="ASN1_OCTET_STRING **keyid" mod=""/>
    <arg type="X509_NAME" id="issuer" text="X509_NAME **issuer" mod=""/>
    <arg type="ASN1_INTEGER" id="sno" text="ASN1_INTEGER **sno" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_SignerInfo_cert_cmp" text="int CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_set1_signers_certs" text="int CMS_set1_signers_certs(CMS_ContentInfo *cms, &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                                                struct stack_st_X509 &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                               *certs,&#10;                           unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 275 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                               *certs" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CMS_SignerInfo_get0_algs" text="void CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,&#10;                              X509 **signer, X509_ALGOR **pdig,&#10;                              X509_ALGOR **psig)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="EVP_PKEY" id="pk" text="EVP_PKEY **pk" mod=""/>
    <arg type="X509" id="signer" text="X509 **signer" mod=""/>
    <arg type="X509_ALGOR" id="pdig" text="X509_ALGOR **pdig" mod=""/>
    <arg type="X509_ALGOR" id="psig" text="X509_ALGOR **psig" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="CMS_SignerInfo_get0_signature" text="ASN1_OCTET_STRING *CMS_SignerInfo_get0_signature(CMS_SignerInfo *si)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_SignerInfo_sign" text="int CMS_SignerInfo_sign(CMS_SignerInfo *si)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_SignerInfo_verify" text="int CMS_SignerInfo_verify(CMS_SignerInfo *si)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_SignerInfo_verify_content" text="int CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="BIO" id="chain" text="BIO *chain" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_add_smimecap" text="int CMS_add_smimecap(CMS_SignerInfo *si, &#10;# 285 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                                        struct stack_st_X509_ALGOR &#10;# 285 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                             *algs)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="struct stack_st_X509_ALGOR" id="algs" text="struct stack_st_X509_ALGOR &#10;# 285 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                             *algs" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_add_simple_smimecap" text="int CMS_add_simple_smimecap(&#10;# 286 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                           struct stack_st_X509_ALGOR &#10;# 286 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                **algs,&#10;                            int algnid, int keysize)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="struct stack_st_X509_ALGOR" id="algs" text="struct stack_st_X509_ALGOR &#10;# 286 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                **algs" mod=""/>
    <arg type="int" id="algnid" text="int algnid" mod=""/>
    <arg type="int" id="keysize" text="int keysize" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_add_standard_smimecap" text="int CMS_add_standard_smimecap(&#10;# 288 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot; 3 4&#10;                             struct stack_st_X509_ALGOR &#10;# 288 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                  **smcap)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="struct stack_st_X509_ALGOR" id="smcap" text="struct stack_st_X509_ALGOR &#10;# 288 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;                                                  **smcap" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_signed_get_attr_count" text="int CMS_signed_get_attr_count(const CMS_SignerInfo *si)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="const CMS_SignerInfo" id="si" text="const CMS_SignerInfo *si" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_signed_get_attr_by_NID" text="int CMS_signed_get_attr_by_NID(const CMS_SignerInfo *si, int nid,&#10;                               int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="const CMS_SignerInfo" id="si" text="const CMS_SignerInfo *si" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_signed_get_attr_by_OBJ" text="int CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo *si, ASN1_OBJECT *obj,&#10;                               int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="const CMS_SignerInfo" id="si" text="const CMS_SignerInfo *si" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="CMS_signed_get_attr" text="X509_ATTRIBUTE *CMS_signed_get_attr(const CMS_SignerInfo *si, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="const CMS_SignerInfo" id="si" text="const CMS_SignerInfo *si" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="CMS_signed_delete_attr" text="X509_ATTRIBUTE *CMS_signed_delete_attr(CMS_SignerInfo *si, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_signed_add1_attr" text="int CMS_signed_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE *attr" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_signed_add1_attr_by_OBJ" text="int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,&#10;                                const ASN1_OBJECT *obj, int type,&#10;                                const void *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="const ASN1_OBJECT" id="obj" text="const ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const void" id="bytes" text="const void *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_signed_add1_attr_by_NID" text="int CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,&#10;                                int nid, int type,&#10;                                const void *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const void" id="bytes" text="const void *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_signed_add1_attr_by_txt" text="int CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,&#10;                                const char *attrname, int type,&#10;                                const void *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="const char" id="attrname" text="const char *attrname" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const void" id="bytes" text="const void *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CMS_signed_get0_data_by_OBJ" text="void *CMS_signed_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,&#10;                                  int lastpos, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="ASN1_OBJECT" id="oid" text="ASN1_OBJECT *oid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_unsigned_get_attr_count" text="int CMS_unsigned_get_attr_count(const CMS_SignerInfo *si)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="const CMS_SignerInfo" id="si" text="const CMS_SignerInfo *si" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_unsigned_get_attr_by_NID" text="int CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo *si, int nid,&#10;                                 int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="const CMS_SignerInfo" id="si" text="const CMS_SignerInfo *si" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_unsigned_get_attr_by_OBJ" text="int CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo *si, ASN1_OBJECT *obj,&#10;                                 int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="const CMS_SignerInfo" id="si" text="const CMS_SignerInfo *si" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="CMS_unsigned_get_attr" text="X509_ATTRIBUTE *CMS_unsigned_get_attr(const CMS_SignerInfo *si, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="const CMS_SignerInfo" id="si" text="const CMS_SignerInfo *si" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ATTRIBUTE" id="CMS_unsigned_delete_attr" text="X509_ATTRIBUTE *CMS_unsigned_delete_attr(CMS_SignerInfo *si, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_unsigned_add1_attr" text="int CMS_unsigned_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="X509_ATTRIBUTE" id="attr" text="X509_ATTRIBUTE *attr" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_unsigned_add1_attr_by_OBJ" text="int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,&#10;                                  const ASN1_OBJECT *obj, int type,&#10;                                  const void *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="const ASN1_OBJECT" id="obj" text="const ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const void" id="bytes" text="const void *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_unsigned_add1_attr_by_NID" text="int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,&#10;                                  int nid, int type,&#10;                                  const void *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const void" id="bytes" text="const void *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_unsigned_add1_attr_by_txt" text="int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,&#10;                                  const char *attrname, int type,&#10;                                  const void *bytes, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="const char" id="attrname" text="const char *attrname" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const void" id="bytes" text="const void *bytes" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CMS_unsigned_get0_data_by_OBJ" text="void *CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,&#10;                                    int lastpos, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_SignerInfo" id="si" text="CMS_SignerInfo *si" mod=""/>
    <arg type="ASN1_OBJECT" id="oid" text="ASN1_OBJECT *oid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_kari_get0_alg" text="int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,&#10;                                    X509_ALGOR **palg,&#10;                                    ASN1_OCTET_STRING **pukm)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="X509_ALGOR" id="palg" text="X509_ALGOR **palg" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="pukm" text="ASN1_OCTET_STRING **pukm" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_CMS_RecipientEncryptedKey" id="CMS_RecipientInfo_kari_get0_reks" text="struct stack_st_CMS_RecipientEncryptedKey&#10;&#10;# 349 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h&quot;&#10;*CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo *ri)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_kari_get0_orig_id" text="int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,&#10;                                        X509_ALGOR **pubalg,&#10;                                        ASN1_BIT_STRING **pubkey,&#10;                                        ASN1_OCTET_STRING **keyid,&#10;                                        X509_NAME **issuer,&#10;                                        ASN1_INTEGER **sno)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="X509_ALGOR" id="pubalg" text="X509_ALGOR **pubalg" mod=""/>
    <arg type="ASN1_BIT_STRING" id="pubkey" text="ASN1_BIT_STRING **pubkey" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="keyid" text="ASN1_OCTET_STRING **keyid" mod=""/>
    <arg type="X509_NAME" id="issuer" text="X509_NAME **issuer" mod=""/>
    <arg type="ASN1_INTEGER" id="sno" text="ASN1_INTEGER **sno" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_kari_orig_id_cmp" text="int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientEncryptedKey_get0_id" text="int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,&#10;                                      ASN1_OCTET_STRING **keyid,&#10;                                      ASN1_GENERALIZEDTIME **tm,&#10;                                      CMS_OtherKeyAttribute **other,&#10;                                      X509_NAME **issuer, ASN1_INTEGER **sno)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientEncryptedKey" id="rek" text="CMS_RecipientEncryptedKey *rek" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="keyid" text="ASN1_OCTET_STRING **keyid" mod=""/>
    <arg type="ASN1_GENERALIZEDTIME" id="tm" text="ASN1_GENERALIZEDTIME **tm" mod=""/>
    <arg type="CMS_OtherKeyAttribute" id="other" text="CMS_OtherKeyAttribute **other" mod=""/>
    <arg type="X509_NAME" id="issuer" text="X509_NAME **issuer" mod=""/>
    <arg type="ASN1_INTEGER" id="sno" text="ASN1_INTEGER **sno" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientEncryptedKey_cert_cmp" text="int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,&#10;                                       X509 *cert)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientEncryptedKey" id="rek" text="CMS_RecipientEncryptedKey *rek" mod=""/>
    <arg type="X509" id="cert" text="X509 *cert" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_kari_set0_pkey" text="int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="EVP_PKEY" id="pk" text="EVP_PKEY *pk" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_CIPHER_CTX" id="CMS_RecipientInfo_kari_get0_ctx" text="EVP_CIPHER_CTX *CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo *ri)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_RecipientInfo_kari_decrypt" text="int CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,&#10;                                   CMS_RecipientInfo *ri,&#10;                                   CMS_RecipientEncryptedKey *rek)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="CMS_ContentInfo" id="cms" text="CMS_ContentInfo *cms" mod=""/>
    <arg type="CMS_RecipientInfo" id="ri" text="CMS_RecipientInfo *ri" mod=""/>
    <arg type="CMS_RecipientEncryptedKey" id="rek" text="CMS_RecipientEncryptedKey *rek" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMS_SharedInfo_encode" text="int CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,&#10;                          ASN1_OCTET_STRING *ukm, int keylen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="unsigned char" id="pder" text="unsigned char **pder" mod=""/>
    <arg type="X509_ALGOR" id="kekalg" text="X509_ALGOR *kekalg" mod=""/>
    <arg type="ASN1_OCTET_STRING" id="ukm" text="ASN1_OCTET_STRING *ukm" mod=""/>
    <arg type="int" id="keylen" text="int keylen" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_CMS_strings" text="void ERR_load_CMS_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cms.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>

<fdecl type="int" id="OBJ_NAME_init" text="int OBJ_NAME_init(void)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_NAME_new_index" text="int OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),&#10;                       int (*cmp_func) (const char *, const char *),&#10;                       void (*free_func) (const char *, int, const char *))" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="unsigned long" id="hash_func" text="unsigned long (*hash_func) (const char *)" mod=""/>
    <arg type="int" id="cmp_func" text="int (*cmp_func) (const char *, const char *)" mod=""/>
    <arg type="void" id="free_func" text="void (*free_func) (const char *, int, const char *)" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="OBJ_NAME_get" text="const char *OBJ_NAME_get(const char *name, int type)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_NAME_add" text="int OBJ_NAME_add(const char *name, int type, const char *data)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const char" id="data" text="const char *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_NAME_remove" text="int OBJ_NAME_remove(const char *name, int type)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OBJ_NAME_cleanup" text="void OBJ_NAME_cleanup(int type)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OBJ_NAME_do_all" text="void OBJ_NAME_do_all(int type, void (*fn) (const OBJ_NAME *, void *arg),&#10;                     void *arg)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="void" id="fn" text="void (*fn) (const OBJ_NAME *, void *arg)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OBJ_NAME_do_all_sorted" text="void OBJ_NAME_do_all_sorted(int type,&#10;                            void (*fn) (const OBJ_NAME *, void *arg),&#10;                            void *arg)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="void" id="fn" text="void (*fn) (const OBJ_NAME *, void *arg)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="OBJ_dup" text="ASN1_OBJECT *OBJ_dup(const ASN1_OBJECT *o)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const ASN1_OBJECT" id="o" text="const ASN1_OBJECT *o" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="OBJ_nid2obj" text="ASN1_OBJECT *OBJ_nid2obj(int n)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="OBJ_nid2ln" text="const char *OBJ_nid2ln(int n)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="OBJ_nid2sn" text="const char *OBJ_nid2sn(int n)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_obj2nid" text="int OBJ_obj2nid(const ASN1_OBJECT *o)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const ASN1_OBJECT" id="o" text="const ASN1_OBJECT *o" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="OBJ_txt2obj" text="ASN1_OBJECT *OBJ_txt2obj(const char *s, int no_name)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const char" id="s" text="const char *s" mod=""/>
    <arg type="int" id="no_name" text="int no_name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_obj2txt" text="int OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="buf_len" text="int buf_len" mod=""/>
    <arg type="const ASN1_OBJECT" id="a" text="const ASN1_OBJECT *a" mod=""/>
    <arg type="int" id="no_name" text="int no_name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_txt2nid" text="int OBJ_txt2nid(const char *s)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const char" id="s" text="const char *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_ln2nid" text="int OBJ_ln2nid(const char *s)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const char" id="s" text="const char *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_sn2nid" text="int OBJ_sn2nid(const char *s)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const char" id="s" text="const char *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_cmp" text="int OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const ASN1_OBJECT" id="a" text="const ASN1_OBJECT *a" mod=""/>
    <arg type="const ASN1_OBJECT" id="b" text="const ASN1_OBJECT *b" mod=""/>
  </args>
</fdecl>
<fdecl type="const void" id="OBJ_bsearch_" text="const void *OBJ_bsearch_(const void *key, const void *base, int num, int size,&#10;                         int (*cmp) (const void *, const void *))" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="const void" id="base" text="const void *base" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
    <arg type="int" id="cmp" text="int (*cmp) (const void *, const void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="const void" id="OBJ_bsearch_ex_" text="const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,&#10;                            int size,&#10;                            int (*cmp) (const void *, const void *),&#10;                            int flags)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="const void" id="base" text="const void *base" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
    <arg type="int" id="cmp" text="int (*cmp) (const void *, const void *)" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_new_nid" text="int OBJ_new_nid(int num)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_add_object" text="int OBJ_add_object(const ASN1_OBJECT *obj)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const ASN1_OBJECT" id="obj" text="const ASN1_OBJECT *obj" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_create" text="int OBJ_create(const char *oid, const char *sn, const char *ln)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="const char" id="oid" text="const char *oid" mod=""/>
    <arg type="const char" id="sn" text="const char *sn" mod=""/>
    <arg type="const char" id="ln" text="const char *ln" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OBJ_cleanup" text="void OBJ_cleanup(void)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="void" id="ANON1" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_create_objects" text="int OBJ_create_objects(BIO *in)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="BIO" id="in" text="BIO *in" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_find_sigid_algs" text="int OBJ_find_sigid_algs(int signid, int *pdig_nid, int *ppkey_nid)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="int" id="signid" text="int signid" mod=""/>
    <arg type="int" id="pdig_nid" text="int *pdig_nid" mod=""/>
    <arg type="int" id="ppkey_nid" text="int *ppkey_nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_find_sigid_by_algs" text="int OBJ_find_sigid_by_algs(int *psignid, int dig_nid, int pkey_nid)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="int" id="psignid" text="int *psignid" mod=""/>
    <arg type="int" id="dig_nid" text="int dig_nid" mod=""/>
    <arg type="int" id="pkey_nid" text="int pkey_nid" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="OBJ_add_sigid" text="int OBJ_add_sigid(int signid, int dig_id, int pkey_id)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="int" id="signid" text="int signid" mod=""/>
    <arg type="int" id="dig_id" text="int dig_id" mod=""/>
    <arg type="int" id="pkey_id" text="int pkey_id" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="OBJ_sigid_free" text="void OBJ_sigid_free(void)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="void" id="ANON2" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="check_defer" text="void check_defer(int nid)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="int" id="nid" text="int nid" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_OBJ_strings" text="void ERR_load_OBJ_strings(void)" file="/usr/include/openssl/objects.h">
  <args>
    <arg type="void" id="ANON3" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_REQ" id="TS_REQ_new" text="TS_REQ *TS_REQ_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON4" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_REQ_free" text="void TS_REQ_free(TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_REQ" text="int i2d_TS_REQ(const TS_REQ *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_REQ" id="a" text="const TS_REQ *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_REQ" id="d2i_TS_REQ" text="TS_REQ *d2i_TS_REQ(TS_REQ **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_REQ" id="TS_REQ_dup" text="TS_REQ *TS_REQ_dup(TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_REQ" id="d2i_TS_REQ_fp" text="TS_REQ *d2i_TS_REQ_fp(FILE *fp, TS_REQ **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="TS_REQ" id="a" text="TS_REQ **a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_REQ_fp" text="int i2d_TS_REQ_fp(FILE *fp, TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_REQ" id="d2i_TS_REQ_bio" text="TS_REQ *d2i_TS_REQ_bio(BIO *fp, TS_REQ **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="TS_REQ" id="a" text="TS_REQ **a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_REQ_bio" text="int i2d_TS_REQ_bio(BIO *fp, TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_MSG_IMPRINT" id="TS_MSG_IMPRINT_new" text="TS_MSG_IMPRINT *TS_MSG_IMPRINT_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON5" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_MSG_IMPRINT_free" text="void TS_MSG_IMPRINT_free(TS_MSG_IMPRINT *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_MSG_IMPRINT" id="a" text="TS_MSG_IMPRINT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_MSG_IMPRINT" text="int i2d_TS_MSG_IMPRINT(const TS_MSG_IMPRINT *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_MSG_IMPRINT" id="a" text="const TS_MSG_IMPRINT *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_MSG_IMPRINT" id="d2i_TS_MSG_IMPRINT" text="TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT(TS_MSG_IMPRINT **a,&#10;                                   const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_MSG_IMPRINT" id="a" text="TS_MSG_IMPRINT **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_MSG_IMPRINT" id="TS_MSG_IMPRINT_dup" text="TS_MSG_IMPRINT *TS_MSG_IMPRINT_dup(TS_MSG_IMPRINT *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_MSG_IMPRINT" id="a" text="TS_MSG_IMPRINT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_MSG_IMPRINT" id="d2i_TS_MSG_IMPRINT_fp" text="TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="TS_MSG_IMPRINT" id="a" text="TS_MSG_IMPRINT **a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_MSG_IMPRINT_fp" text="int i2d_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="TS_MSG_IMPRINT" id="a" text="TS_MSG_IMPRINT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_MSG_IMPRINT" id="d2i_TS_MSG_IMPRINT_bio" text="TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_bio(BIO *fp, TS_MSG_IMPRINT **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="TS_MSG_IMPRINT" id="a" text="TS_MSG_IMPRINT **a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_MSG_IMPRINT_bio" text="int i2d_TS_MSG_IMPRINT_bio(BIO *fp, TS_MSG_IMPRINT *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="TS_MSG_IMPRINT" id="a" text="TS_MSG_IMPRINT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_RESP" id="TS_RESP_new" text="TS_RESP *TS_RESP_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON6" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_RESP_free" text="void TS_RESP_free(TS_RESP *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP" id="a" text="TS_RESP *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_RESP" text="int i2d_TS_RESP(const TS_RESP *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_RESP" id="a" text="const TS_RESP *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_RESP" id="d2i_TS_RESP" text="TS_RESP *d2i_TS_RESP(TS_RESP **a, const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP" id="a" text="TS_RESP **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_TST_INFO" id="PKCS7_to_TS_TST_INFO" text="TS_TST_INFO *PKCS7_to_TS_TST_INFO(PKCS7 *token)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="PKCS7" id="token" text="PKCS7 *token" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_RESP" id="TS_RESP_dup" text="TS_RESP *TS_RESP_dup(TS_RESP *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP" id="a" text="TS_RESP *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_RESP" id="d2i_TS_RESP_fp" text="TS_RESP *d2i_TS_RESP_fp(FILE *fp, TS_RESP **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="TS_RESP" id="a" text="TS_RESP **a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_RESP_fp" text="int i2d_TS_RESP_fp(FILE *fp, TS_RESP *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="TS_RESP" id="a" text="TS_RESP *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_RESP" id="d2i_TS_RESP_bio" text="TS_RESP *d2i_TS_RESP_bio(BIO *fp, TS_RESP **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="TS_RESP" id="a" text="TS_RESP **a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_RESP_bio" text="int i2d_TS_RESP_bio(BIO *fp, TS_RESP *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="TS_RESP" id="a" text="TS_RESP *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_STATUS_INFO" id="TS_STATUS_INFO_new" text="TS_STATUS_INFO *TS_STATUS_INFO_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON7" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_STATUS_INFO_free" text="void TS_STATUS_INFO_free(TS_STATUS_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_STATUS_INFO" id="a" text="TS_STATUS_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_STATUS_INFO" text="int i2d_TS_STATUS_INFO(const TS_STATUS_INFO *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_STATUS_INFO" id="a" text="const TS_STATUS_INFO *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_STATUS_INFO" id="d2i_TS_STATUS_INFO" text="TS_STATUS_INFO *d2i_TS_STATUS_INFO(TS_STATUS_INFO **a,&#10;                                   const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_STATUS_INFO" id="a" text="TS_STATUS_INFO **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_STATUS_INFO" id="TS_STATUS_INFO_dup" text="TS_STATUS_INFO *TS_STATUS_INFO_dup(TS_STATUS_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_STATUS_INFO" id="a" text="TS_STATUS_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_TST_INFO" id="TS_TST_INFO_new" text="TS_TST_INFO *TS_TST_INFO_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON8" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_TST_INFO_free" text="void TS_TST_INFO_free(TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_TST_INFO" text="int i2d_TS_TST_INFO(const TS_TST_INFO *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_TST_INFO" id="a" text="const TS_TST_INFO *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_TST_INFO" id="d2i_TS_TST_INFO" text="TS_TST_INFO *d2i_TS_TST_INFO(TS_TST_INFO **a, const unsigned char **pp,&#10;                             long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_TST_INFO" id="TS_TST_INFO_dup" text="TS_TST_INFO *TS_TST_INFO_dup(TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_TST_INFO" id="d2i_TS_TST_INFO_fp" text="TS_TST_INFO *d2i_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO **a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_TST_INFO_fp" text="int i2d_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_TST_INFO" id="d2i_TS_TST_INFO_bio" text="TS_TST_INFO *d2i_TS_TST_INFO_bio(BIO *fp, TS_TST_INFO **a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO **a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_TST_INFO_bio" text="int i2d_TS_TST_INFO_bio(BIO *fp, TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_ACCURACY" id="TS_ACCURACY_new" text="TS_ACCURACY *TS_ACCURACY_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON9" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_ACCURACY_free" text="void TS_ACCURACY_free(TS_ACCURACY *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_ACCURACY" id="a" text="TS_ACCURACY *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_TS_ACCURACY" text="int i2d_TS_ACCURACY(const TS_ACCURACY *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_ACCURACY" id="a" text="const TS_ACCURACY *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_ACCURACY" id="d2i_TS_ACCURACY" text="TS_ACCURACY *d2i_TS_ACCURACY(TS_ACCURACY **a, const unsigned char **pp,&#10;                             long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_ACCURACY" id="a" text="TS_ACCURACY **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_ACCURACY" id="TS_ACCURACY_dup" text="TS_ACCURACY *TS_ACCURACY_dup(TS_ACCURACY *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_ACCURACY" id="a" text="TS_ACCURACY *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ESS_ISSUER_SERIAL" id="ESS_ISSUER_SERIAL_new" text="ESS_ISSUER_SERIAL *ESS_ISSUER_SERIAL_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON10" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ESS_ISSUER_SERIAL_free" text="void ESS_ISSUER_SERIAL_free(ESS_ISSUER_SERIAL *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="ESS_ISSUER_SERIAL" id="a" text="ESS_ISSUER_SERIAL *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ESS_ISSUER_SERIAL" text="int i2d_ESS_ISSUER_SERIAL(const ESS_ISSUER_SERIAL *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const ESS_ISSUER_SERIAL" id="a" text="const ESS_ISSUER_SERIAL *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="ESS_ISSUER_SERIAL" id="d2i_ESS_ISSUER_SERIAL" text="ESS_ISSUER_SERIAL *d2i_ESS_ISSUER_SERIAL(ESS_ISSUER_SERIAL **a,&#10;                                         const unsigned char **pp,&#10;                                         long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="ESS_ISSUER_SERIAL" id="a" text="ESS_ISSUER_SERIAL **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="ESS_ISSUER_SERIAL" id="ESS_ISSUER_SERIAL_dup" text="ESS_ISSUER_SERIAL *ESS_ISSUER_SERIAL_dup(ESS_ISSUER_SERIAL *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="ESS_ISSUER_SERIAL" id="a" text="ESS_ISSUER_SERIAL *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ESS_CERT_ID" id="ESS_CERT_ID_new" text="ESS_CERT_ID *ESS_CERT_ID_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON11" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ESS_CERT_ID_free" text="void ESS_CERT_ID_free(ESS_CERT_ID *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="ESS_CERT_ID" id="a" text="ESS_CERT_ID *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ESS_CERT_ID" text="int i2d_ESS_CERT_ID(const ESS_CERT_ID *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const ESS_CERT_ID" id="a" text="const ESS_CERT_ID *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="ESS_CERT_ID" id="d2i_ESS_CERT_ID" text="ESS_CERT_ID *d2i_ESS_CERT_ID(ESS_CERT_ID **a, const unsigned char **pp,&#10;                             long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="ESS_CERT_ID" id="a" text="ESS_CERT_ID **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="ESS_CERT_ID" id="ESS_CERT_ID_dup" text="ESS_CERT_ID *ESS_CERT_ID_dup(ESS_CERT_ID *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="ESS_CERT_ID" id="a" text="ESS_CERT_ID *a" mod=""/>
  </args>
</fdecl>
<fdecl type="ESS_SIGNING_CERT" id="ESS_SIGNING_CERT_new" text="ESS_SIGNING_CERT *ESS_SIGNING_CERT_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON12" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ESS_SIGNING_CERT_free" text="void ESS_SIGNING_CERT_free(ESS_SIGNING_CERT *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="ESS_SIGNING_CERT" id="a" text="ESS_SIGNING_CERT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_ESS_SIGNING_CERT" text="int i2d_ESS_SIGNING_CERT(const ESS_SIGNING_CERT *a, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const ESS_SIGNING_CERT" id="a" text="const ESS_SIGNING_CERT *a" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="ESS_SIGNING_CERT" id="d2i_ESS_SIGNING_CERT" text="ESS_SIGNING_CERT *d2i_ESS_SIGNING_CERT(ESS_SIGNING_CERT **a,&#10;                                       const unsigned char **pp, long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="ESS_SIGNING_CERT" id="a" text="ESS_SIGNING_CERT **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="ESS_SIGNING_CERT" id="ESS_SIGNING_CERT_dup" text="ESS_SIGNING_CERT *ESS_SIGNING_CERT_dup(ESS_SIGNING_CERT *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="ESS_SIGNING_CERT" id="a" text="ESS_SIGNING_CERT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_TS_strings" text="void ERR_load_TS_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON13" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_set_version" text="int TS_REQ_set_version(TS_REQ *a, long version)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="long" id="version" text="long version" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="TS_REQ_get_version" text="long TS_REQ_get_version(const TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_REQ" id="a" text="const TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_set_msg_imprint" text="int TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="TS_MSG_IMPRINT" id="msg_imprint" text="TS_MSG_IMPRINT *msg_imprint" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_MSG_IMPRINT" id="TS_REQ_get_msg_imprint" text="TS_MSG_IMPRINT *TS_REQ_get_msg_imprint(TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_MSG_IMPRINT_set_algo" text="int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_MSG_IMPRINT" id="a" text="TS_MSG_IMPRINT *a" mod=""/>
    <arg type="X509_ALGOR" id="alg" text="X509_ALGOR *alg" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_ALGOR" id="TS_MSG_IMPRINT_get_algo" text="X509_ALGOR *TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_MSG_IMPRINT" id="a" text="TS_MSG_IMPRINT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_MSG_IMPRINT_set_msg" text="int TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_MSG_IMPRINT" id="a" text="TS_MSG_IMPRINT *a" mod=""/>
    <arg type="unsigned char" id="d" text="unsigned char *d" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OCTET_STRING" id="TS_MSG_IMPRINT_get_msg" text="ASN1_OCTET_STRING *TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_MSG_IMPRINT" id="a" text="TS_MSG_IMPRINT *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_set_policy_id" text="int TS_REQ_set_policy_id(TS_REQ *a, ASN1_OBJECT *policy)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="ASN1_OBJECT" id="policy" text="ASN1_OBJECT *policy" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="TS_REQ_get_policy_id" text="ASN1_OBJECT *TS_REQ_get_policy_id(TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_set_nonce" text="int TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="const ASN1_INTEGER" id="nonce" text="const ASN1_INTEGER *nonce" mod=""/>
  </args>
</fdecl>
<fdecl type="const ASN1_INTEGER" id="TS_REQ_get_nonce" text="const ASN1_INTEGER *TS_REQ_get_nonce(const TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_REQ" id="a" text="const TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_set_cert_req" text="int TS_REQ_set_cert_req(TS_REQ *a, int cert_req)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="int" id="cert_req" text="int cert_req" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_get_cert_req" text="int TS_REQ_get_cert_req(const TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_REQ" id="a" text="const TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_EXTENSION" id="TS_REQ_get_exts" text="struct stack_st_X509_EXTENSION &#10;# 385 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot;&#10;                        *TS_REQ_get_exts(TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_REQ_ext_free" text="void TS_REQ_ext_free(TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_get_ext_count" text="int TS_REQ_get_ext_count(TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_get_ext_by_NID" text="int TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_get_ext_by_OBJ" text="int TS_REQ_get_ext_by_OBJ(TS_REQ *a, ASN1_OBJECT *obj, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_get_ext_by_critical" text="int TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="TS_REQ_get_ext" text="X509_EXTENSION *TS_REQ_get_ext(TS_REQ *a, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="TS_REQ_delete_ext" text="X509_EXTENSION *TS_REQ_delete_ext(TS_REQ *a, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_add_ext" text="int TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_REQ_get_ext_d2i" text="void *TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="crit" text="int *crit" mod=""/>
    <arg type="int" id="idx" text="int *idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_REQ_print_bio" text="int TS_REQ_print_bio(BIO *bio, TS_REQ *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="TS_REQ" id="a" text="TS_REQ *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_set_status_info" text="int TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *info)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP" id="a" text="TS_RESP *a" mod=""/>
    <arg type="TS_STATUS_INFO" id="info" text="TS_STATUS_INFO *info" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_STATUS_INFO" id="TS_RESP_get_status_info" text="TS_STATUS_INFO *TS_RESP_get_status_info(TS_RESP *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP" id="a" text="TS_RESP *a" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_RESP_set_tst_info" text="void TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP" id="a" text="TS_RESP *a" mod=""/>
    <arg type="PKCS7" id="p7" text="PKCS7 *p7" mod=""/>
    <arg type="TS_TST_INFO" id="tst_info" text="TS_TST_INFO *tst_info" mod=""/>
  </args>
</fdecl>
<fdecl type="PKCS7" id="TS_RESP_get_token" text="PKCS7 *TS_RESP_get_token(TS_RESP *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP" id="a" text="TS_RESP *a" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_TST_INFO" id="TS_RESP_get_tst_info" text="TS_TST_INFO *TS_RESP_get_tst_info(TS_RESP *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP" id="a" text="TS_RESP *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_set_version" text="int TS_TST_INFO_set_version(TS_TST_INFO *a, long version)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="long" id="version" text="long version" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="TS_TST_INFO_get_version" text="long TS_TST_INFO_get_version(const TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_TST_INFO" id="a" text="const TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_set_policy_id" text="int TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy_id)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="ASN1_OBJECT" id="policy_id" text="ASN1_OBJECT *policy_id" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_OBJECT" id="TS_TST_INFO_get_policy_id" text="ASN1_OBJECT *TS_TST_INFO_get_policy_id(TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_set_msg_imprint" text="int TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="TS_MSG_IMPRINT" id="msg_imprint" text="TS_MSG_IMPRINT *msg_imprint" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_MSG_IMPRINT" id="TS_TST_INFO_get_msg_imprint" text="TS_MSG_IMPRINT *TS_TST_INFO_get_msg_imprint(TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_set_serial" text="int TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="const ASN1_INTEGER" id="serial" text="const ASN1_INTEGER *serial" mod=""/>
  </args>
</fdecl>
<fdecl type="const ASN1_INTEGER" id="TS_TST_INFO_get_serial" text="const ASN1_INTEGER *TS_TST_INFO_get_serial(const TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_TST_INFO" id="a" text="const TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_set_time" text="int TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="const ASN1_GENERALIZEDTIME" id="gtime" text="const ASN1_GENERALIZEDTIME *gtime" mod=""/>
  </args>
</fdecl>
<fdecl type="const ASN1_GENERALIZEDTIME" id="TS_TST_INFO_get_time" text="const ASN1_GENERALIZEDTIME *TS_TST_INFO_get_time(const TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_TST_INFO" id="a" text="const TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_set_accuracy" text="int TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="TS_ACCURACY" id="accuracy" text="TS_ACCURACY *accuracy" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_ACCURACY" id="TS_TST_INFO_get_accuracy" text="TS_ACCURACY *TS_TST_INFO_get_accuracy(TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_ACCURACY_set_seconds" text="int TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_ACCURACY" id="a" text="TS_ACCURACY *a" mod=""/>
    <arg type="const ASN1_INTEGER" id="seconds" text="const ASN1_INTEGER *seconds" mod=""/>
  </args>
</fdecl>
<fdecl type="const ASN1_INTEGER" id="TS_ACCURACY_get_seconds" text="const ASN1_INTEGER *TS_ACCURACY_get_seconds(const TS_ACCURACY *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_ACCURACY" id="a" text="const TS_ACCURACY *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_ACCURACY_set_millis" text="int TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_ACCURACY" id="a" text="TS_ACCURACY *a" mod=""/>
    <arg type="const ASN1_INTEGER" id="millis" text="const ASN1_INTEGER *millis" mod=""/>
  </args>
</fdecl>
<fdecl type="const ASN1_INTEGER" id="TS_ACCURACY_get_millis" text="const ASN1_INTEGER *TS_ACCURACY_get_millis(const TS_ACCURACY *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_ACCURACY" id="a" text="const TS_ACCURACY *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_ACCURACY_set_micros" text="int TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_ACCURACY" id="a" text="TS_ACCURACY *a" mod=""/>
    <arg type="const ASN1_INTEGER" id="micros" text="const ASN1_INTEGER *micros" mod=""/>
  </args>
</fdecl>
<fdecl type="const ASN1_INTEGER" id="TS_ACCURACY_get_micros" text="const ASN1_INTEGER *TS_ACCURACY_get_micros(const TS_ACCURACY *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_ACCURACY" id="a" text="const TS_ACCURACY *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_set_ordering" text="int TS_TST_INFO_set_ordering(TS_TST_INFO *a, int ordering)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="int" id="ordering" text="int ordering" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_get_ordering" text="int TS_TST_INFO_get_ordering(const TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_TST_INFO" id="a" text="const TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_set_nonce" text="int TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="const ASN1_INTEGER" id="nonce" text="const ASN1_INTEGER *nonce" mod=""/>
  </args>
</fdecl>
<fdecl type="const ASN1_INTEGER" id="TS_TST_INFO_get_nonce" text="const ASN1_INTEGER *TS_TST_INFO_get_nonce(const TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const TS_TST_INFO" id="a" text="const TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_set_tsa" text="int TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="GENERAL_NAME" id="tsa" text="GENERAL_NAME *tsa" mod=""/>
  </args>
</fdecl>
<fdecl type="GENERAL_NAME" id="TS_TST_INFO_get_tsa" text="GENERAL_NAME *TS_TST_INFO_get_tsa(TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_EXTENSION" id="TS_TST_INFO_get_exts" text="struct stack_st_X509_EXTENSION &#10;# 446 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot;&#10;                        *TS_TST_INFO_get_exts(TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_TST_INFO_ext_free" text="void TS_TST_INFO_ext_free(TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_get_ext_count" text="int TS_TST_INFO_get_ext_count(TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_get_ext_by_NID" text="int TS_TST_INFO_get_ext_by_NID(TS_TST_INFO *a, int nid, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_get_ext_by_OBJ" text="int TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO *a, ASN1_OBJECT *obj, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="ASN1_OBJECT" id="obj" text="ASN1_OBJECT *obj" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_get_ext_by_critical" text="int TS_TST_INFO_get_ext_by_critical(TS_TST_INFO *a, int crit, int lastpos)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="int" id="crit" text="int crit" mod=""/>
    <arg type="int" id="lastpos" text="int lastpos" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="TS_TST_INFO_get_ext" text="X509_EXTENSION *TS_TST_INFO_get_ext(TS_TST_INFO *a, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_EXTENSION" id="TS_TST_INFO_delete_ext" text="X509_EXTENSION *TS_TST_INFO_delete_ext(TS_TST_INFO *a, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_add_ext" text="int TS_TST_INFO_add_ext(TS_TST_INFO *a, X509_EXTENSION *ex, int loc)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="X509_EXTENSION" id="ex" text="X509_EXTENSION *ex" mod=""/>
    <arg type="int" id="loc" text="int loc" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_TST_INFO_get_ext_d2i" text="void *TS_TST_INFO_get_ext_d2i(TS_TST_INFO *a, int nid, int *crit, int *idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
    <arg type="int" id="nid" text="int nid" mod=""/>
    <arg type="int" id="crit" text="int *crit" mod=""/>
    <arg type="int" id="idx" text="int *idx" mod=""/>
  </args>
</fdecl>
<fdecl type="ASN1_INTEGER" id="TS_serial_cb" text="typedef ASN1_INTEGER *(*TS_serial_cb) (struct TS_resp_ctx *, void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="struct TS_resp_ctx" id="ANON14" text="struct TS_resp_ctx *" mod=""/>
    <arg type="void" id="ANON15" text="void *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_time_cb" text="typedef int (*TS_time_cb) (struct TS_resp_ctx *, void *, long *sec,&#10;                           long *usec)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="struct TS_resp_ctx" id="ANON16" text="struct TS_resp_ctx *" mod=""/>
    <arg type="void" id="ANON17" text="void *" mod=""/>
    <arg type="long" id="sec" text="long *sec" mod=""/>
    <arg type="long" id="usec" text="long *usec" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_extension_cb" text="typedef int (*TS_extension_cb) (struct TS_resp_ctx *, X509_EXTENSION *,&#10;                                void *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="struct TS_resp_ctx" id="ANON18" text="struct TS_resp_ctx *" mod=""/>
    <arg type="X509_EXTENSION" id="ANON19" text="X509_EXTENSION *" mod=""/>
    <arg type="void" id="ANON20" text="void *" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_RESP_CTX" id="TS_RESP_CTX_new" text="TS_RESP_CTX *TS_RESP_CTX_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON21" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_RESP_CTX_free" text="void TS_RESP_CTX_free(TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_CTX_set_signer_cert" text="int TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="X509" id="signer" text="X509 *signer" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_CTX_set_signer_key" text="int TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="EVP_PKEY" id="key" text="EVP_PKEY *key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_CTX_set_def_policy" text="int TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, ASN1_OBJECT *def_policy)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="ASN1_OBJECT" id="def_policy" text="ASN1_OBJECT *def_policy" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_CTX_set_certs" text="int TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot; 3 4&#10;                                           struct stack_st_X509 &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot;&#10;                                                          *certs)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot;&#10;                                                          *certs" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_CTX_add_policy" text="int TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, ASN1_OBJECT *policy)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="ASN1_OBJECT" id="policy" text="ASN1_OBJECT *policy" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_CTX_add_md" text="int TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="const EVP_MD" id="md" text="const EVP_MD *md" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_CTX_set_accuracy" text="int TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx,&#10;                             int secs, int millis, int micros)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="int" id="secs" text="int secs" mod=""/>
    <arg type="int" id="millis" text="int millis" mod=""/>
    <arg type="int" id="micros" text="int micros" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_CTX_set_clock_precision_digits" text="int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,&#10;                                           unsigned clock_precision_digits)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="unsigned" id="clock_precision_digits" text="unsigned clock_precision_digits" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_RESP_CTX_add_flags" text="void TS_RESP_CTX_add_flags(TS_RESP_CTX *ctx, int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="int" id="flags" text="int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_RESP_CTX_set_serial_cb" text="void TS_RESP_CTX_set_serial_cb(TS_RESP_CTX *ctx, TS_serial_cb cb, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="TS_serial_cb" id="cb" text="TS_serial_cb cb" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_RESP_CTX_set_time_cb" text="void TS_RESP_CTX_set_time_cb(TS_RESP_CTX *ctx, TS_time_cb cb, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="TS_time_cb" id="cb" text="TS_time_cb cb" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_RESP_CTX_set_extension_cb" text="void TS_RESP_CTX_set_extension_cb(TS_RESP_CTX *ctx,&#10;                                  TS_extension_cb cb, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="TS_extension_cb" id="cb" text="TS_extension_cb cb" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_CTX_set_status_info" text="int TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx,&#10;                                int status, const char *text)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="int" id="status" text="int status" mod=""/>
    <arg type="const char" id="text" text="const char *text" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_CTX_set_status_info_cond" text="int TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx,&#10;                                     int status, const char *text)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="int" id="status" text="int status" mod=""/>
    <arg type="const char" id="text" text="const char *text" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_CTX_add_failure_info" text="int TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="int" id="failure" text="int failure" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_REQ" id="TS_RESP_CTX_get_request" text="TS_REQ *TS_RESP_CTX_get_request(TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_TST_INFO" id="TS_RESP_CTX_get_tst_info" text="TS_TST_INFO *TS_RESP_CTX_get_tst_info(TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_RESP" id="TS_RESP_create_response" text="TS_RESP *TS_RESP_create_response(TS_RESP_CTX *ctx, BIO *req_bio)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
    <arg type="BIO" id="req_bio" text="BIO *req_bio" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_verify_signature" text="int TS_RESP_verify_signature(PKCS7 *token, &#10;# 612 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot; 3 4&#10;                                          struct stack_st_X509 &#10;# 612 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot;&#10;                                                         *certs,&#10;                             X509_STORE *store, X509 **signer_out)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="PKCS7" id="token" text="PKCS7 *token" mod=""/>
    <arg type="struct stack_st_X509" id="certs" text="struct stack_st_X509 &#10;# 612 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot;&#10;                                                         *certs" mod=""/>
    <arg type="X509_STORE" id="store" text="X509_STORE *store" mod=""/>
    <arg type="X509" id="signer_out" text="X509 **signer_out" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_verify_response" text="int TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_VERIFY_CTX" id="ctx" text="TS_VERIFY_CTX *ctx" mod=""/>
    <arg type="TS_RESP" id="response" text="TS_RESP *response" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_verify_token" text="int TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_VERIFY_CTX" id="ctx" text="TS_VERIFY_CTX *ctx" mod=""/>
    <arg type="PKCS7" id="token" text="PKCS7 *token" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_VERIFY_CTX" id="TS_VERIFY_CTX_new" text="TS_VERIFY_CTX *TS_VERIFY_CTX_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON22" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_VERIFY_CTX_init" text="void TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_VERIFY_CTX" id="ctx" text="TS_VERIFY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_VERIFY_CTX_free" text="void TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_VERIFY_CTX" id="ctx" text="TS_VERIFY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="TS_VERIFY_CTX_cleanup" text="void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_VERIFY_CTX" id="ctx" text="TS_VERIFY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="TS_VERIFY_CTX" id="TS_REQ_to_TS_VERIFY_CTX" text="TS_VERIFY_CTX *TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="TS_REQ" id="req" text="TS_REQ *req" mod=""/>
    <arg type="TS_VERIFY_CTX" id="ctx" text="TS_VERIFY_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_RESP_print_bio" text="int TS_RESP_print_bio(BIO *bio, TS_RESP *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="TS_RESP" id="a" text="TS_RESP *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_STATUS_INFO_print_bio" text="int TS_STATUS_INFO_print_bio(BIO *bio, TS_STATUS_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="TS_STATUS_INFO" id="a" text="TS_STATUS_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_TST_INFO_print_bio" text="int TS_TST_INFO_print_bio(BIO *bio, TS_TST_INFO *a)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="TS_TST_INFO" id="a" text="TS_TST_INFO *a" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_ASN1_INTEGER_print_bio" text="int TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="const ASN1_INTEGER" id="num" text="const ASN1_INTEGER *num" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_OBJ_print_bio" text="int TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="const ASN1_OBJECT" id="obj" text="const ASN1_OBJECT *obj" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_ext_print_bio" text="int TS_ext_print_bio(BIO *bio, const &#10;# 722 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot; 3 4&#10;                                    struct stack_st_X509_EXTENSION &#10;# 722 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot;&#10;                                                             *extensions)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="const &#10;# 722 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot; 3 4&#10;                                    struct stack_st_X509_EXTENSION" id="extensions" text="const &#10;# 722 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot; 3 4&#10;                                    struct stack_st_X509_EXTENSION &#10;# 722 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot;&#10;                                                             *extensions" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_X509_ALGOR_print_bio" text="int TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="const X509_ALGOR" id="alg" text="const X509_ALGOR *alg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_MSG_IMPRINT_print_bio" text="int TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *msg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="BIO" id="bio" text="BIO *bio" mod=""/>
    <arg type="TS_MSG_IMPRINT" id="msg" text="TS_MSG_IMPRINT *msg" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="TS_CONF_load_cert" text="X509 *TS_CONF_load_cert(const char *file)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const char" id="file" text="const char *file" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509" id="TS_CONF_load_certs" text="struct stack_st_X509 &#10;# 732 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h&quot;&#10;              *TS_CONF_load_certs(const char *file)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const char" id="file" text="const char *file" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="TS_CONF_load_key" text="EVP_PKEY *TS_CONF_load_key(const char *file, const char *pass)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="TS_CONF_get_tsa_section" text="const char *TS_CONF_get_tsa_section(CONF *conf, const char *section)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_serial" text="int TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,&#10;                       TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="TS_serial_cb" id="cb" text="TS_serial_cb cb" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_crypto_device" text="int TS_CONF_set_crypto_device(CONF *conf, const char *section,&#10;                              const char *device)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="const char" id="device" text="const char *device" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_default_engine" text="int TS_CONF_set_default_engine(const char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="const char" id="name" text="const char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_signer_cert" text="int TS_CONF_set_signer_cert(CONF *conf, const char *section,&#10;                            const char *cert, TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="const char" id="cert" text="const char *cert" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_certs" text="int TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,&#10;                      TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="const char" id="certs" text="const char *certs" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_signer_key" text="int TS_CONF_set_signer_key(CONF *conf, const char *section,&#10;                           const char *key, const char *pass,&#10;                           TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="const char" id="key" text="const char *key" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_def_policy" text="int TS_CONF_set_def_policy(CONF *conf, const char *section,&#10;                           const char *policy, TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="const char" id="policy" text="const char *policy" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_policies" text="int TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_digests" text="int TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_accuracy" text="int TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_clock_precision_digits" text="int TS_CONF_set_clock_precision_digits(CONF *conf, const char *section,&#10;                                       TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_ordering" text="int TS_CONF_set_ordering(CONF *conf, const char *section, TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_tsa_name" text="int TS_CONF_set_tsa_name(CONF *conf, const char *section, TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="TS_CONF_set_ess_cert_id_chain" text="int TS_CONF_set_ess_cert_id_chain(CONF *conf, const char *section,&#10;                                  TS_RESP_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="CONF" id="conf" text="CONF *conf" mod=""/>
    <arg type="const char" id="section" text="const char *section" mod=""/>
    <arg type="TS_RESP_CTX" id="ctx" text="TS_RESP_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_TS_strings" text="void ERR_load_TS_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ts.h">
  <args>
    <arg type="void" id="ANON23" text="void" mod=""/>
  </args>
</fdecl>


<fdecl type="CMAC_CTX" id="CMAC_CTX_new" text="CMAC_CTX *CMAC_CTX_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cmac.h">
  <args>
    <arg type="void" id="ANON0" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CMAC_CTX_cleanup" text="void CMAC_CTX_cleanup(CMAC_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cmac.h">
  <args>
    <arg type="CMAC_CTX" id="ctx" text="CMAC_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="CMAC_CTX_free" text="void CMAC_CTX_free(CMAC_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cmac.h">
  <args>
    <arg type="CMAC_CTX" id="ctx" text="CMAC_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_CIPHER_CTX" id="CMAC_CTX_get0_cipher_ctx" text="EVP_CIPHER_CTX *CMAC_CTX_get0_cipher_ctx(CMAC_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cmac.h">
  <args>
    <arg type="CMAC_CTX" id="ctx" text="CMAC_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMAC_CTX_copy" text="int CMAC_CTX_copy(CMAC_CTX *out, const CMAC_CTX *in)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cmac.h">
  <args>
    <arg type="CMAC_CTX" id="out" text="CMAC_CTX *out" mod=""/>
    <arg type="const CMAC_CTX" id="in" text="const CMAC_CTX *in" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMAC_Init" text="int CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,&#10;              const EVP_CIPHER *cipher, ENGINE *impl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cmac.h">
  <args>
    <arg type="CMAC_CTX" id="ctx" text="CMAC_CTX *ctx" mod=""/>
    <arg type="const void" id="key" text="const void *key" mod=""/>
    <arg type="size_t" id="keylen" text="size_t keylen" mod=""/>
    <arg type="const EVP_CIPHER" id="cipher" text="const EVP_CIPHER *cipher" mod=""/>
    <arg type="ENGINE" id="impl" text="ENGINE *impl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMAC_Update" text="int CMAC_Update(CMAC_CTX *ctx, const void *data, size_t dlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cmac.h">
  <args>
    <arg type="CMAC_CTX" id="ctx" text="CMAC_CTX *ctx" mod=""/>
    <arg type="const void" id="data" text="const void *data" mod=""/>
    <arg type="size_t" id="dlen" text="size_t dlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMAC_Final" text="int CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cmac.h">
  <args>
    <arg type="CMAC_CTX" id="ctx" text="CMAC_CTX *ctx" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char *out" mod=""/>
    <arg type="size_t" id="poutlen" text="size_t *poutlen" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="CMAC_resume" text="int CMAC_resume(CMAC_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/cmac.h">
  <args>
    <arg type="CMAC_CTX" id="ctx" text="CMAC_CTX *ctx" mod=""/>
  </args>
</fdecl>

2016/10/27 18:49:08 FATAL  31625 Error in SLIF parse: No lexeme found at line 811, column 67
* String before error: ain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509)\s
* The error was at line 811, column 67, and at character 0x002a '*', ...
* here: *chain);\n# 802 "../sujet1/bdd/openssl/openssl-1.0
Marpa::R2 exception at /home/bicodul/perl5/lib/perl5/MarpaX/Languages/C/AST/Impl.pm line 73.

Last position:

At line 811, column 65

int SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain);
----------------------------------------------------------------^


<fdecl type="int" id="tls_session_ticket_ext_cb_fn" text="typedef int (*tls_session_ticket_ext_cb_fn) (SSL *s,&#10;                                             const unsigned char *data,&#10;                                             int len, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="tls_session_secret_cb_fn" text="typedef int (*tls_session_secret_cb_fn) (SSL *s, void *secret,&#10;                                         int *secret_len,&#10;                                         &#10;# 395 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;                                        struct stack_st_SSL_CIPHER &#10;# 395 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                             *peer_ciphers,&#10;                                         SSL_CIPHER **cipher, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="void" id="secret" text="void *secret" mod=""/>
    <arg type="int" id="secret_len" text="int *secret_len" mod=""/>
    <arg type="struct stack_st_SSL_CIPHER" id="peer_ciphers" text="struct stack_st_SSL_CIPHER &#10;# 395 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                             *peer_ciphers" mod=""/>
    <arg type="SSL_CIPHER" id="cipher" text="SSL_CIPHER **cipher" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="custom_ext_add_cb" text="typedef int (*custom_ext_add_cb) (SSL *s, unsigned int ext_type,&#10;                                  const unsigned char **out,&#10;                                  size_t *outlen, int *al, void *add_arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="unsigned int" id="ext_type" text="unsigned int ext_type" mod=""/>
    <arg type="const unsigned char" id="out" text="const unsigned char **out" mod=""/>
    <arg type="size_t" id="outlen" text="size_t *outlen" mod=""/>
    <arg type="int" id="al" text="int *al" mod=""/>
    <arg type="void" id="add_arg" text="void *add_arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="custom_ext_free_cb" text="typedef void (*custom_ext_free_cb) (SSL *s, unsigned int ext_type,&#10;                                    const unsigned char *out, void *add_arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="unsigned int" id="ext_type" text="unsigned int ext_type" mod=""/>
    <arg type="const unsigned char" id="out" text="const unsigned char *out" mod=""/>
    <arg type="void" id="add_arg" text="void *add_arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="custom_ext_parse_cb" text="typedef int (*custom_ext_parse_cb) (SSL *s, unsigned int ext_type,&#10;                                    const unsigned char *in,&#10;                                    size_t inlen, int *al, void *parse_arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="unsigned int" id="ext_type" text="unsigned int ext_type" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="size_t" id="inlen" text="size_t inlen" mod=""/>
    <arg type="int" id="al" text="int *al" mod=""/>
    <arg type="void" id="parse_arg" text="void *parse_arg" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL" id="ANON0" text="struct ssl_method_st {&#10;    int version;&#10;    int (*ssl_new) (SSL *s);&#10;    void (*ssl_clear) (SSL *s);&#10;    void (*ssl_free) (SSL *s);&#10;    int (*ssl_accept) (SSL *s);&#10;    int (*ssl_connect) (SSL *s);&#10;    int (*ssl_read) (SSL *s, void *buf, int len);&#10;    int (*ssl_peek) (SSL *s, void *buf, int len);&#10;    int (*ssl_write) (SSL *s, const void *buf, int len);&#10;    int (*ssl_shutdown) (SSL *s);&#10;    int (*ssl_renegotiate) (SSL *s);&#10;    int (*ssl_renegotiate_check) (SSL *s);&#10;    long (*ssl_get_message) (SSL *s, int st1, int stn, int mt, long&#10;                             max, int *ok);&#10;    int (*ssl_read_bytes) (SSL *s, int type, unsigned char *buf, int len,&#10;                           int peek);&#10;    int (*ssl_write_bytes) (SSL *s, int type, const void *buf_, int len);&#10;    int (*ssl_dispatch_alert) (SSL *s);&#10;    long (*ssl_ctrl) (SSL *s, int cmd, long larg, void *parg);&#10;    long (*ssl_ctx_ctrl) (SSL_CTX *ctx, int cmd, long larg, void *parg);&#10;    const SSL_CIPHER *(*get_cipher_by_char) (const unsigned char *ptr);&#10;    int (*put_cipher_by_char) (const SSL_CIPHER *cipher, unsigned char *ptr);&#10;    int (*ssl_pending) (const SSL *s);&#10;    int (*num_ciphers) (void);&#10;    const SSL_CIPHER *(*get_cipher) (unsigned ncipher);&#10;    const struct ssl_method_st *(*get_ssl_method) (int version);&#10;    long (*get_timeout) (void);&#10;    struct ssl3_enc_method *ssl3_enc;&#10;    int (*ssl_version) (void);&#10;    long (*ssl_callback_ctrl) (SSL *s, int cb_id, void (*fp) (void));&#10;    long (*ssl_ctx_callback_ctrl) (SSL_CTX *s, int cb_id, void (*fp) (void));&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="void" id="buf" text="void *buf" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="void" id="buf" text="void *buf" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="const void" id="buf" text="const void *buf" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="st1" text="int st1" mod=""/>
    <arg type="int" id="stn" text="int stn" mod=""/>
    <arg type="int" id="mt" text="int mt" mod=""/>
    <arg type="long" id="max" text="long&#10;                             max" mod=""/>
    <arg type="int" id="ok" text="int *ok" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="unsigned char" id="buf" text="unsigned char *buf" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="peek" text="int peek" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="const void" id="buf_" text="const void *buf_" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="larg" text="long larg" mod=""/>
    <arg type="void" id="parg" text="void *parg" mod=""/>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="larg" text="long larg" mod=""/>
    <arg type="void" id="parg" text="void *parg" mod=""/>
    <arg type="const unsigned char" id="ptr" text="const unsigned char *ptr" mod=""/>
    <arg type="const SSL_CIPHER" id="cipher" text="const SSL_CIPHER *cipher" mod=""/>
    <arg type="unsigned char" id="ptr" text="unsigned char *ptr" mod=""/>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
    <arg type="void" id="ANON1" text="void" mod=""/>
    <arg type="unsigned" id="ncipher" text="unsigned ncipher" mod=""/>
    <arg type="int" id="version" text="int version" mod=""/>
    <arg type="void" id="ANON2" text="void" mod=""/>
    <arg type="void" id="ANON3" text="void" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="cb_id" text="int cb_id" mod=""/>
    <arg type="void" id="fp" text="void (*fp) (void)" mod=""/>
    <arg type="SSL_CTX" id="s" text="SSL_CTX *s" mod=""/>
    <arg type="int" id="cb_id" text="int cb_id" mod=""/>
    <arg type="void" id="fp" text="void (*fp) (void)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_msg_callback" text="void SSL_CTX_set_msg_callback(SSL_CTX *ctx,&#10;                              void (*cb) (int write_p, int version,&#10;                                          int content_type, const void *buf,&#10;                                          size_t len, SSL *ssl, void *arg))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="void" id="cb" text="void (*cb) (int write_p, int version,&#10;                                          int content_type, const void *buf,&#10;                                          size_t len, SSL *ssl, void *arg)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_msg_callback" text="void SSL_set_msg_callback(SSL *ssl,&#10;                          void (*cb) (int write_p, int version,&#10;                                      int content_type, const void *buf,&#10;                                      size_t len, SSL *ssl, void *arg))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="void" id="cb" text="void (*cb) (int write_p, int version,&#10;                                      int content_type, const void *buf,&#10;                                      size_t len, SSL *ssl, void *arg)" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL" id="SRP_CTX" text="typedef struct srp_ctx_st {&#10;&#10;    void *SRP_cb_arg;&#10;&#10;    int (*TLS_ext_srp_username_callback) (SSL *, int *, void *);&#10;&#10;    int (*SRP_verify_param_callback) (SSL *, void *);&#10;&#10;    char *(*SRP_give_srp_client_pwd_callback) (SSL *, void *);&#10;    char *login;&#10;    BIGNUM *N, *g, *s, *B, *A;&#10;    BIGNUM *a, *b, *v;&#10;    char *info;&#10;    int strength;&#10;    unsigned long srp_Mask;&#10;} SRP_CTX" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ANON4" text="SSL *" mod=""/>
    <arg type="int" id="ANON5" text="int *" mod=""/>
    <arg type="void" id="ANON6" text="void *" mod=""/>
    <arg type="SSL" id="ANON7" text="SSL *" mod=""/>
    <arg type="void" id="ANON8" text="void *" mod=""/>
    <arg type="SSL" id="ANON9" text="SSL *" mod=""/>
    <arg type="void" id="ANON10" text="void *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_SRP_CTX_init" text="int SSL_SRP_CTX_init(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_SRP_CTX_init" text="int SSL_CTX_SRP_CTX_init(SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_SRP_CTX_free" text="int SSL_SRP_CTX_free(SSL *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ctx" text="SSL *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_SRP_CTX_free" text="int SSL_CTX_SRP_CTX_free(SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_srp_server_param_with_username" text="int SSL_srp_server_param_with_username(SSL *s, int *ad)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="ad" text="int *ad" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SRP_generate_server_master_secret" text="int SRP_generate_server_master_secret(SSL *s, unsigned char *master_key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="unsigned char" id="master_key" text="unsigned char *master_key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SRP_Calc_A_param" text="int SRP_Calc_A_param(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SRP_generate_client_master_secret" text="int SRP_generate_client_master_secret(SSL *s, unsigned char *master_key)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="unsigned char" id="master_key" text="unsigned char *master_key" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="GEN_SESSION_CB" text="typedef int (*GEN_SESSION_CB) (const SSL *ssl, unsigned char *id,&#10;                               unsigned int *id_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
    <arg type="unsigned char" id="id" text="unsigned char *id" mod=""/>
    <arg type="unsigned int" id="id_len" text="unsigned int *id_len" mod=""/>
  </args>
</fdecl>
<fdecl type="struct ssl_st" id="ANON11" text="struct ssl_ctx_st {&#10;    const SSL_METHOD *method;&#10;    &#10;# 927 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct stack_st_SSL_CIPHER &#10;# 927 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                        *cipher_list;&#10;&#10;    &#10;# 929 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct stack_st_SSL_CIPHER &#10;# 929 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                        *cipher_list_by_id;&#10;    struct x509_store_st *cert_store;&#10;    &#10;# 931 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct lhash_st_SSL_SESSION &#10;# 931 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                         *sessions;&#10;&#10;&#10;&#10;&#10;    unsigned long session_cache_size;&#10;    struct ssl_session_st *session_cache_head;&#10;    struct ssl_session_st *session_cache_tail;&#10;&#10;&#10;&#10;&#10;&#10;    int session_cache_mode;&#10;&#10;&#10;&#10;&#10;&#10;    long session_timeout;&#10;# 960 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;    int (*new_session_cb) (struct ssl_st *ssl, SSL_SESSION *sess);&#10;    void (*remove_session_cb) (struct ssl_ctx_st *ctx, SSL_SESSION *sess);&#10;    SSL_SESSION *(*get_session_cb) (struct ssl_st *ssl,&#10;                                    unsigned char *data, int len, int *copy);&#10;    struct {&#10;        int sess_connect;&#10;        int sess_connect_renegotiate;&#10;        int sess_connect_good;&#10;        int sess_accept;&#10;        int sess_accept_renegotiate;&#10;        int sess_accept_good;&#10;        int sess_miss;&#10;        int sess_timeout;&#10;        int sess_cache_full;&#10;        int sess_hit;&#10;        int sess_cb_hit;&#10;&#10;&#10;&#10;&#10;    } stats;&#10;&#10;    int references;&#10;&#10;&#10;    int (*app_verify_callback) (X509_STORE_CTX *, void *);&#10;    void *app_verify_arg;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    pem_password_cb *default_passwd_callback;&#10;&#10;&#10;    void *default_passwd_callback_userdata;&#10;&#10;&#10;    int (*client_cert_cb) (SSL *ssl, X509 **x509, EVP_PKEY **pkey);&#10;&#10;&#10;    int (*app_gen_cookie_cb) (SSL *ssl, unsigned char *cookie,&#10;                              unsigned int *cookie_len);&#10;&#10;&#10;    int (*app_verify_cookie_cb) (SSL *ssl, unsigned char *cookie,&#10;                                 unsigned int cookie_len);&#10;&#10;    CRYPTO_EX_DATA ex_data;&#10;&#10;    const EVP_MD *rsa_md5;&#10;    const EVP_MD *md5;&#10;    const EVP_MD *sha1;&#10;&#10;    &#10;# 1015 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct stack_st_X509 &#10;# 1015 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                  *extra_certs;&#10;    &#10;# 1016 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct stack_st_SSL_COMP &#10;# 1016 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                      *comp_methods;&#10;&#10;&#10;&#10;&#10;    void (*info_callback) (const SSL *ssl, int type, int val);&#10;&#10;&#10;    &#10;# 1024 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct stack_st_X509_NAME &#10;# 1024 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                       *client_CA;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    unsigned long options;&#10;    unsigned long mode;&#10;    long max_cert_list;&#10;&#10;    struct cert_st *cert;&#10;    int read_ahead;&#10;&#10;&#10;    void (*msg_callback) (int write_p, int version, int content_type,&#10;                          const void *buf, size_t len, SSL *ssl, void *arg);&#10;    void *msg_callback_arg;&#10;&#10;    int verify_mode;&#10;    unsigned int sid_ctx_length;&#10;    unsigned char sid_ctx[32];&#10;&#10;    int (*default_verify_callback) (int ok, X509_STORE_CTX *ctx);&#10;&#10;&#10;    GEN_SESSION_CB generate_session_id;&#10;&#10;    X509_VERIFY_PARAM *param;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    int quiet_shutdown;&#10;&#10;&#10;&#10;&#10;&#10;    unsigned int max_send_fragment;&#10;&#10;&#10;&#10;&#10;&#10;    ENGINE *client_cert_engine;&#10;&#10;&#10;&#10;&#10;    int (*tlsext_servername_callback) (SSL *, int *, void *);&#10;    void *tlsext_servername_arg;&#10;&#10;    unsigned char tlsext_tick_key_name[16];&#10;    unsigned char tlsext_tick_hmac_key[16];&#10;    unsigned char tlsext_tick_aes_key[16];&#10;&#10;    int (*tlsext_ticket_key_cb) (SSL *ssl,&#10;                                 unsigned char *name, unsigned char *iv,&#10;                                 EVP_CIPHER_CTX *ectx,&#10;                                 HMAC_CTX *hctx, int enc);&#10;&#10;&#10;&#10;    int (*tlsext_status_cb) (SSL *ssl, void *arg);&#10;    void *tlsext_status_arg;&#10;&#10;&#10;    int (*tlsext_opaque_prf_input_callback) (SSL *, void *peerinput,&#10;                                             size_t len, void *arg);&#10;    void *tlsext_opaque_prf_input_callback_arg;&#10;&#10;&#10;&#10;    char *psk_identity_hint;&#10;    unsigned int (*psk_client_callback) (SSL *ssl, const char *hint,&#10;                                         char *identity,&#10;                                         unsigned int max_identity_len,&#10;                                         unsigned char *psk,&#10;                                         unsigned int max_psk_len);&#10;    unsigned int (*psk_server_callback) (SSL *ssl, const char *identity,&#10;                                         unsigned char *psk,&#10;                                         unsigned int max_psk_len);&#10;&#10;&#10;&#10;&#10;    unsigned int freelist_max_len;&#10;    struct ssl3_buf_freelist_st *wbuf_freelist;&#10;    struct ssl3_buf_freelist_st *rbuf_freelist;&#10;&#10;&#10;    SRP_CTX srp_ctx;&#10;# 1131 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;    int (*next_protos_advertised_cb) (SSL *s, const unsigned char **buf,&#10;                                      unsigned int *len, void *arg);&#10;    void *next_protos_advertised_cb_arg;&#10;&#10;&#10;&#10;&#10;    int (*next_proto_select_cb) (SSL *s, unsigned char **out,&#10;                                 unsigned char *outlen,&#10;                                 const unsigned char *in,&#10;                                 unsigned int inlen, void *arg);&#10;    void *next_proto_select_cb_arg;&#10;&#10;&#10;    &#10;# 1145 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct stack_st_SRTP_PROTECTION_PROFILE &#10;# 1145 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                     *srtp_profiles;&#10;# 1162 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;    int (*alpn_select_cb) (SSL *s,&#10;                           const unsigned char **out,&#10;                           unsigned char *outlen,&#10;                           const unsigned char *in,&#10;                           unsigned int inlen, void *arg);&#10;    void *alpn_select_cb_arg;&#10;&#10;&#10;&#10;&#10;&#10;    unsigned char *alpn_client_proto_list;&#10;    unsigned alpn_client_proto_list_len;&#10;&#10;&#10;&#10;    size_t tlsext_ecpointformatlist_length;&#10;    unsigned char *tlsext_ecpointformatlist;&#10;    size_t tlsext_ellipticcurvelist_length;&#10;    unsigned char *tlsext_ellipticcurvelist;&#10;&#10;&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="struct ssl_st" id="ssl" text="struct ssl_st *ssl" mod=""/>
    <arg type="SSL_SESSION" id="sess" text="SSL_SESSION *sess" mod=""/>
    <arg type="struct ssl_ctx_st" id="ctx" text="struct ssl_ctx_st *ctx" mod=""/>
    <arg type="SSL_SESSION" id="sess" text="SSL_SESSION *sess" mod=""/>
    <arg type="struct ssl_st" id="ssl" text="struct ssl_st *ssl" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="copy" text="int *copy" mod=""/>
    <arg type="X509_STORE_CTX" id="ANON12" text="X509_STORE_CTX *" mod=""/>
    <arg type="void" id="ANON13" text="void *" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="X509" id="x509" text="X509 **x509" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY **pkey" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="unsigned char" id="cookie" text="unsigned char *cookie" mod=""/>
    <arg type="unsigned int" id="cookie_len" text="unsigned int *cookie_len" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="unsigned char" id="cookie" text="unsigned char *cookie" mod=""/>
    <arg type="unsigned int" id="cookie_len" text="unsigned int cookie_len" mod=""/>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="int" id="val" text="int val" mod=""/>
    <arg type="int" id="write_p" text="int write_p" mod=""/>
    <arg type="int" id="version" text="int version" mod=""/>
    <arg type="int" id="content_type" text="int content_type" mod=""/>
    <arg type="const void" id="buf" text="const void *buf" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
    <arg type="int" id="ok" text="int ok" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="SSL" id="ANON14" text="SSL *" mod=""/>
    <arg type="int" id="ANON15" text="int *" mod=""/>
    <arg type="void" id="ANON16" text="void *" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="unsigned char" id="name" text="unsigned char *name" mod=""/>
    <arg type="unsigned char" id="iv" text="unsigned char *iv" mod=""/>
    <arg type="EVP_CIPHER_CTX" id="ectx" text="EVP_CIPHER_CTX *ectx" mod=""/>
    <arg type="HMAC_CTX" id="hctx" text="HMAC_CTX *hctx" mod=""/>
    <arg type="int" id="enc" text="int enc" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
    <arg type="SSL" id="ANON17" text="SSL *" mod=""/>
    <arg type="void" id="peerinput" text="void *peerinput" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const char" id="hint" text="const char *hint" mod=""/>
    <arg type="char" id="identity" text="char *identity" mod=""/>
    <arg type="unsigned int" id="max_identity_len" text="unsigned int max_identity_len" mod=""/>
    <arg type="unsigned char" id="psk" text="unsigned char *psk" mod=""/>
    <arg type="unsigned int" id="max_psk_len" text="unsigned int max_psk_len" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const char" id="identity" text="const char *identity" mod=""/>
    <arg type="unsigned char" id="psk" text="unsigned char *psk" mod=""/>
    <arg type="unsigned int" id="max_psk_len" text="unsigned int max_psk_len" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="const unsigned char" id="buf" text="const unsigned char **buf" mod=""/>
    <arg type="unsigned int" id="len" text="unsigned int *len" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
    <arg type="unsigned char" id="outlen" text="unsigned char *outlen" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned int" id="inlen" text="unsigned int inlen" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="const unsigned char" id="out" text="const unsigned char **out" mod=""/>
    <arg type="unsigned char" id="outlen" text="unsigned char *outlen" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned int" id="inlen" text="unsigned int inlen" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="struct lhash_st_SSL_SESSION" id="SSL_CTX_sessions" text="struct lhash_st_SSL_SESSION &#10;# 1199 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                     *SSL_CTX_sessions(SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_sess_set_new_cb" text="void SSL_CTX_sess_set_new_cb(SSL_CTX *ctx,&#10;                             int (*new_session_cb) (struct ssl_st *ssl,&#10;                                                    SSL_SESSION *sess))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="new_session_cb" text="int (*new_session_cb) (struct ssl_st *ssl,&#10;                                                    SSL_SESSION *sess)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_sess_get_new_cb" text="int (*SSL_CTX_sess_get_new_cb(SSL_CTX *ctx)) (struct ssl_st *ssl,&#10;                                              SSL_SESSION *sess)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="struct ssl_st" id="ssl" text="struct ssl_st *ssl" mod=""/>
    <arg type="SSL_SESSION" id="sess" text="SSL_SESSION *sess" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_sess_set_remove_cb" text="void SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx,&#10;                                void (*remove_session_cb) (struct ssl_ctx_st&#10;                                                           *ctx,&#10;                                                           SSL_SESSION&#10;                                                           *sess))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="void" id="remove_session_cb" text="void (*remove_session_cb) (struct ssl_ctx_st&#10;                                                           *ctx,&#10;                                                           SSL_SESSION&#10;                                                           *sess)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_sess_get_remove_cb" text="void (*SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx)) (struct ssl_ctx_st *ctx,&#10;                                                  SSL_SESSION *sess)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="struct ssl_ctx_st" id="ctx" text="struct ssl_ctx_st *ctx" mod=""/>
    <arg type="SSL_SESSION" id="sess" text="SSL_SESSION *sess" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_sess_set_get_cb" text="void SSL_CTX_sess_set_get_cb(SSL_CTX *ctx,&#10;                             SSL_SESSION *(*get_session_cb) (struct ssl_st&#10;                                                             *ssl,&#10;                                                             unsigned char&#10;                                                             *data, int len,&#10;                                                             int *copy))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="SSL_SESSION" id="get_session_cb" text="SSL_SESSION *(*get_session_cb) (struct ssl_st&#10;                                                             *ssl,&#10;                                                             unsigned char&#10;                                                             *data, int len,&#10;                                                             int *copy)" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL_SESSION" id="SSL_CTX_sess_get_get_cb" text="SSL_SESSION *(*SSL_CTX_sess_get_get_cb(SSL_CTX *ctx)) (struct ssl_st *ssl,&#10;                                                       unsigned char *Data,&#10;                                                       int len, int *copy)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="struct ssl_st" id="ssl" text="struct ssl_st *ssl" mod=""/>
    <arg type="unsigned char" id="Data" text="unsigned char *Data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="int" id="copy" text="int *copy" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_info_callback" text="void SSL_CTX_set_info_callback(SSL_CTX *ctx,&#10;                               void (*cb) (const SSL *ssl, int type,&#10;                                           int val))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="void" id="cb" text="void (*cb) (const SSL *ssl, int type,&#10;                                           int val)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_get_info_callback" text="void (*SSL_CTX_get_info_callback(SSL_CTX *ctx)) (const SSL *ssl, int type,&#10;                                                 int val)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="int" id="val" text="int val" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_client_cert_cb" text="void SSL_CTX_set_client_cert_cb(SSL_CTX *ctx,&#10;                                int (*client_cert_cb) (SSL *ssl, X509 **x509,&#10;                                                       EVP_PKEY **pkey))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="client_cert_cb" text="int (*client_cert_cb) (SSL *ssl, X509 **x509,&#10;                                                       EVP_PKEY **pkey)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_get_client_cert_cb" text="int (*SSL_CTX_get_client_cert_cb(SSL_CTX *ctx)) (SSL *ssl, X509 **x509,&#10;                                                 EVP_PKEY **pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="X509" id="x509" text="X509 **x509" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY **pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_client_cert_engine" text="int SSL_CTX_set_client_cert_engine(SSL_CTX *ctx, ENGINE *e)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="ENGINE" id="e" text="ENGINE *e" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_cookie_generate_cb" text="void SSL_CTX_set_cookie_generate_cb(SSL_CTX *ctx,&#10;                                    int (*app_gen_cookie_cb) (SSL *ssl,&#10;                                                              unsigned char&#10;                                                              *cookie,&#10;                                                              unsigned int&#10;                                                              *cookie_len))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="app_gen_cookie_cb" text="int (*app_gen_cookie_cb) (SSL *ssl,&#10;                                                              unsigned char&#10;                                                              *cookie,&#10;                                                              unsigned int&#10;                                                              *cookie_len)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_cookie_verify_cb" text="void SSL_CTX_set_cookie_verify_cb(SSL_CTX *ctx,&#10;                                  int (*app_verify_cookie_cb) (SSL *ssl,&#10;                                                               unsigned char&#10;                                                               *cookie,&#10;                                                               unsigned int&#10;                                                               cookie_len))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="app_verify_cookie_cb" text="int (*app_verify_cookie_cb) (SSL *ssl,&#10;                                                               unsigned char&#10;                                                               *cookie,&#10;                                                               unsigned int&#10;                                                               cookie_len)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_next_protos_advertised_cb" text="void SSL_CTX_set_next_protos_advertised_cb(SSL_CTX *s,&#10;                                           int (*cb) (SSL *ssl,&#10;                                                      const unsigned char&#10;                                                      **out,&#10;                                                      unsigned int *outlen,&#10;                                                      void *arg), void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="s" text="SSL_CTX *s" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (SSL *ssl,&#10;                                                      const unsigned char&#10;                                                      **out,&#10;                                                      unsigned int *outlen,&#10;                                                      void *arg)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_next_proto_select_cb" text="void SSL_CTX_set_next_proto_select_cb(SSL_CTX *s,&#10;                                      int (*cb) (SSL *ssl,&#10;                                                 unsigned char **out,&#10;                                                 unsigned char *outlen,&#10;                                                 const unsigned char *in,&#10;                                                 unsigned int inlen,&#10;                                                 void *arg), void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="s" text="SSL_CTX *s" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (SSL *ssl,&#10;                                                 unsigned char **out,&#10;                                                 unsigned char *outlen,&#10;                                                 const unsigned char *in,&#10;                                                 unsigned int inlen,&#10;                                                 void *arg)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_get0_next_proto_negotiated" text="void SSL_get0_next_proto_negotiated(const SSL *s, const unsigned char **data,&#10;                                    unsigned *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char **data" mod=""/>
    <arg type="unsigned" id="len" text="unsigned *len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_select_next_proto" text="int SSL_select_next_proto(unsigned char **out, unsigned char *outlen,&#10;                          const unsigned char *in, unsigned int inlen,&#10;                          const unsigned char *client,&#10;                          unsigned int client_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="unsigned char" id="out" text="unsigned char **out" mod=""/>
    <arg type="unsigned char" id="outlen" text="unsigned char *outlen" mod=""/>
    <arg type="const unsigned char" id="in" text="const unsigned char *in" mod=""/>
    <arg type="unsigned int" id="inlen" text="unsigned int inlen" mod=""/>
    <arg type="const unsigned char" id="client" text="const unsigned char *client" mod=""/>
    <arg type="unsigned int" id="client_len" text="unsigned int client_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_alpn_protos" text="int SSL_CTX_set_alpn_protos(SSL_CTX *ctx, const unsigned char *protos,&#10;                            unsigned protos_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const unsigned char" id="protos" text="const unsigned char *protos" mod=""/>
    <arg type="unsigned" id="protos_len" text="unsigned protos_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_alpn_protos" text="int SSL_set_alpn_protos(SSL *ssl, const unsigned char *protos,&#10;                        unsigned protos_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const unsigned char" id="protos" text="const unsigned char *protos" mod=""/>
    <arg type="unsigned" id="protos_len" text="unsigned protos_len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_alpn_select_cb" text="void SSL_CTX_set_alpn_select_cb(SSL_CTX *ctx,&#10;                                int (*cb) (SSL *ssl,&#10;                                           const unsigned char **out,&#10;                                           unsigned char *outlen,&#10;                                           const unsigned char *in,&#10;                                           unsigned int inlen,&#10;                                           void *arg), void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (SSL *ssl,&#10;                                           const unsigned char **out,&#10;                                           unsigned char *outlen,&#10;                                           const unsigned char *in,&#10;                                           unsigned int inlen,&#10;                                           void *arg)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_get0_alpn_selected" text="void SSL_get0_alpn_selected(const SSL *ssl, const unsigned char **data,&#10;                            unsigned *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
    <arg type="const unsigned char" id="data" text="const unsigned char **data" mod=""/>
    <arg type="unsigned" id="len" text="unsigned *len" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_psk_client_callback" text="void SSL_CTX_set_psk_client_callback(SSL_CTX *ctx,&#10;                                     unsigned int (*psk_client_callback) (SSL&#10;                                                                          *ssl,&#10;                                                                          const&#10;                                                                          char&#10;                                                                          *hint,&#10;                                                                          char&#10;                                                                          *identity,&#10;                                                                          unsigned&#10;                                                                          int&#10;                                                                          max_identity_len,&#10;                                                                          unsigned&#10;                                                                          char&#10;                                                                          *psk,&#10;                                                                          unsigned&#10;                                                                          int&#10;                                                                          max_psk_len))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="unsigned int" id="psk_client_callback" text="unsigned int (*psk_client_callback) (SSL&#10;                                                                          *ssl,&#10;                                                                          const&#10;                                                                          char&#10;                                                                          *hint,&#10;                                                                          char&#10;                                                                          *identity,&#10;                                                                          unsigned&#10;                                                                          int&#10;                                                                          max_identity_len,&#10;                                                                          unsigned&#10;                                                                          char&#10;                                                                          *psk,&#10;                                                                          unsigned&#10;                                                                          int&#10;                                                                          max_psk_len)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_psk_client_callback" text="void SSL_set_psk_client_callback(SSL *ssl,&#10;                                 unsigned int (*psk_client_callback) (SSL&#10;                                                                      *ssl,&#10;                                                                      const&#10;                                                                      char&#10;                                                                      *hint,&#10;                                                                      char&#10;                                                                      *identity,&#10;                                                                      unsigned&#10;                                                                      int&#10;                                                                      max_identity_len,&#10;                                                                      unsigned&#10;                                                                      char&#10;                                                                      *psk,&#10;                                                                      unsigned&#10;                                                                      int&#10;                                                                      max_psk_len))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="unsigned int" id="psk_client_callback" text="unsigned int (*psk_client_callback) (SSL&#10;                                                                      *ssl,&#10;                                                                      const&#10;                                                                      char&#10;                                                                      *hint,&#10;                                                                      char&#10;                                                                      *identity,&#10;                                                                      unsigned&#10;                                                                      int&#10;                                                                      max_identity_len,&#10;                                                                      unsigned&#10;                                                                      char&#10;                                                                      *psk,&#10;                                                                      unsigned&#10;                                                                      int&#10;                                                                      max_psk_len)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_psk_server_callback" text="void SSL_CTX_set_psk_server_callback(SSL_CTX *ctx,&#10;                                     unsigned int (*psk_server_callback) (SSL&#10;                                                                          *ssl,&#10;                                                                          const&#10;                                                                          char&#10;                                                                          *identity,&#10;                                                                          unsigned&#10;                                                                          char&#10;                                                                          *psk,&#10;                                                                          unsigned&#10;                                                                          int&#10;                                                                          max_psk_len))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="unsigned int" id="psk_server_callback" text="unsigned int (*psk_server_callback) (SSL&#10;                                                                          *ssl,&#10;                                                                          const&#10;                                                                          char&#10;                                                                          *identity,&#10;                                                                          unsigned&#10;                                                                          char&#10;                                                                          *psk,&#10;                                                                          unsigned&#10;                                                                          int&#10;                                                                          max_psk_len)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_psk_server_callback" text="void SSL_set_psk_server_callback(SSL *ssl,&#10;                                 unsigned int (*psk_server_callback) (SSL&#10;                                                                      *ssl,&#10;                                                                      const&#10;                                                                      char&#10;                                                                      *identity,&#10;                                                                      unsigned&#10;                                                                      char&#10;                                                                      *psk,&#10;                                                                      unsigned&#10;                                                                      int&#10;                                                                      max_psk_len))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="unsigned int" id="psk_server_callback" text="unsigned int (*psk_server_callback) (SSL&#10;                                                                      *ssl,&#10;                                                                      const&#10;                                                                      char&#10;                                                                      *identity,&#10;                                                                      unsigned&#10;                                                                      char&#10;                                                                      *psk,&#10;                                                                      unsigned&#10;                                                                      int&#10;                                                                      max_psk_len)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_psk_identity_hint" text="int SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *identity_hint)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const char" id="identity_hint" text="const char *identity_hint" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_use_psk_identity_hint" text="int SSL_use_psk_identity_hint(SSL *s, const char *identity_hint)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="const char" id="identity_hint" text="const char *identity_hint" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_get_psk_identity_hint" text="const char *SSL_get_psk_identity_hint(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_get_psk_identity" text="const char *SSL_get_psk_identity(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_add_client_custom_ext" text="int SSL_CTX_add_client_custom_ext(SSL_CTX *ctx, unsigned int ext_type,&#10;                                  custom_ext_add_cb add_cb,&#10;                                  custom_ext_free_cb free_cb,&#10;                                  void *add_arg,&#10;                                  custom_ext_parse_cb parse_cb,&#10;                                  void *parse_arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="unsigned int" id="ext_type" text="unsigned int ext_type" mod=""/>
    <arg type="custom_ext_add_cb" id="add_cb" text="custom_ext_add_cb add_cb" mod=""/>
    <arg type="custom_ext_free_cb" id="free_cb" text="custom_ext_free_cb free_cb" mod=""/>
    <arg type="void" id="add_arg" text="void *add_arg" mod=""/>
    <arg type="custom_ext_parse_cb" id="parse_cb" text="custom_ext_parse_cb parse_cb" mod=""/>
    <arg type="void" id="parse_arg" text="void *parse_arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_add_server_custom_ext" text="int SSL_CTX_add_server_custom_ext(SSL_CTX *ctx, unsigned int ext_type,&#10;                                  custom_ext_add_cb add_cb,&#10;                                  custom_ext_free_cb free_cb,&#10;                                  void *add_arg,&#10;                                  custom_ext_parse_cb parse_cb,&#10;                                  void *parse_arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="unsigned int" id="ext_type" text="unsigned int ext_type" mod=""/>
    <arg type="custom_ext_add_cb" id="add_cb" text="custom_ext_add_cb add_cb" mod=""/>
    <arg type="custom_ext_free_cb" id="free_cb" text="custom_ext_free_cb free_cb" mod=""/>
    <arg type="void" id="add_arg" text="void *add_arg" mod=""/>
    <arg type="custom_ext_parse_cb" id="parse_cb" text="custom_ext_parse_cb parse_cb" mod=""/>
    <arg type="void" id="parse_arg" text="void *parse_arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_extension_supported" text="int SSL_extension_supported(unsigned int ext_type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="unsigned int" id="ext_type" text="unsigned int ext_type" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL" id="ANON18" text="struct ssl_st {&#10;&#10;&#10;&#10;&#10;    int version;&#10;&#10;    int type;&#10;&#10;    const SSL_METHOD *method;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    BIO *rbio;&#10;&#10;    BIO *wbio;&#10;&#10;    BIO *bbio;&#10;# 1455 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;    int rwstate;&#10;&#10;    int in_handshake;&#10;    int (*handshake_func) (SSL *);&#10;# 1467 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;    int server;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    int new_session;&#10;&#10;    int quiet_shutdown;&#10;&#10;    int shutdown;&#10;&#10;    int state;&#10;&#10;    int rstate;&#10;    BUF_MEM *init_buf;&#10;    void *init_msg;&#10;&#10;    int init_num;&#10;    int init_off;&#10;&#10;    unsigned char *packet;&#10;    unsigned int packet_length;&#10;    struct ssl2_state_st *s2;&#10;    struct ssl3_state_st *s3;&#10;    struct dtls1_state_st *d1;&#10;    int read_ahead;&#10;&#10;&#10;    void (*msg_callback) (int write_p, int version, int content_type,&#10;                          const void *buf, size_t len, SSL *ssl, void *arg);&#10;    void *msg_callback_arg;&#10;    int hit;&#10;    X509_VERIFY_PARAM *param;&#10;&#10;&#10;&#10;&#10;&#10;    &#10;# 1507 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct stack_st_SSL_CIPHER &#10;# 1507 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                        *cipher_list;&#10;    &#10;# 1508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct stack_st_SSL_CIPHER &#10;# 1508 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                        *cipher_list_by_id;&#10;&#10;&#10;&#10;&#10;    int mac_flags;&#10;    EVP_CIPHER_CTX *enc_read_ctx;&#10;    EVP_MD_CTX *read_hash;&#10;&#10;    COMP_CTX *expand;&#10;&#10;&#10;&#10;    EVP_CIPHER_CTX *enc_write_ctx;&#10;    EVP_MD_CTX *write_hash;&#10;&#10;    COMP_CTX *compress;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    struct cert_st *cert;&#10;&#10;&#10;&#10;&#10;    unsigned int sid_ctx_length;&#10;    unsigned char sid_ctx[32];&#10;&#10;    SSL_SESSION *session;&#10;&#10;    GEN_SESSION_CB generate_session_id;&#10;&#10;&#10;&#10;&#10;&#10;    int verify_mode;&#10;&#10;    int (*verify_callback) (int ok, X509_STORE_CTX *ctx);&#10;&#10;    void (*info_callback) (const SSL *ssl, int type, int val);&#10;&#10;    int error;&#10;&#10;    int error_code;&#10;&#10;&#10;&#10;&#10;&#10;    unsigned int (*psk_client_callback) (SSL *ssl, const char *hint,&#10;                                         char *identity,&#10;                                         unsigned int max_identity_len,&#10;                                         unsigned char *psk,&#10;                                         unsigned int max_psk_len);&#10;    unsigned int (*psk_server_callback) (SSL *ssl, const char *identity,&#10;                                         unsigned char *psk,&#10;                                         unsigned int max_psk_len);&#10;&#10;    SSL_CTX *ctx;&#10;&#10;&#10;&#10;&#10;    int debug;&#10;&#10;    long verify_result;&#10;    CRYPTO_EX_DATA ex_data;&#10;&#10;    &#10;# 1580 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct stack_st_X509_NAME &#10;# 1580 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                       *client_CA;&#10;    int references;&#10;&#10;    unsigned long options;&#10;&#10;    unsigned long mode;&#10;    long max_cert_list;&#10;    int first_packet;&#10;&#10;    int client_version;&#10;    unsigned int max_send_fragment;&#10;&#10;&#10;    void (*tlsext_debug_cb) (SSL *s, int client_server, int type,&#10;                             unsigned char *data, int len, void *arg);&#10;    void *tlsext_debug_arg;&#10;    char *tlsext_hostname;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    int servername_done;&#10;&#10;&#10;    int tlsext_status_type;&#10;&#10;    int tlsext_status_expected;&#10;&#10;    &#10;# 1610 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct stack_st_OCSP_RESPID &#10;# 1610 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                         *tlsext_ocsp_ids;&#10;    X509_EXTENSIONS *tlsext_ocsp_exts;&#10;&#10;    unsigned char *tlsext_ocsp_resp;&#10;    int tlsext_ocsp_resplen;&#10;&#10;    int tlsext_ticket_expected;&#10;&#10;    size_t tlsext_ecpointformatlist_length;&#10;&#10;    unsigned char *tlsext_ecpointformatlist;&#10;    size_t tlsext_ellipticcurvelist_length;&#10;&#10;    unsigned char *tlsext_ellipticcurvelist;&#10;&#10;&#10;&#10;&#10;&#10;    void *tlsext_opaque_prf_input;&#10;    size_t tlsext_opaque_prf_input_len;&#10;&#10;    TLS_SESSION_TICKET_EXT *tlsext_session_ticket;&#10;&#10;    tls_session_ticket_ext_cb_fn tls_session_ticket_ext_cb;&#10;    void *tls_session_ticket_ext_cb_arg;&#10;&#10;    tls_session_secret_cb_fn tls_session_secret_cb;&#10;    void *tls_session_secret_cb_arg;&#10;    SSL_CTX *initial_ctx;&#10;# 1648 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;    unsigned char *next_proto_negotiated;&#10;    unsigned char next_proto_negotiated_len;&#10;&#10;&#10;&#10;    &#10;# 1653 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;   struct stack_st_SRTP_PROTECTION_PROFILE &#10;# 1653 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                     *srtp_profiles;&#10;&#10;    SRTP_PROTECTION_PROFILE *srtp_profile;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    unsigned int tlsext_heartbeat;&#10;&#10;    unsigned int tlsext_hb_pending;&#10;&#10;    unsigned int tlsext_hb_seq;&#10;# 1675 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;    int renegotiate;&#10;&#10;&#10;    SRP_CTX srp_ctx;&#10;&#10;&#10;&#10;&#10;&#10;&#10;    unsigned char *alpn_client_proto_list;&#10;    unsigned alpn_client_proto_list_len;&#10;&#10;}" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ANON19" text="SSL *" mod=""/>
    <arg type="int" id="write_p" text="int write_p" mod=""/>
    <arg type="int" id="version" text="int version" mod=""/>
    <arg type="int" id="content_type" text="int content_type" mod=""/>
    <arg type="const void" id="buf" text="const void *buf" mod=""/>
    <arg type="size_t" id="len" text="size_t len" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
    <arg type="int" id="ok" text="int ok" mod=""/>
    <arg type="X509_STORE_CTX" id="ctx" text="X509_STORE_CTX *ctx" mod=""/>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="int" id="val" text="int val" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const char" id="hint" text="const char *hint" mod=""/>
    <arg type="char" id="identity" text="char *identity" mod=""/>
    <arg type="unsigned int" id="max_identity_len" text="unsigned int max_identity_len" mod=""/>
    <arg type="unsigned char" id="psk" text="unsigned char *psk" mod=""/>
    <arg type="unsigned int" id="max_psk_len" text="unsigned int max_psk_len" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const char" id="identity" text="const char *identity" mod=""/>
    <arg type="unsigned char" id="psk" text="unsigned char *psk" mod=""/>
    <arg type="unsigned int" id="max_psk_len" text="unsigned int max_psk_len" mod=""/>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="client_server" text="int client_server" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="unsigned char" id="data" text="unsigned char *data" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="SSL_get_finished" text="size_t SSL_get_finished(const SSL *s, void *buf, size_t count)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
    <arg type="void" id="buf" text="void *buf" mod=""/>
    <arg type="size_t" id="count" text="size_t count" mod=""/>
  </args>
</fdecl>
<fdecl type="size_t" id="SSL_get_peer_finished" text="size_t SSL_get_peer_finished(const SSL *s, void *buf, size_t count)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
    <arg type="void" id="buf" text="void *buf" mod=""/>
    <arg type="size_t" id="count" text="size_t count" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL_SESSION" id="PEM_read_bio_SSL_SESSION" text="SSL_SESSION &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;*PEM_read_bio_SSL_SESSION(BIO *bp, &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;SSL_SESSION &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;**x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="SSL_SESSION" id="x" text="SSL_SESSION &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;**x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL_SESSION" id="PEM_read_SSL_SESSION" text="SSL_SESSION &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;*PEM_read_SSL_SESSION(FILE *fp, &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;SSL_SESSION &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;**x, pem_password_cb *cb, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="SSL_SESSION" id="x" text="SSL_SESSION &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;**x" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_bio_SSL_SESSION" text="int PEM_write_bio_SSL_SESSION(BIO *bp, &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;SSL_SESSION &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;*x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="BIO" id="bp" text="BIO *bp" mod=""/>
    <arg type="SSL_SESSION" id="x" text="SSL_SESSION &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;*x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="PEM_write_SSL_SESSION" text="int PEM_write_SSL_SESSION(FILE *fp, &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;SSL_SESSION &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;*x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="SSL_SESSION" id="x" text="SSL_SESSION &#10;# 1808 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;*x" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO_METHOD" id="BIO_f_ssl" text="BIO_METHOD *BIO_f_ssl(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON20" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_ssl" text="BIO *BIO_new_ssl(SSL_CTX *ctx, int client)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="client" text="int client" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_ssl_connect" text="BIO *BIO_new_ssl_connect(SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="BIO_new_buffer_ssl_connect" text="BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="BIO_ssl_copy_session_id" text="int BIO_ssl_copy_session_id(BIO *to, BIO *from)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="BIO" id="to" text="BIO *to" mod=""/>
    <arg type="BIO" id="from" text="BIO *from" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="BIO_ssl_shutdown" text="void BIO_ssl_shutdown(BIO *ssl_bio)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="BIO" id="ssl_bio" text="BIO *ssl_bio" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_cipher_list" text="int SSL_CTX_set_cipher_list(SSL_CTX *, const char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ANON21" text="SSL_CTX *" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL_CTX" id="SSL_CTX_new" text="SSL_CTX *SSL_CTX_new(const SSL_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_METHOD" id="meth" text="const SSL_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_free" text="void SSL_CTX_free(SSL_CTX *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ANON22" text="SSL_CTX *" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_CTX_set_timeout" text="long SSL_CTX_set_timeout(SSL_CTX *ctx, long t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="long" id="t" text="long t" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_CTX_get_timeout" text="long SSL_CTX_get_timeout(const SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CTX" id="ctx" text="const SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_STORE" id="SSL_CTX_get_cert_store" text="X509_STORE *SSL_CTX_get_cert_store(const SSL_CTX *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CTX" id="ANON23" text="const SSL_CTX *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_cert_store" text="void SSL_CTX_set_cert_store(SSL_CTX *, X509_STORE *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ANON24" text="SSL_CTX *" mod=""/>
    <arg type="X509_STORE" id="ANON25" text="X509_STORE *" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_want" text="int SSL_want(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_clear" text="int SSL_clear(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_flush_sessions" text="void SSL_CTX_flush_sessions(SSL_CTX *ctx, long tm)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="long" id="tm" text="long tm" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_CIPHER" id="SSL_get_current_cipher" text="const SSL_CIPHER *SSL_get_current_cipher(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CIPHER_get_bits" text="int SSL_CIPHER_get_bits(const SSL_CIPHER *c, int *alg_bits)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CIPHER" id="c" text="const SSL_CIPHER *c" mod=""/>
    <arg type="int" id="alg_bits" text="int *alg_bits" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="SSL_CIPHER_get_version" text="char *SSL_CIPHER_get_version(const SSL_CIPHER *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CIPHER" id="c" text="const SSL_CIPHER *c" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_CIPHER_get_name" text="const char *SSL_CIPHER_get_name(const SSL_CIPHER *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CIPHER" id="c" text="const SSL_CIPHER *c" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned long" id="SSL_CIPHER_get_id" text="unsigned long SSL_CIPHER_get_id(const SSL_CIPHER *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CIPHER" id="c" text="const SSL_CIPHER *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_fd" text="int SSL_get_fd(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_rfd" text="int SSL_get_rfd(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_wfd" text="int SSL_get_wfd(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_get_cipher_list" text="const char *SSL_get_cipher_list(const SSL *s, int n)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
    <arg type="int" id="n" text="int n" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="SSL_get_shared_ciphers" text="char *SSL_get_shared_ciphers(const SSL *s, char *buf, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_read_ahead" text="int SSL_get_read_ahead(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_pending" text="int SSL_pending(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_fd" text="int SSL_set_fd(SSL *s, int fd)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="fd" text="int fd" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_rfd" text="int SSL_set_rfd(SSL *s, int fd)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="fd" text="int fd" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_wfd" text="int SSL_set_wfd(SSL *s, int fd)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="fd" text="int fd" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_bio" text="void SSL_set_bio(SSL *s, BIO *rbio, BIO *wbio)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="BIO" id="rbio" text="BIO *rbio" mod=""/>
    <arg type="BIO" id="wbio" text="BIO *wbio" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="SSL_get_rbio" text="BIO *SSL_get_rbio(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="BIO" id="SSL_get_wbio" text="BIO *SSL_get_wbio(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_cipher_list" text="int SSL_set_cipher_list(SSL *s, const char *str)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="const char" id="str" text="const char *str" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_read_ahead" text="void SSL_set_read_ahead(SSL *s, int yes)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="yes" text="int yes" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_verify_mode" text="int SSL_get_verify_mode(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_verify_depth" text="int SSL_get_verify_depth(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_verify_callback" text="int (*SSL_get_verify_callback(const SSL *s)) (int, X509_STORE_CTX *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
    <arg type="int" id="ANON26" text="int" mod=""/>
    <arg type="X509_STORE_CTX" id="ANON27" text="X509_STORE_CTX *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_verify" text="void SSL_set_verify(SSL *s, int mode,&#10;                    int (*callback) (int ok, X509_STORE_CTX *ctx))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="mode" text="int mode" mod=""/>
    <arg type="int" id="callback" text="int (*callback) (int ok, X509_STORE_CTX *ctx)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_verify_depth" text="void SSL_set_verify_depth(SSL *s, int depth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="depth" text="int depth" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_cert_cb" text="void SSL_set_cert_cb(SSL *s, int (*cb) (SSL *ssl, void *arg), void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (SSL *ssl, void *arg)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_use_RSAPrivateKey" text="int SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_use_RSAPrivateKey_ASN1" text="int SSL_use_RSAPrivateKey_ASN1(SSL *ssl, unsigned char *d, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="unsigned char" id="d" text="unsigned char *d" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_use_PrivateKey" text="int SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_use_PrivateKey_ASN1" text="int SSL_use_PrivateKey_ASN1(int pk, SSL *ssl, const unsigned char *d,&#10;                            long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="int" id="pk" text="int pk" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_use_certificate" text="int SSL_use_certificate(SSL *ssl, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_use_certificate_ASN1" text="int SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_serverinfo" text="int SSL_CTX_use_serverinfo(SSL_CTX *ctx, const unsigned char *serverinfo,&#10;                           size_t serverinfo_length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const unsigned char" id="serverinfo" text="const unsigned char *serverinfo" mod=""/>
    <arg type="size_t" id="serverinfo_length" text="size_t serverinfo_length" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_serverinfo_file" text="int SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_use_RSAPrivateKey_file" text="int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_use_PrivateKey_file" text="int SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_use_certificate_file" text="int SSL_use_certificate_file(SSL *ssl, const char *file, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_RSAPrivateKey_file" text="int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_PrivateKey_file" text="int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_certificate_file" text="int SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_certificate_chain_file" text="int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_NAME" id="SSL_load_client_CA_file" text="struct stack_st_X509_NAME &#10;# 2203 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                   *SSL_load_client_CA_file(const char *file)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const char" id="file" text="const char *file" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_add_file_cert_subjects_to_stack" text="int SSL_add_file_cert_subjects_to_stack(&#10;# 2204 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;                                       struct stack_st_X509_NAME &#10;# 2204 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                           *stackCAs,&#10;                                        const char *file)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="struct stack_st_X509_NAME" id="stackCAs" text="struct stack_st_X509_NAME &#10;# 2204 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                           *stackCAs" mod=""/>
    <arg type="const char" id="file" text="const char *file" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_add_dir_cert_subjects_to_stack" text="int SSL_add_dir_cert_subjects_to_stack(&#10;# 2209 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;                                      struct stack_st_X509_NAME &#10;# 2209 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                          *stackCAs,&#10;                                       const char *dir)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="struct stack_st_X509_NAME" id="stackCAs" text="struct stack_st_X509_NAME &#10;# 2209 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                          *stackCAs" mod=""/>
    <arg type="const char" id="dir" text="const char *dir" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_load_error_strings" text="void SSL_load_error_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON28" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_state_string" text="const char *SSL_state_string(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_rstate_string" text="const char *SSL_rstate_string(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_state_string_long" text="const char *SSL_state_string_long(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_rstate_string_long" text="const char *SSL_rstate_string_long(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_SESSION_get_time" text="long SSL_SESSION_get_time(const SSL_SESSION *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_SESSION" id="s" text="const SSL_SESSION *s" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_SESSION_set_time" text="long SSL_SESSION_set_time(SSL_SESSION *s, long t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_SESSION" id="s" text="SSL_SESSION *s" mod=""/>
    <arg type="long" id="t" text="long t" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_SESSION_get_timeout" text="long SSL_SESSION_get_timeout(const SSL_SESSION *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_SESSION" id="s" text="const SSL_SESSION *s" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_SESSION_set_timeout" text="long SSL_SESSION_set_timeout(SSL_SESSION *s, long t)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_SESSION" id="s" text="SSL_SESSION *s" mod=""/>
    <arg type="long" id="t" text="long t" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_copy_session_id" text="void SSL_copy_session_id(SSL *to, const SSL *from)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="to" text="SSL *to" mod=""/>
    <arg type="const SSL" id="from" text="const SSL *from" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="SSL_SESSION_get0_peer" text="X509 *SSL_SESSION_get0_peer(SSL_SESSION *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_SESSION" id="s" text="SSL_SESSION *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_SESSION_set1_id_context" text="int SSL_SESSION_set1_id_context(SSL_SESSION *s, const unsigned char *sid_ctx,&#10;                                unsigned int sid_ctx_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_SESSION" id="s" text="SSL_SESSION *s" mod=""/>
    <arg type="const unsigned char" id="sid_ctx" text="const unsigned char *sid_ctx" mod=""/>
    <arg type="unsigned int" id="sid_ctx_len" text="unsigned int sid_ctx_len" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL_SESSION" id="SSL_SESSION_new" text="SSL_SESSION *SSL_SESSION_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON29" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const unsigned char" id="SSL_SESSION_get_id" text="const unsigned char *SSL_SESSION_get_id(const SSL_SESSION *s,&#10;                                        unsigned int *len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_SESSION" id="s" text="const SSL_SESSION *s" mod=""/>
    <arg type="unsigned int" id="len" text="unsigned int *len" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned int" id="SSL_SESSION_get_compress_id" text="unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_SESSION" id="s" text="const SSL_SESSION *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_SESSION_print_fp" text="int SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *ses)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="FILE" id="fp" text="FILE *fp" mod=""/>
    <arg type="const SSL_SESSION" id="ses" text="const SSL_SESSION *ses" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_SESSION_print" text="int SSL_SESSION_print(BIO *fp, const SSL_SESSION *ses)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="BIO" id="fp" text="BIO *fp" mod=""/>
    <arg type="const SSL_SESSION" id="ses" text="const SSL_SESSION *ses" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_SESSION_free" text="void SSL_SESSION_free(SSL_SESSION *ses)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_SESSION" id="ses" text="SSL_SESSION *ses" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="i2d_SSL_SESSION" text="int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_SESSION" id="in" text="SSL_SESSION *in" mod=""/>
    <arg type="unsigned char" id="pp" text="unsigned char **pp" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_session" text="int SSL_set_session(SSL *to, SSL_SESSION *session)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="to" text="SSL *to" mod=""/>
    <arg type="SSL_SESSION" id="session" text="SSL_SESSION *session" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_add_session" text="int SSL_CTX_add_session(SSL_CTX *s, SSL_SESSION *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="s" text="SSL_CTX *s" mod=""/>
    <arg type="SSL_SESSION" id="c" text="SSL_SESSION *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_remove_session" text="int SSL_CTX_remove_session(SSL_CTX *, SSL_SESSION *c)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ANON30" text="SSL_CTX *" mod=""/>
    <arg type="SSL_SESSION" id="c" text="SSL_SESSION *c" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_generate_session_id" text="int SSL_CTX_set_generate_session_id(SSL_CTX *, GEN_SESSION_CB)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ANON31" text="SSL_CTX *" mod=""/>
    <arg type="GEN_SESSION_CB" id="ANON32" text="GEN_SESSION_CB" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_generate_session_id" text="int SSL_set_generate_session_id(SSL *, GEN_SESSION_CB)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ANON33" text="SSL *" mod=""/>
    <arg type="GEN_SESSION_CB" id="ANON34" text="GEN_SESSION_CB" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_has_matching_session_id" text="int SSL_has_matching_session_id(const SSL *ssl, const unsigned char *id,&#10;                                unsigned int id_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
    <arg type="const unsigned char" id="id" text="const unsigned char *id" mod=""/>
    <arg type="unsigned int" id="id_len" text="unsigned int id_len" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL_SESSION" id="d2i_SSL_SESSION" text="SSL_SESSION *d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,&#10;                             long length)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_SESSION" id="a" text="SSL_SESSION **a" mod=""/>
    <arg type="const unsigned char" id="pp" text="const unsigned char **pp" mod=""/>
    <arg type="long" id="length" text="long length" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="SSL_get_peer_certificate" text="X509 *SSL_get_peer_certificate(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509" id="SSL_get_peer_cert_chain" text="struct stack_st_X509 &#10;# 2256 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;              *SSL_get_peer_cert_chain(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_get_verify_mode" text="int SSL_CTX_get_verify_mode(const SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CTX" id="ctx" text="const SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_get_verify_depth" text="int SSL_CTX_get_verify_depth(const SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CTX" id="ctx" text="const SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_get_verify_callback" text="int (*SSL_CTX_get_verify_callback(const SSL_CTX *ctx)) (int,&#10;                                                        X509_STORE_CTX *)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CTX" id="ctx" text="const SSL_CTX *ctx" mod=""/>
    <arg type="int" id="ANON35" text="int" mod=""/>
    <arg type="X509_STORE_CTX" id="ANON36" text="X509_STORE_CTX *" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_verify" text="void SSL_CTX_set_verify(SSL_CTX *ctx, int mode,&#10;                        int (*callback) (int, X509_STORE_CTX *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="mode" text="int mode" mod=""/>
    <arg type="int" id="callback" text="int (*callback) (int, X509_STORE_CTX *)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_verify_depth" text="void SSL_CTX_set_verify_depth(SSL_CTX *ctx, int depth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="depth" text="int depth" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_cert_verify_callback" text="void SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx,&#10;                                      int (*cb) (X509_STORE_CTX *, void *),&#10;                                      void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (X509_STORE_CTX *, void *)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_cert_cb" text="void SSL_CTX_set_cert_cb(SSL_CTX *c, int (*cb) (SSL *ssl, void *arg),&#10;                         void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="c" text="SSL_CTX *c" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (SSL *ssl, void *arg)" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_RSAPrivateKey" text="int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="RSA" id="rsa" text="RSA *rsa" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_RSAPrivateKey_ASN1" text="int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned char *d,&#10;                                   long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_PrivateKey" text="int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="EVP_PKEY" id="pkey" text="EVP_PKEY *pkey" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_PrivateKey_ASN1" text="int SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX *ctx,&#10;                                const unsigned char *d, long len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="int" id="pk" text="int pk" mod=""/>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
    <arg type="long" id="len" text="long len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_certificate" text="int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_use_certificate_ASN1" text="int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len,&#10;                                 const unsigned char *d)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="len" text="int len" mod=""/>
    <arg type="const unsigned char" id="d" text="const unsigned char *d" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_default_passwd_cb" text="void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="pem_password_cb" id="cb" text="pem_password_cb *cb" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_default_passwd_cb_userdata" text="void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="void" id="u" text="void *u" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_check_private_key" text="int SSL_CTX_check_private_key(const SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CTX" id="ctx" text="const SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_check_private_key" text="int SSL_check_private_key(const SSL *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ctx" text="const SSL *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_session_id_context" text="int SSL_CTX_set_session_id_context(SSL_CTX *ctx, const unsigned char *sid_ctx,&#10;                                   unsigned int sid_ctx_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const unsigned char" id="sid_ctx" text="const unsigned char *sid_ctx" mod=""/>
    <arg type="unsigned int" id="sid_ctx_len" text="unsigned int sid_ctx_len" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL" id="SSL_new" text="SSL *SSL_new(SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_session_id_context" text="int SSL_set_session_id_context(SSL *ssl, const unsigned char *sid_ctx,&#10;                               unsigned int sid_ctx_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const unsigned char" id="sid_ctx" text="const unsigned char *sid_ctx" mod=""/>
    <arg type="unsigned int" id="sid_ctx_len" text="unsigned int sid_ctx_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_purpose" text="int SSL_CTX_set_purpose(SSL_CTX *s, int purpose)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="s" text="SSL_CTX *s" mod=""/>
    <arg type="int" id="purpose" text="int purpose" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_purpose" text="int SSL_set_purpose(SSL *s, int purpose)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="purpose" text="int purpose" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_trust" text="int SSL_CTX_set_trust(SSL_CTX *s, int trust)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="s" text="SSL_CTX *s" mod=""/>
    <arg type="int" id="trust" text="int trust" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_trust" text="int SSL_set_trust(SSL *s, int trust)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="trust" text="int trust" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set1_param" text="int SSL_CTX_set1_param(SSL_CTX *ctx, X509_VERIFY_PARAM *vpm)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="X509_VERIFY_PARAM" id="vpm" text="X509_VERIFY_PARAM *vpm" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set1_param" text="int SSL_set1_param(SSL *ssl, X509_VERIFY_PARAM *vpm)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="X509_VERIFY_PARAM" id="vpm" text="X509_VERIFY_PARAM *vpm" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_VERIFY_PARAM" id="SSL_CTX_get0_param" text="X509_VERIFY_PARAM *SSL_CTX_get0_param(SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="X509_VERIFY_PARAM" id="SSL_get0_param" text="X509_VERIFY_PARAM *SSL_get0_param(SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_srp_username" text="int SSL_CTX_set_srp_username(SSL_CTX *ctx, char *name)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="char" id="name" text="char *name" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_srp_password" text="int SSL_CTX_set_srp_password(SSL_CTX *ctx, char *password)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="char" id="password" text="char *password" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_srp_strength" text="int SSL_CTX_set_srp_strength(SSL_CTX *ctx, int strength)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="strength" text="int strength" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_srp_client_pwd_callback" text="int SSL_CTX_set_srp_client_pwd_callback(SSL_CTX *ctx,&#10;                                        char *(*cb) (SSL *, void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="char" id="cb" text="char *(*cb) (SSL *, void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_srp_verify_param_callback" text="int SSL_CTX_set_srp_verify_param_callback(SSL_CTX *ctx,&#10;                                          int (*cb) (SSL *, void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (SSL *, void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_srp_username_callback" text="int SSL_CTX_set_srp_username_callback(SSL_CTX *ctx,&#10;                                      int (*cb) (SSL *, int *, void *))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="cb" text="int (*cb) (SSL *, int *, void *)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_srp_cb_arg" text="int SSL_CTX_set_srp_cb_arg(SSL_CTX *ctx, void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_srp_server_param" text="int SSL_set_srp_server_param(SSL *s, const BIGNUM *N, const BIGNUM *g,&#10;                             BIGNUM *sa, BIGNUM *v, char *info)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="const BIGNUM" id="N" text="const BIGNUM *N" mod=""/>
    <arg type="const BIGNUM" id="g" text="const BIGNUM *g" mod=""/>
    <arg type="BIGNUM" id="sa" text="BIGNUM *sa" mod=""/>
    <arg type="BIGNUM" id="v" text="BIGNUM *v" mod=""/>
    <arg type="char" id="info" text="char *info" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_srp_server_param_pw" text="int SSL_set_srp_server_param_pw(SSL *s, const char *user, const char *pass,&#10;                                const char *grp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="const char" id="user" text="const char *user" mod=""/>
    <arg type="const char" id="pass" text="const char *pass" mod=""/>
    <arg type="const char" id="grp" text="const char *grp" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="SSL_get_srp_g" text="BIGNUM *SSL_get_srp_g(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="BIGNUM" id="SSL_get_srp_N" text="BIGNUM *SSL_get_srp_N(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="SSL_get_srp_username" text="char *SSL_get_srp_username(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="SSL_get_srp_userinfo" text="char *SSL_get_srp_userinfo(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_certs_clear" text="void SSL_certs_clear(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_free" text="void SSL_free(SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_accept" text="int SSL_accept(SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_connect" text="int SSL_connect(SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_read" text="int SSL_read(SSL *ssl, void *buf, int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="void" id="buf" text="void *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_peek" text="int SSL_peek(SSL *ssl, void *buf, int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="void" id="buf" text="void *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_write" text="int SSL_write(SSL *ssl, const void *buf, int num)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const void" id="buf" text="const void *buf" mod=""/>
    <arg type="int" id="num" text="int num" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_ctrl" text="long SSL_ctrl(SSL *ssl, int cmd, long larg, void *parg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="larg" text="long larg" mod=""/>
    <arg type="void" id="parg" text="void *parg" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_callback_ctrl" text="long SSL_callback_ctrl(SSL *, int, void (*)(void))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ANON37" text="SSL *" mod=""/>
    <arg type="int" id="ANON38" text="int" mod=""/>
    <arg type="void" id="ANON39" text="void (*)(void)" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_CTX_ctrl" text="long SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="cmd" text="int cmd" mod=""/>
    <arg type="long" id="larg" text="long larg" mod=""/>
    <arg type="void" id="parg" text="void *parg" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_CTX_callback_ctrl" text="long SSL_CTX_callback_ctrl(SSL_CTX *, int, void (*)(void))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ANON40" text="SSL_CTX *" mod=""/>
    <arg type="int" id="ANON41" text="int" mod=""/>
    <arg type="void" id="ANON42" text="void (*)(void)" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_error" text="int SSL_get_error(const SSL *s, int ret_code)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
    <arg type="int" id="ret_code" text="int ret_code" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_get_version" text="const char *SSL_get_version(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_ssl_version" text="int SSL_CTX_set_ssl_version(SSL_CTX *ctx, const SSL_METHOD *meth)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const SSL_METHOD" id="meth" text="const SSL_METHOD *meth" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="SSLv2_method" text="const SSL_METHOD *SSLv2_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON43" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="SSLv2_server_method" text="const SSL_METHOD *SSLv2_server_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON44" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="SSLv2_client_method" text="const SSL_METHOD *SSLv2_client_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON45" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="SSLv23_method" text="const SSL_METHOD *SSLv23_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON46" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="SSLv23_server_method" text="const SSL_METHOD *SSLv23_server_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON47" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="SSLv23_client_method" text="const SSL_METHOD *SSLv23_client_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON48" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="TLSv1_method" text="const SSL_METHOD *TLSv1_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON49" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="TLSv1_server_method" text="const SSL_METHOD *TLSv1_server_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON50" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="TLSv1_client_method" text="const SSL_METHOD *TLSv1_client_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON51" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="TLSv1_1_method" text="const SSL_METHOD *TLSv1_1_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON52" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="TLSv1_1_server_method" text="const SSL_METHOD *TLSv1_1_server_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON53" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="TLSv1_1_client_method" text="const SSL_METHOD *TLSv1_1_client_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON54" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="TLSv1_2_method" text="const SSL_METHOD *TLSv1_2_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON55" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="TLSv1_2_server_method" text="const SSL_METHOD *TLSv1_2_server_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON56" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="TLSv1_2_client_method" text="const SSL_METHOD *TLSv1_2_client_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON57" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="DTLSv1_method" text="const SSL_METHOD *DTLSv1_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON58" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="DTLSv1_server_method" text="const SSL_METHOD *DTLSv1_server_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON59" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="DTLSv1_client_method" text="const SSL_METHOD *DTLSv1_client_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON60" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="DTLSv1_2_method" text="const SSL_METHOD *DTLSv1_2_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON61" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="DTLSv1_2_server_method" text="const SSL_METHOD *DTLSv1_2_server_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON62" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="DTLSv1_2_client_method" text="const SSL_METHOD *DTLSv1_2_client_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON63" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="DTLS_method" text="const SSL_METHOD *DTLS_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON64" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="DTLS_server_method" text="const SSL_METHOD *DTLS_server_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON65" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="DTLS_client_method" text="const SSL_METHOD *DTLS_client_method(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON66" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_SSL_CIPHER" id="SSL_get_ciphers" text="struct stack_st_SSL_CIPHER &#10;# 2391 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                    *SSL_get_ciphers(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_do_handshake" text="int SSL_do_handshake(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_renegotiate" text="int SSL_renegotiate(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_renegotiate_abbreviated" text="int SSL_renegotiate_abbreviated(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_renegotiate_pending" text="int SSL_renegotiate_pending(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_shutdown" text="int SSL_shutdown(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="SSL_CTX_get_ssl_method" text="const SSL_METHOD *SSL_CTX_get_ssl_method(SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_METHOD" id="SSL_get_ssl_method" text="const SSL_METHOD *SSL_get_ssl_method(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_ssl_method" text="int SSL_set_ssl_method(SSL *s, const SSL_METHOD *method)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="const SSL_METHOD" id="method" text="const SSL_METHOD *method" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_alert_type_string_long" text="const char *SSL_alert_type_string_long(int value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="int" id="value" text="int value" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_alert_type_string" text="const char *SSL_alert_type_string(int value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="int" id="value" text="int value" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_alert_desc_string_long" text="const char *SSL_alert_desc_string_long(int value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="int" id="value" text="int value" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_alert_desc_string" text="const char *SSL_alert_desc_string(int value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="int" id="value" text="int value" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_client_CA_list" text="void SSL_set_client_CA_list(SSL *s, &#10;# 2407 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;                                   struct stack_st_X509_NAME &#10;# 2407 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                       *name_list)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="struct stack_st_X509_NAME" id="name_list" text="struct stack_st_X509_NAME &#10;# 2407 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                       *name_list" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_client_CA_list" text="void SSL_CTX_set_client_CA_list(SSL_CTX *ctx, &#10;# 2408 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;                                             struct stack_st_X509_NAME &#10;# 2408 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                                 *name_list)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="struct stack_st_X509_NAME" id="name_list" text="struct stack_st_X509_NAME &#10;# 2408 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                                 *name_list" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_NAME" id="SSL_get_client_CA_list" text="struct stack_st_X509_NAME &#10;# 2409 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                   *SSL_get_client_CA_list(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_NAME" id="SSL_CTX_get_client_CA_list" text="struct stack_st_X509_NAME &#10;# 2410 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                   *SSL_CTX_get_client_CA_list(const SSL_CTX *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CTX" id="s" text="const SSL_CTX *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_add_client_CA" text="int SSL_add_client_CA(SSL *ssl, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_add_client_CA" text="int SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="X509" id="x" text="X509 *x" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_connect_state" text="void SSL_set_connect_state(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_accept_state" text="void SSL_set_accept_state(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_get_default_timeout" text="long SSL_get_default_timeout(const SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="s" text="const SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_library_init" text="int SSL_library_init(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON67" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="char" id="SSL_CIPHER_description" text="char *SSL_CIPHER_description(const SSL_CIPHER *, char *buf, int size)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CIPHER" id="ANON68" text="const SSL_CIPHER *" mod=""/>
    <arg type="char" id="buf" text="char *buf" mod=""/>
    <arg type="int" id="size" text="int size" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_X509_NAME" id="SSL_dup_CA_list" text="struct stack_st_X509_NAME &#10;# 2422 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                   *SSL_dup_CA_list(&#10;# 2422 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;                                    struct stack_st_X509_NAME &#10;# 2422 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                        *sk)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="struct stack_st_X509_NAME" id="sk" text="struct stack_st_X509_NAME &#10;# 2422 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                        *sk" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL" id="SSL_dup" text="SSL *SSL_dup(SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="SSL_get_certificate" text="X509 *SSL_get_certificate(const SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="struct evp_pkey_st" id="SSL_get_privatekey" text="struct evp_pkey_st *SSL_get_privatekey(const SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="X509" id="SSL_CTX_get0_certificate" text="X509 *SSL_CTX_get0_certificate(const SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CTX" id="ctx" text="const SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="EVP_PKEY" id="SSL_CTX_get0_privatekey" text="EVP_PKEY *SSL_CTX_get0_privatekey(const SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CTX" id="ctx" text="const SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_quiet_shutdown" text="void SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="int" id="mode" text="int mode" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_get_quiet_shutdown" text="int SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CTX" id="ctx" text="const SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_quiet_shutdown" text="void SSL_set_quiet_shutdown(SSL *ssl, int mode)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="int" id="mode" text="int mode" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_quiet_shutdown" text="int SSL_get_quiet_shutdown(const SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_shutdown" text="void SSL_set_shutdown(SSL *ssl, int mode)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="int" id="mode" text="int mode" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_shutdown" text="int SSL_get_shutdown(const SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_version" text="int SSL_version(const SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_default_verify_paths" text="int SSL_CTX_set_default_verify_paths(SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_load_verify_locations" text="int SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile,&#10;                                  const char *CApath)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const char" id="CAfile" text="const char *CAfile" mod=""/>
    <arg type="const char" id="CApath" text="const char *CApath" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL_SESSION" id="SSL_get_session" text="SSL_SESSION *SSL_get_session(const SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL_SESSION" id="SSL_get1_session" text="SSL_SESSION *SSL_get1_session(SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL_CTX" id="SSL_get_SSL_CTX" text="SSL_CTX *SSL_get_SSL_CTX(const SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL_CTX" id="SSL_set_SSL_CTX" text="SSL_CTX *SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_info_callback" text="void SSL_set_info_callback(SSL *ssl,&#10;                           void (*cb) (const SSL *ssl, int type, int val))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="void" id="cb" text="void (*cb) (const SSL *ssl, int type, int val)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_get_info_callback" text="void (*SSL_get_info_callback(const SSL *ssl)) (const SSL *ssl, int type,&#10;                                               int val)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
    <arg type="int" id="type" text="int type" mod=""/>
    <arg type="int" id="val" text="int val" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_state" text="int SSL_state(const SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_state" text="void SSL_set_state(SSL *ssl, int state)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="int" id="state" text="int state" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_verify_result" text="void SSL_set_verify_result(SSL *ssl, long v)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="long" id="v" text="long v" mod=""/>
  </args>
</fdecl>
<fdecl type="long" id="SSL_get_verify_result" text="long SSL_get_verify_result(const SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_ex_data" text="int SSL_set_ex_data(SSL *ssl, int idx, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_get_ex_data" text="void *SSL_get_ex_data(const SSL *ssl, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL" id="ssl" text="const SSL *ssl" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_ex_new_index" text="int SSL_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,&#10;                         CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_SESSION_set_ex_data" text="int SSL_SESSION_set_ex_data(SSL_SESSION *ss, int idx, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_SESSION" id="ss" text="SSL_SESSION *ss" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_SESSION_get_ex_data" text="void *SSL_SESSION_get_ex_data(const SSL_SESSION *ss, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_SESSION" id="ss" text="const SSL_SESSION *ss" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_SESSION_get_ex_new_index" text="int SSL_SESSION_get_ex_new_index(long argl, void *argp,&#10;                                 CRYPTO_EX_new *new_func,&#10;                                 CRYPTO_EX_dup *dup_func,&#10;                                 CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_set_ex_data" text="int SSL_CTX_set_ex_data(SSL_CTX *ssl, int idx, void *data)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ssl" text="SSL_CTX *ssl" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
    <arg type="void" id="data" text="void *data" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_get_ex_data" text="void *SSL_CTX_get_ex_data(const SSL_CTX *ssl, int idx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const SSL_CTX" id="ssl" text="const SSL_CTX *ssl" mod=""/>
    <arg type="int" id="idx" text="int idx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CTX_get_ex_new_index" text="int SSL_CTX_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,&#10;                             CRYPTO_EX_dup *dup_func,&#10;                             CRYPTO_EX_free *free_func)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="long" id="argl" text="long argl" mod=""/>
    <arg type="void" id="argp" text="void *argp" mod=""/>
    <arg type="CRYPTO_EX_new" id="new_func" text="CRYPTO_EX_new *new_func" mod=""/>
    <arg type="CRYPTO_EX_dup" id="dup_func" text="CRYPTO_EX_dup *dup_func" mod=""/>
    <arg type="CRYPTO_EX_free" id="free_func" text="CRYPTO_EX_free *free_func" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_get_ex_data_X509_STORE_CTX_idx" text="int SSL_get_ex_data_X509_STORE_CTX_idx(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON69" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_tmp_rsa_callback" text="void SSL_CTX_set_tmp_rsa_callback(SSL_CTX *ctx,&#10;                                  RSA *(*cb) (SSL *ssl, int is_export,&#10;                                              int keylength))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="RSA" id="cb" text="RSA *(*cb) (SSL *ssl, int is_export,&#10;                                              int keylength)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_tmp_rsa_callback" text="void SSL_set_tmp_rsa_callback(SSL *ssl,&#10;                              RSA *(*cb) (SSL *ssl, int is_export,&#10;                                          int keylength))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="RSA" id="cb" text="RSA *(*cb) (SSL *ssl, int is_export,&#10;                                          int keylength)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_tmp_dh_callback" text="void SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx,&#10;                                 DH *(*dh) (SSL *ssl, int is_export,&#10;                                            int keylength))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="DH" id="dh" text="DH *(*dh) (SSL *ssl, int is_export,&#10;                                            int keylength)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_tmp_dh_callback" text="void SSL_set_tmp_dh_callback(SSL *ssl,&#10;                             DH *(*dh) (SSL *ssl, int is_export,&#10;                                        int keylength))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="DH" id="dh" text="DH *(*dh) (SSL *ssl, int is_export,&#10;                                        int keylength)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CTX_set_tmp_ecdh_callback" text="void SSL_CTX_set_tmp_ecdh_callback(SSL_CTX *ctx,&#10;                                   EC_KEY *(*ecdh) (SSL *ssl, int is_export,&#10;                                                    int keylength))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="EC_KEY" id="ecdh" text="EC_KEY *(*ecdh) (SSL *ssl, int is_export,&#10;                                                    int keylength)" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_tmp_ecdh_callback" text="void SSL_set_tmp_ecdh_callback(SSL *ssl,&#10;                               EC_KEY *(*ecdh) (SSL *ssl, int is_export,&#10;                                                int keylength))" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="EC_KEY" id="ecdh" text="EC_KEY *(*ecdh) (SSL *ssl, int is_export,&#10;                                                int keylength)" mod=""/>
  </args>
</fdecl>
<fdecl type="const COMP_METHOD" id="SSL_get_current_compression" text="const COMP_METHOD *SSL_get_current_compression(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="const COMP_METHOD" id="SSL_get_current_expansion" text="const COMP_METHOD *SSL_get_current_expansion(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="const char" id="SSL_COMP_get_name" text="const char *SSL_COMP_get_name(const COMP_METHOD *comp)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="const COMP_METHOD" id="comp" text="const COMP_METHOD *comp" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_SSL_COMP" id="SSL_COMP_get_compression_methods" text="struct stack_st_SSL_COMP &#10;# 2539 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                  *SSL_COMP_get_compression_methods(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON70" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_SSL_COMP" id="SSL_COMP_set0_compression_methods" text="struct stack_st_SSL_COMP &#10;# 2540 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                  *SSL_COMP_set0_compression_methods(&#10;# 2540 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot; 3 4&#10;                                                     struct stack_st_SSL_COMP&#10;                                                      &#10;# 2541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                     *meths)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="struct stack_st_SSL_COMP" id="meths" text="struct stack_st_SSL_COMP&#10;                                                      &#10;# 2541 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h&quot;&#10;                                                     *meths" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_COMP_free_compression_methods" text="void SSL_COMP_free_compression_methods(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON71" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_COMP_add_compression_method" text="int SSL_COMP_add_compression_method(int id, COMP_METHOD *cm)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="int" id="id" text="int id" mod=""/>
    <arg type="COMP_METHOD" id="cm" text="COMP_METHOD *cm" mod=""/>
  </args>
</fdecl>
<fdecl type="const SSL_CIPHER" id="SSL_CIPHER_find" text="const SSL_CIPHER *SSL_CIPHER_find(SSL *ssl, const unsigned char *ptr)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
    <arg type="const unsigned char" id="ptr" text="const unsigned char *ptr" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_session_ticket_ext" text="int SSL_set_session_ticket_ext(SSL *s, void *ext_data, int ext_len)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="void" id="ext_data" text="void *ext_data" mod=""/>
    <arg type="int" id="ext_len" text="int ext_len" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_session_ticket_ext_cb" text="int SSL_set_session_ticket_ext_cb(SSL *s, tls_session_ticket_ext_cb_fn cb,&#10;                                  void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="tls_session_ticket_ext_cb_fn" id="cb" text="tls_session_ticket_ext_cb_fn cb" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_session_secret_cb" text="int SSL_set_session_secret_cb(SSL *s,&#10;                              tls_session_secret_cb_fn tls_session_secret_cb,&#10;                              void *arg)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="tls_session_secret_cb_fn" id="tls_session_secret_cb" text="tls_session_secret_cb_fn tls_session_secret_cb" mod=""/>
    <arg type="void" id="arg" text="void *arg" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_set_debug" text="void SSL_set_debug(SSL *s, int debug)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
    <arg type="int" id="debug" text="int debug" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_cache_hit" text="int SSL_cache_hit(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_is_server" text="int SSL_is_server(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
<fdecl type="SSL_CONF_CTX" id="SSL_CONF_CTX_new" text="SSL_CONF_CTX *SSL_CONF_CTX_new(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON72" text="void" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CONF_CTX_finish" text="int SSL_CONF_CTX_finish(SSL_CONF_CTX *cctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CONF_CTX" id="cctx" text="SSL_CONF_CTX *cctx" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CONF_CTX_free" text="void SSL_CONF_CTX_free(SSL_CONF_CTX *cctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CONF_CTX" id="cctx" text="SSL_CONF_CTX *cctx" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned int" id="SSL_CONF_CTX_set_flags" text="unsigned int SSL_CONF_CTX_set_flags(SSL_CONF_CTX *cctx, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CONF_CTX" id="cctx" text="SSL_CONF_CTX *cctx" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="unsigned int" id="SSL_CONF_CTX_clear_flags" text="unsigned int SSL_CONF_CTX_clear_flags(SSL_CONF_CTX *cctx, unsigned int flags)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CONF_CTX" id="cctx" text="SSL_CONF_CTX *cctx" mod=""/>
    <arg type="unsigned int" id="flags" text="unsigned int flags" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CONF_CTX_set1_prefix" text="int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX *cctx, const char *pre)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CONF_CTX" id="cctx" text="SSL_CONF_CTX *cctx" mod=""/>
    <arg type="const char" id="pre" text="const char *pre" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CONF_CTX_set_ssl" text="void SSL_CONF_CTX_set_ssl(SSL_CONF_CTX *cctx, SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CONF_CTX" id="cctx" text="SSL_CONF_CTX *cctx" mod=""/>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="SSL_CONF_CTX_set_ssl_ctx" text="void SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX *cctx, SSL_CTX *ctx)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CONF_CTX" id="cctx" text="SSL_CONF_CTX *cctx" mod=""/>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CONF_cmd" text="int SSL_CONF_cmd(SSL_CONF_CTX *cctx, const char *cmd, const char *value)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CONF_CTX" id="cctx" text="SSL_CONF_CTX *cctx" mod=""/>
    <arg type="const char" id="cmd" text="const char *cmd" mod=""/>
    <arg type="const char" id="value" text="const char *value" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CONF_cmd_argv" text="int SSL_CONF_cmd_argv(SSL_CONF_CTX *cctx, int *pargc, char ***pargv)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CONF_CTX" id="cctx" text="SSL_CONF_CTX *cctx" mod=""/>
    <arg type="int" id="pargc" text="int *pargc" mod=""/>
    <arg type="char" id="pargv" text="char ***pargv" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_CONF_cmd_value_type" text="int SSL_CONF_cmd_value_type(SSL_CONF_CTX *cctx, const char *cmd)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="SSL_CONF_CTX" id="cctx" text="SSL_CONF_CTX *cctx" mod=""/>
    <arg type="const char" id="cmd" text="const char *cmd" mod=""/>
  </args>
</fdecl>
<fdecl type="void" id="ERR_load_SSL_strings" text="void ERR_load_SSL_strings(void)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/ssl.h">
  <args>
    <arg type="void" id="ANON73" text="void" mod=""/>
  </args>
</fdecl>


<fdecl type="int" id="SSL_CTX_set_tlsext_use_srtp" text="int SSL_CTX_set_tlsext_use_srtp(SSL_CTX *ctx, const char *profiles)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srtp.h">
  <args>
    <arg type="SSL_CTX" id="ctx" text="SSL_CTX *ctx" mod=""/>
    <arg type="const char" id="profiles" text="const char *profiles" mod=""/>
  </args>
</fdecl>
<fdecl type="int" id="SSL_set_tlsext_use_srtp" text="int SSL_set_tlsext_use_srtp(SSL *ctx, const char *profiles)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srtp.h">
  <args>
    <arg type="SSL" id="ctx" text="SSL *ctx" mod=""/>
    <arg type="const char" id="profiles" text="const char *profiles" mod=""/>
  </args>
</fdecl>
<fdecl type="struct stack_st_SRTP_PROTECTION_PROFILE" id="SSL_get_srtp_profiles" text="struct stack_st_SRTP_PROTECTION_PROFILE &#10;# 138 &quot;../sujet1/bdd/openssl/openssl-1.0.2h/headers/srtp.h&quot;&#10;                                 *SSL_get_srtp_profiles(SSL *ssl)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srtp.h">
  <args>
    <arg type="SSL" id="ssl" text="SSL *ssl" mod=""/>
  </args>
</fdecl>
<fdecl type="SRTP_PROTECTION_PROFILE" id="SSL_get_selected_srtp_profile" text="SRTP_PROTECTION_PROFILE *SSL_get_selected_srtp_profile(SSL *s)" file="../sujet1/bdd/openssl/openssl-1.0.2h/headers/srtp.h">
  <args>
    <arg type="SSL" id="s" text="SSL *s" mod=""/>
  </args>
</fdecl>
</root>
